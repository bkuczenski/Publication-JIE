%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox: 73 405 466 713
%%HiResBoundingBox: 73.5 406 465 712.5
%%Creator: dvips(k) 5.996 Copyright 2016 Radical Eye Software
%%Title: make_fig.dvi
%%CreationDate: Fri Mar 31 18:29:10 2017
%%PageOrder: Ascend
%%DocumentFonts: NimbusRomNo9L-Regu StandardSymL NimbusRomNo9L-ReguItal
%%+ CMSY10
%%DocumentPaperSizes: Letter
%%EndComments
% EPSF created by ps2eps 1.68
%%BeginProlog
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -t letter -j0 -G0 make_fig.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2017.03.31:1829
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end
%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro
%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro
%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def
%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack
/psStringwidth /stringwidth load def
/psShow /show load def
%/stringwidth{ 32 rightTrim psStringwidth } bind def
%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%
/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro
%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end
%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro
%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.
%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def
/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro
%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro
%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro
%%EndProcSet
%%BeginProcSet: pst-blur.pro 0 0
%%
%% This is file `pst-blur.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% pst-blur.dtx  (with options: `prolog')
%% 
%% IMPORTANT NOTICE:
%% 
%% For the copyright see the source file.
%% 
%% Any modified versions of this file must be renamed
%% with new filenames distinct from pst-blur.pro.
%% 
%% For distribution of the original source see the terms
%% for copying and modification in the file pst-blur.dtx.
%% 
%% This generated file may be distributed as long as the
%% original source files, as listed above, are part of the
%% same distribution. (The sources need not necessarily be
%% in the same archive or directory.)
%% $Id: pst-blur.dtx,v 2.0 2005/09/08 09:48:33 giese Exp $
%%
%% Copyright 1998-2007 Martin Giese, mgiese@risc.uni-linz.ac.at
%%                     Herbert Voss, voss@pstricks.de
%%
%% This file is under the LaTeX Project Public License
%% See CTAN archives in directory macros/latex/base/lppl.txt.
%%
%% DESCRIPTION:
%%   `pst-blur' is a PSTricks package for blurred shadows
%%
/tx@PstBlurDict 60 dict def
tx@PstBlurDict begin
/Iterate {
  /SegLines ED
  /ThisB ED /ThisG ED /ThisR ED
  /NextB ED /NextG ED /NextR ED
  /W 2.0 BlurRadius mul def
  /WDec W SegLines div def
  /RInc NextR ThisR sub SegLines div def
  /GInc NextG ThisG sub SegLines div def
  /BInc NextB ThisB sub SegLines div def
  /R ThisR def
  /G ThisG def
  /B ThisB def
  SegLines {
    R G B
    sqrt 3 1 roll sqrt 3 1 roll sqrt 3 1 roll
    setrgbcolor
    gsave W setlinewidth
    stroke grestore
    /W W WDec sub def
    /R R RInc add def
    /G G GInc add def
    /B B BInc add def
  } bind repeat
} def
/BlurShadow {
  Shadow
  /BlurSteps ED
  /BlurRadius ED
  dup mul /BEnd ED dup mul /GEnd ED dup mul /REnd ED
  dup mul /BBeg ED dup mul /GBeg ED dup mul /RBeg ED
  RBeg REnd add 0.5 mul /RMid ED
  GBeg GEnd add 0.5 mul /GMid ED
  BBeg BEnd add 0.5 mul /BMid ED
  /OuterSteps BlurSteps 2 div cvi def
  /InnerSteps BlurSteps OuterSteps sub def
  1 setlinejoin
  RMid GMid BMid REnd GEnd BEnd OuterSteps Iterate
  gsave RBeg sqrt GBeg sqrt BBeg sqrt setrgbcolor fill grestore
  clip
  0 setlinejoin
  RMid GMid BMid RBeg GBeg BBeg InnerSteps Iterate
} def
end
%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def
%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end
%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end
%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end
%%EndProcSet
TeXDict begin @defspecial
 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse
 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 /burl@stx null def /BU.S { /burl@stx null def } def /BU.SS { currentpoint
/burl@lly exch def /burl@llx exch def burl@stx null ne {burl@endx burl@llx
ne {BU.FL BU.S} if} if burl@stx null eq { burl@llx dup /burl@stx exch
def /burl@endx exch def burl@lly dup /burl@boty exch def /burl@topy
exch def } if burl@lly burl@boty gt {/burl@boty burl@lly def} if }
def /BU.SE { currentpoint /burl@ury exch def dup /burl@urx exch def
/burl@endx exch def burl@ury burl@topy lt {/burl@topy burl@ury def}
if } def /BU.E { BU.FL } def /BU.FL { burl@stx null ne {BU.DF} if }
def /BU.DF { BU.BB [ /H /I /Border [burl@border] /Color [burl@bordercolor]
/Action << /Subtype /URI /URI BU.L >> /Subtype /Link BU.B /ANN pdfmark
/burl@stx null def } def /BU.BB { burl@stx HyperBorder sub /burl@stx
exch def burl@endx HyperBorder add /burl@endx exch def burl@boty HyperBorder
add /burl@boty exch def burl@topy HyperBorder sub /burl@topy exch def
} def /BU.B { /Rect[burl@stx burl@boty burl@endx burl@topy] } def /eop
where { begin /@ldeopburl /eop load def /eop { SDict begin BU.FL end
@ldeopburl } def end } { /eop { SDict begin BU.FL end } def } ifelse
 
@fedspecial end
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright:  (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/UniqueID 5096651 def
/PaintType 0 def
/FontInfo 9 dict dup begin
 /version (003.002) readonly def
 /Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
 /FullName (CMSY10) readonly def
 /FamilyName (Computer Modern) readonly def
 /Weight (Medium) readonly def
 /ItalicAngle -14.04 def
 /isFixedPitch false def
 /UnderlinePosition -100 def
 /UnderlineThickness 50 def
end readonly def
/Encoding 256 array
 0 1 255 { 1 index exch /.notdef put} for
dup 0 /minus put
dup 1 /periodcentered put
dup 2 /multiply put
dup 3 /asteriskmath put
dup 4 /divide put
dup 5 /diamondmath put
dup 6 /plusminus put
dup 7 /minusplus put
dup 8 /circleplus put
dup 9 /circleminus put
dup 10 /circlemultiply put
dup 11 /circledivide put
dup 12 /circledot put
dup 13 /circlecopyrt put
dup 14 /openbullet put
dup 15 /bullet put
dup 16 /equivasymptotic put
dup 17 /equivalence put
dup 18 /reflexsubset put
dup 19 /reflexsuperset put
dup 20 /lessequal put
dup 21 /greaterequal put
dup 22 /precedesequal put
dup 23 /followsequal put
dup 24 /similar put
dup 25 /approxequal put
dup 26 /propersubset put
dup 27 /propersuperset put
dup 28 /lessmuch put
dup 29 /greatermuch put
dup 30 /precedes put
dup 31 /follows put
dup 32 /arrowleft put
dup 33 /arrowright put
dup 34 /arrowup put
dup 35 /arrowdown put
dup 36 /arrowboth put
dup 37 /arrownortheast put
dup 38 /arrowsoutheast put
dup 39 /similarequal put
dup 40 /arrowdblleft put
dup 41 /arrowdblright put
dup 42 /arrowdblup put
dup 43 /arrowdbldown put
dup 44 /arrowdblboth put
dup 45 /arrownorthwest put
dup 46 /arrowsouthwest put
dup 47 /proportional put
dup 48 /prime put
dup 49 /infinity put
dup 50 /element put
dup 51 /owner put
dup 52 /triangle put
dup 53 /triangleinv put
dup 54 /negationslash put
dup 55 /mapsto put
dup 56 /universal put
dup 57 /existential put
dup 58 /logicalnot put
dup 59 /emptyset put
dup 60 /Rfractur put
dup 61 /Ifractur put
dup 62 /latticetop put
dup 63 /perpendicular put
dup 64 /aleph put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /union put
dup 92 /intersection put
dup 93 /unionmulti put
dup 94 /logicaland put
dup 95 /logicalor put
dup 96 /turnstileleft put
dup 97 /turnstileright put
dup 98 /floorleft put
dup 99 /floorright put
dup 100 /ceilingleft put
dup 101 /ceilingright put
dup 102 /braceleft put
dup 103 /braceright put
dup 104 /angbracketleft put
dup 105 /angbracketright put
dup 106 /bar put
dup 107 /bardbl put
dup 108 /arrowbothv put
dup 109 /arrowdblbothv put
dup 110 /backslash put
dup 111 /wreathproduct put
dup 112 /radical put
dup 113 /coproduct put
dup 114 /nabla put
dup 115 /integral put
dup 116 /unionsq put
dup 117 /intersectionsq put
dup 118 /subsetsqequal put
dup 119 /supersetsqequal put
dup 120 /section put
dup 121 /dagger put
dup 122 /daggerdbl put
dup 123 /paragraph put
dup 124 /club put
dup 125 /diamond put
dup 126 /heart put
dup 127 /spade put
dup 128 /arrowleft put
dup 160 /space put
dup 161 /minus put
dup 162 /periodcentered put
dup 163 /multiply put
dup 164 /asteriskmath put
dup 165 /divide put
dup 166 /diamondmath put
dup 167 /plusminus put
dup 168 /minusplus put
dup 169 /circleplus put
dup 170 /circleminus put
dup 173 /circlemultiply put
dup 174 /circledivide put
dup 175 /circledot put
dup 176 /circlecopyrt put
dup 177 /openbullet put
dup 178 /bullet put
dup 179 /equivasymptotic put
dup 180 /equivalence put
dup 181 /reflexsubset put
dup 182 /reflexsuperset put
dup 183 /lessequal put
dup 184 /greaterequal put
dup 185 /precedesequal put
dup 186 /followsequal put
dup 187 /similar put
dup 188 /approxequal put
dup 189 /propersubset put
dup 190 /propersuperset put
dup 191 /lessmuch put
dup 192 /greatermuch put
dup 193 /precedes put
dup 194 /follows put
dup 195 /arrowleft put
dup 196 /spade put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A07B684C079A47
D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81DE96489F740045C5E342F02D
A1C9F9F3C167651E646F1A67CF379789E311EF91511D0F605B045B279357D6FC8537C233E7AE
E6A4FDBE73E75A39EB206D20A6F61021961B748D419EBEEB028B592124E174CA595C108E1272
5B9875544955CFFD028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36
AD861319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED43D08C536
93138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E440902191AA9D8E4C5FBBDA55F1
BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2E0C30B8FD2E475FE0D66D4AA65821864
C7DD6AC9939A04094EEA832EAD33DB7A11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85C
C6358A41342D70AD0B97C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150E
C595E857D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20B6F5
990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D393BEF764AA830936
164EDC2C76977D765F095166FE1D9B0498CAB4AD68621FDC2819CE863510B07FC37ACE71A641
448CCE3453022A0ED0C1AFE7DB2BEC6006B11F4E993C658453BD190269DC5F091BD05055983A
4F869B7CF38AFF99F9CF1196AFB3C00B6407E57328CFC3AD4DE530C8A30A9817F3AF2438B69B
24996DA4104A4F2CCEC2348B1328EB84438D0DC63B767E37C9913E2AE4DDD669BDEC427E6941
CACECB52727BB7341D3A13653F92CED2DA9FA9B19F4AE93B067750ABB71F7107581A0015A08D
B715E35A8E90B5D1F2DFBBBC6B3B443D67206C9F6450F124290E7A922BB43EAA3B5F8101EAF9
D5706E919EFBF5F20FE384A811A7237C2EF5A09851F8525A0602A0B893B297E904E1C0F86249
13D532C89A18B403E10608D797036362C89987172B317DDE23F6EDA786BD47038866EDCDB5D8
8371321552F64A292040226FE53BEA879343AB2C35EC288CFAD8E3C60B35C17EBB85FD14C940
E82B01315DD8E689E39A85742D923303DAA4A5F317F9739CD39573AEB82F0427E898439B389E
89A799DDD5D1C3D9710985772FDDF908A085F1EDA297F11262B7033FF288C863EA05D83EAFF9
91AB051238690FD2CC1D62B6E981855ACFDE11F70ABDD526549570D1F79892D220D1970C230F
F879D7D614D83100F926E326FA58AA1737ECAE914B7BC4E8886C82C6EEC4CE887D5ABA35F770
5234CA9E210484CBDE9E2AA55976770849B995914F234F8C41BDB2B5EEB94FABA4172280DAA2
2EDD049E3D7C4AAAC75CB07AA37040A68EAF76A999AA0FCDF5FDE2D1069704C23306854AFB3F
427990ED447F427D176548605757E516EB657137608B19079BB60BAF2E15677FC54867FA8C35
55ED7FDCC69C2CA167BA71FC238573DFE2507D4D2F30B41D0A23EE8327107DE96BAA270DC069
69E2FFF802A3CE59FE411B190E3E49BF143441B89E52AB02A231DF42694BC676046D7B32AA0A
32A15635CEB06D7C80BEE2E20498AB450E01FD9CE71DA883019D1DC48D62B2D955B4FC9A05E9
FDEA23545DC4C6F8822776F9342A59570875D1E900ECE764F4F238FD24BE7265841BEFFB1EF2
0BCCEA6628605AFEE122EF3F526E328F21D71A77B03AB841D681287A8C8B361103641481E76E
7E355B6B58F2BD9C5B6914E96355BD593DEF81841ABDDF6B981D11607A819B4000F681F325BA
0FF535194BC5D5F6FED8A75001C410933870DE94A42FBE0E45E16517D1DE74D09F4FCA42F337
48040E864AB707BD6228BA17D5E0207A37FB9970367521B35AAE1DFEB7761FBA93EABC710662
5F4E9D620D69DF1B8007693CAAD00A14A9C591E015E60F35FAB1320B108389EE1238E3D6650C
F8A2B1C6FE3BA686CF40DD7B571EAEA169FF87425DA01143B2729DF9BECD5FBA049099FFBC2D
E6DBEB861E3F7675037C544DCD0B386651F8DFD1C51F77E67BEFB8E10C70F7B79CEC56428042
0CB0C2FE830B6029B7D3F72A20AC1D06C00F08A4FE55AD091769685C475198381375DC1FA044
557E4B8BA3C5D68AA798FC1D5F949E30C66321DE4A2DCEAB7CF978DE239F12F3F02E5A7B7AEE
B979E6E0D7E7CBC5A64C0F83793572C766DBE35265E0ECD7555340C3056A22F8C3AB991B21AD
1E40756D1D595BB8AB0D5EF411E3A588894A0301FCB3571BC3A74CBF16FB4B2FB13328C87658
43870BCA4496F97D1EDA1562CAD92498CA1BBEE5C91E16C31DA13F54E9D3D2F33548D84EC7AC
98FD84076F35D951034F4E7E06913CB0F8450B9E3DB89677C7C09F9349ACD01A1E505C421C25
3963FD765EE21FD08F851B6C6072689D3A803334F733ECE932D84E886D089595590E5890A4C6
E6BEFE4752BEECF7309741873F15104142E5CC4A4655AD3765400C6A46E0F308DA358E0333B0
2A4131829707F8AC5E70BE999E9C6F4599EA9DB005082632E1D85FF7860AFEB9A3BC352E10DE
9A0999538AD69BBEF18D3D2E3812C3FFBDA5C099CDC61F67A6851E84CAFFBF891A9794ED8AF9
CAB270E3C78C951C5420C025FEA34B0D59B4308722D610669E210020A559FD6C6CBF2CEE53D5
8E46226CA2D01A4A3D39812BA23324385A0B2B0657BCFF9E53F848BFB6F6BB17E379FC7081D4
3A38FF40C6C42934A356EB7A351198DC63473DD34BCB5D2B911B53130B4E630040459AB8EA37
E67A5BBEAC5927FCF4D7F63F36F7181075D7BC6FEE9DCBA128E35A567C7D5BA75E5A4D20A629
6A6879A24B62EDB6985279868FA0E2CC9898A9AFECB7562457661EB7C487E43FB7C03A55219E
414AFCF164DFFA3E323BCE029A86C02B1E71D16411E4DD224FFBC28026265A79651C56A5F510
7B8C48527D8C8848E1F47C624C7C003DE41A5C53E2D8AD802B251D66E13FA8AB0A31CE8BC14A
2A0652E99865A99CA3B12ED35138209FD48CC20D5EF2973FD7B0D37E5C0BEFDB75A4F09D3B61
CC725F292220579B50FA5D05F66F66E09B63BDC126457C6631548E7F75681F8E0B19D5DF252E
2BBA45E487AB3F091EE607CA278C5966CFF9CA4E3CD813CE831E9FAD3116D8ABBB6A7B920CA3
DCF9343BA475886E94BA90A0BBC5BC9974675744C9162DC2C912D8E19BB2F3BDA3F17C76852E
3CEF0BCD9BFBB3BC79922D5219C1CDCFA2EE824B4AEF8BE6F05FFEF8BDAA51F5A52FC13A4A15
867C01C26240871C37B2FF5253449A02FED980B565D62C6C0D0BC149A356014BBA509727CE1D
F62AF4F28535F5CB1167CC8508089769D07F5171AF79F72721862A0B6CBC59DC79615D5EFE89
B7FEC51FEFFE1DB869D1D0A329D2967E705A714336F0E75D840B37A12E9203B51049F024520E
6637AF4BAB4DCF50B3682D7BF71F654BC5661922556E45CC7EEFCA196B3569B169DB4E01B5A1
52F1539A19B3C2B680795BBB04826BDA3C857158029FAC2E0BDE94EC5CDE45E3DCF6C082DBF3
6D3DD37B135A6F0736E3252FDCE218EB5DB8773E2DAFFD1DAD53671EB3D83A275D011BF5D501
A22D407AE09257CD21297B617E0443FBDAA297D37F66AC436DB78B410E79A002233A0D7DA619
CCA9DA4714325A51CB0BBE9EB6CEA352BB1A0A2FF83610B2A17E19480E9285E1570CFCB8EC7E
1D691A72611D336DE5C6626A1D1D2DF363A1D781DBE61235F1D1805CC2A8C670005F84FD4681
67F8640B12929CF347538B94EB37DA39904D4763D93E757AE2B4C775D98E23BA983E35992A29
2A04976544EC462CA656E5EC37EE8EE46BF1C3B0B4C912DF05AE1535CC654000B06BCDC95D9C
6B5F36F8FD8A0EB31A02C2B863DEBF8FEDBC57D5F93D2604321FA66070D14FED60441E09999B
90A5FB715347583A35314381554031BCE4E6E73AD3FCBB61ED0D4C015863119C1D945E981AF3
F38C81EB3A350A70A63EB06119965C90D7EBA669359FCBDFA87C4DB920F8F3D99C73A0DF7E10
D3C410696D679CBFAE831E3E99FEF6C038F669C58E1EB6F60FF587F5EC561629EF429734CB88
6AF914AC3E6BC04F21D73F184CA12D7E033B301C181D15101A986BB95132DABEE082A617520C
F95EC9069499A02F073D7DBE41726B51FC05A9348953495B4CDE8D0A8F8C04D07ABEB3BA0076
3A80F2E3B5804947E690DB3A7B3BC6C48A67F5D45F5C658FECFF28790B709385D24D02FC3B0C
9F9AB04E168BAC78F0837D9BD402C1ABFA84148FD815240108CD511E50FB8E64F20058EE54E4
ED45181AD9BB777DEE3303C4991EF8EC56B6C278CE63F6C2FF92308A25B9AFDB4585A808AB3F
03D8A15A20FFE399DEE429C959F8B3DFDF81433C41CEAC874479A2C51F9FAEAAD5B7B23230B9
9523FB256896A85A8C48C057A70DE745F753B4183AAA6F84B4ACAB090F33CC2C31186D1D8A02
18A74E1987D86B9C3602BA294CD29FEECE4187523CF511FD075692B1C080A5A22281BAAA4EA7
01D7573D083E2F6EDEA3D49FEAFF2CBF989703E83828E6C7E324558AFB73E3388F0B0E6A97ED
ED5A9553DD33DBBBBAF2174A562AE2B8A4B6E7D13E90FF9B7D650231CBF9EE48DBDB00AEE2E0
FEBF8D6778F19CBCB8766A0ACC9BCE2659771BFA97CE7BA811A3A6C8CBEE899839E525DA2ECD
F66CD99FCED902AA102D92CD9A279453BA74EF8C0CF32C11A412A05CFA2C187833F885F359DC
EA34EE24E90F7F107A23D9EE269C15A647916F56C32543AD5F81D90C84B8305E5BFEF1F3B356
CEEB5BAC54AA00DC9C6F03B4AFCF7AA4D31964377525A661FBB743D3996447AFBF76C8FA874B
CBB374B02C538AC626004EC8E1E9030D60C4A097CDAFC143732FB7431008CF28ABEC4529F468
9720D4EF580676CA855FFEDDC66B7C1DF07DB89EE98C0DB6FAA5551ADE4D674B51E4E3FA4B24
A3DB5196E01C6CA1DF5D669A3C0FC57DC1F576C2BA14D5DE284614AF3276E3A1159CBF8D4042
6A60E8C5DD426F1307222DAA8AA78BEE55C27E26013120FB5471CB33CA4FB642B1C386018EE3
D4424CA411F49CD569CDACB51AB9BB5E66E1E13ED5F8BE0E912BC13C7B23E10C042C33DA1965
6264D7473B4E0C3DABE14F9F94450D1113C88EEC18CFEE640A6D9A40DA9CCED6EC5E2E9F1B35
7DA635C3A2C5A23874E496B868FD0260D30F1780878A900B90637A1237C63D83335A3FD4A664
321C048BF2273F9C4AE3161E1F06E6EA5F3F15CFED43C622E0D7E245EDFB866398DFF2EC9946
74767B7F3DD853CA356A3607C7BF8F9C6889EB9942ABE469EF88368742FB5C41D06125D2042E
EA414B344AC718FEAEB308302F5607C06852A30CF778D236EC90CA10934C629FD59890176264
DBF9C1AEB33A6028B9EF09B06BCB182DA58ECCAA4E2E1FBB13868C98CEB61223E9658EBF003A
C67493587A156EFBE73EC88CCDD55C9C10CDFC52F7A7B274D631DBB5D629F41AC8760741953A
6B90C6E9E4D2C79702C59EECDC65D8948317D67808CFBD81953AD32837A42EBBE48F77D6B387
E272855E54ACD32D3377E19724B3BB370A71C633C3A41A0523FC219EFD5310EB3CB5FC93F0F9
E6BFB11517E2B901016CE8DD44BFA8590EDEA88F5229FFDB83E401034C826F038D58C19E5470
4A4E2E36B7738FC6F80DF4D82A5285853C49F9689363392536C3BA25C00B7885E7DC3951E9B5
D22414C9E9A264954CCCFAF8BCE70CFFD4F726263EBEBB70D52A58B3D6BD029F555A630D687C
7E7103C8B8F2B33EA41732D6FB7FA999CCA0185A13C8BD80A2762AB9919C3E9FC07556BA8C71
49B4CC5B58DBE84297E3E8D2B34591D9FCAC659C0FE115F34ABA807DD94410AF8F532418382E
F8F7980E1598A97A61926B809FD771B2795C69E6B1F15FF0EED329FB793FA3FAF0580ED07F51
B0E1BC1401EA5026897990CF09F9750268AF812E89DA551EC14B457836CD38E5C07179A3EE0A
BD3A85C693ACA829A5E492FD4F1BF12725544FBC81FAA2004784DB367184315C68BEE9FBB1D6
8F91C9D0901BAD3BDA4FFFC203C232276A495EF1B2B82F36FE36716733F0E993B19407744C06
7324BDD2D5641977B1A118DBB844104397F963CA2E01B7155CB84BB642FC315C028FE4502335
F761A9DDBEF7ADE1ABE87D31AF848A5285BD8328ED3E8A2A608590DA11968AA8C0D8010329A9
E172AAC2C7D0061B14EDAD1142FEBD3DDC0ED20023CF06BB146B3F58A6A197DDA1CB2533B236
FAF2825E8DFE70B79A0938D79664C1D26B4412FD10C76729CB22392E8976960ABED0A03D5FDD
C7C5C2C6221BA1FA08020B88FD9AA0CE8B5FD26D58A679339A2AE6730746B8413B6E05361755
FBF11FBFA4974CC1AF36136803DB8282A7F5429327B875D0FD222835C7AB82049CBDA6AD1731
F6D06AD2A20027765CF62F7E4BE9521465A7C3E968DBCF95F2C62EB3829CE6DFE845EE20E8EA
89CA6C46BA14E5A920D8E28A4008C210F747622AE31F5F9036C70FA52BFFF08A4BAB3D5EA2EF
6E8656F89058F4A67933AF30E9A16467D563B2782268E2568868F677650A74F415289CBAC0DE
CDF828485066AC07C011623DE9643DDE39840B1A739B33ED3EC705C13DFB191472987059E501
7002D278168B5280FA2E26C6D51CA663B384F5CFF4A6232F5F68E185231EEA239904319E180F
91DA98A63B38E16E138D2DCBCFEFA5F3E5AC6FE764A3A9F3EB622117662AFD26A124933CB1E0
4AAB53923AF5D9DD972536C4904A1602040545A9AD4904D867C1D0AB907D733EDC19EC093391
3B0EE96E8578527FD3D1204A25982635CCA01A9B101A843F6C373AC4C8E39E39BB13AE6A0EA1
70B59987488481D38806D429E902801F9CE25EEDEB6012CC9EBA0736820F82C640CD8C7D852D
9EFFE6F769D7FDE1DD628861FF628BC0BA8EF12726F83D7FCE6ED8785DBCE502DD0571A76D88
B7FAC1E2DB24DB97394937A1EA17031078EE07D00B554B9C892C68B624D3900266E885028724
3BE44F11F86E95DC00E89C5C47F573C0A7F1CD0CCD26498334C7D37A3AF4457CA805446A7434
45978D8C3D25FBA2350A878E23DE65D49E9E5F819484DC1B85ED2BDFF923216C101FD8F411C1
443AD7BCF5E90FDD6BD29899C86EB3ECC82832FE75A59EB3FA696F2696A450E2504A473123A8
D24956ABEF5ADAF5B3BB57FFA5364214AC0E9E245CCF431DFB8A7A5104BD97D5E5104CA9A057
74D0FCA9EC0458BD7289794FF19FD00E2D05086336902514F5CF8141307C037E5D2E30B62D1C
8A5A7682BC941A5445D8A17F5670554AD4AE24EB95524CEBF2599D5D00AEDEE2B5537F869A46
BF093296C77F86ED5658C3DD3AB9C25850624A53F6573A51C7AD9F43EB8320DFA31F7F58E0FD
FA9FF640DB5B55FB5C4E014A8C50E062F13D573C845231F98CDE7414BD440AD4CE9E00FB39BC
93C3D1C8F5FEC652FC28AD9EF814CD964DEFC5813828B0A38AB0E0BE6E3CD60259B8A50F95CB
02EB685DDE048D73DB0460985EB16DA749DE3EE1625182EDC552F104E547D22E62501D9D4EAB
C09531E6457B7AB148FFBAC7927318F8BE99EAE5AC9E6AE81081E236187C2D384A92494DE6BD
1FDCC5A79413609F865C6067EB60B83B1E0D49D2CABF88F252377787534037AEA74A842CF21A
5514F3A89A00EEA33793D63040EC2E1231C04026B8DFE67E0E0B460E3BC6E60F71AB1C05F295
F617829255BBBAD68D6D7E5AEE12DAD835A693A661AD9923BB65C781B9085640D3A5317C312D
D3C6159C15D8DAA3A592C9F4B4AB648B160E4B3BD2E3DD475573570F5EE110AE5BCA3C499513
061F202DB76ECBB5316F21F041954B9EFF754A628ECC2B68077CD6072C630CB99421BA3D0D1D
A24CC09B8D42E8ECB52EBAA0E16DE13F0F2E235292A0063ED390D9A8E685160134E931F924D1
50C3B1E315CCC86F2AC29D02D0D98DEB83DFC7531128E0AB55B5F7D161A44DE0154738DE0656
66440E46D94CC4AC21C42F362D222A5CEB4FE9FAC0892ABAA08F3A3AB76A22CF73E343BADA5C
89355A821C67A626C0FA6F8742178B9562543607FA648F9FC0971734B99E476E36E9127419F2
7469DD3BA6A1D82680155B4603D1DD68CCFB5D5B1A90CE7C6B780BBFFE12723ACF7CED4649DC
D6D61DC52FB893305D4CB1D956B4A8393D2ACDF74247F0695C9778D5E104CC29E7E8BDEB1305
DDAB231758BD41DE987F4A3D2A8FE210CD806CB42F46951A51F24526F4E43FE18A7E1B432652
01F114F258CB9DF6438D064CD2541FFE07B847C56E66C501758AFDC9C644CC5BF98C6D0D4ADD
4F4245DCD8BEBCD596F363F8469DBDAAF511789619F04BE31FE959F19649D7808F42AAAE56E6
CE93C9F3B3D1CD7C1A67E0FC85ECADB448869D34331BFA9C9A0840B7FED1DC2B0A40072B5244
9B01AB2CAA5765C2A969B61BAA43F084DEFF1E8EFA194F6EBE8C1C475F8895C6DDD99CCA8F4D
A57DFD02A3036407671F3DA719E819A2D2678167EA17CE5ECA50FE1EA359A5756746DBE661C9
F8F4678B762FE87B2DC98AE853E7CF9C2AA1A34F3D560248C5870653D64573587799524583F0
58E7D5DC9D80E7BC03A0FA66702A5AE4CC9EC25ED4433B437B07FB4D3701683D0CB07D90E29B
8B7A0FABF72D0852ECE8F58BFDC35CA72B36CBB334D21ED27684831DB43F34D54F85F19A2B32
C72874AA6D9ABF878A6EFD56BB4EF0E10D2F008129872A03334919DFE9F9692D2A75B870A43E
19890D10E13DA69D3F1BD10FDC0A89EE30ED890A8D278D132C8AF80B14208623EAC8354973E5
A7C2AF274EFFB139976B0C91FA38948F3C1F7E3954D3826F2B19C3799784C139DCB19C2C1ED2
5C62DE80C876F0DDFD3378A061F8293AB0927797F4453DFACD6D06C0C59E7C923BDFEA427A7C
874543DF1E42039296F0EA569BC8CA6B73A2516E4D495D4894162962428B915A6DF5EE0758D1
D24AEB9792A9AED3489EA63514087CC8B1844CB75EDDBF3438A7BFD22E650C6B2042D622656F
71950FB8EC5300A295431ADB83C197CA03F4F10B2675E9FF74E546991E322B0AEA38F8400664
56111A304DB49A08ACE0EC0CC1021F54472EC940A45CBDAFDBD4C90E97A1A652A2E58E328990
C76E4E28B15743034CBB79308D7436074580F28CD65D3D718CE59451EE17F8FC39653B189901
773569CA66B7D7450B8D06DE959722198A2B50AA0F0BA5938A826E8DFA88F173EF5BEB7505D3
78FA6D783DC879DFB2EA9C0E174EA21D07C4D7BBA357FD75E1876E3D11678B9C53D36C276715
C380C13A4AB0983587C48DA984F47860245417831DB2F80FE35DCCAB55898096DD0A03EE4378
ADE96457E70BF5A9443F83E01632FDD639AB962B00FE75E7C641596E458F191271A12C8E11E1
618CFEA573ADE97B5B318005E263F11958124FC005C8F6277FF4B5510555437AEAC5B87E8CAB
6F34E7A590ACE1B457EA3096053E5E12F73265F4387FC8531172CD7E3491D8AAB4243B2039FD
A78228FF7F388428DA2A0487A87CE25E6C415D4B433E69E37B3EDF317D7CD58F1B9CDB64DA74
E1860BEEB893FA916B4270963BEE2D635F982766BB52217F25734946A5C9EEBBF97D1726D325
BD427F5899B765CFA186B553A3D1B51F20568E7F0EF264F75BA793CECBA43FDC09F40B850919
97232288F1486ACF5EC076FCC9E203B96714E10D87BC039A14415DBFD7102C5788142D26B785
4F777B3399EED12F20A6F43289DABB8C2778AE9DB4838416213ED419A20CD7777E9AF51268EB
BE11CB03C9FDCFDEFE3DD8EE1E8A044DCC343D38087032BCEFD6E7C3117E0BBA4DE53AF851CA
0206B46D5CA8286B738360F58F09EEEEC2F9378BFB3810F0C20977F4C1E87C4A5C309C72BFD7
E695DD4F88280DD2279DEC328F1CA2D4DC3147EC63E31709864FC0E9D3923A308ED551EFB420
4E175C1D4009F767E050B011E008B6BC9DA47F98F3ECF7B564828670E0B8B244B0FAD3BA7E48
C2343002F05824243C7D36551C2AB0F4D5EFFE98B89FA1B0E3051A789484A03CD9C1D859B346
85806980C474FC28FB16C569E1FD2C0B4B4E6E4E3789D3469225D4CEA3ACC9C9730DB56BA15D
1470E1D1C00FC73096657390F81ACE17A205F86BFDF183A2ED82D15FCC3FDA5E550EF4499619
BF61173AFB97F698A6B0D8E0CE3517A1301DBBB0D4B2CF504342651D897B23C39865142FD4EF
31285FE25A217E66655F47DE7DF2A43BC3D8EA73DA4732FBF9AB3227E7135ED65F1AAB9DF6DF
84A6138FA963810826C920F04B3FB4CDA20C84B5734DDD661783319389A842728B70F94F3182
B5ACCC4955402CE2D267B63F17D31F2D327A0EDBE40F844650BDA0F314A70CDDCAEA9B8813AE
C77988B920DEE2051D7ADA7FFFA3E22CE81A34BC8363CD26E849D1B7E38F19A1EA6E9BBF3391
BAB5B2AABA3B76EFFB965BA9AEC6338996C5315057447B598EA690F4F498AA0051C9DBA13C17
643E0498B0FAF6989902C1567F3D60301456CE29D86A185025D9BD7DEBAD6F27762D8E089291
98F5B5A16AE3BACA3359BEA186EA1564DA576F758BC5B19E6863639184EFD399FE805770F0DC
7B694E91E21D5FAD6D2BA00252C94DE00BAF886FBFD50FDAC5D5AD3A7D872BCF54060E35F0DE
643D27FCF7B377DB563A546448617C89017331AEF621D2118EE0FFA0AA96596FEEA3D08FD9E2
C4ACC78C97231C63D91450E7B5F4836F54B1280AD9DF2CAF300BBCDF6C6D742B96763EC0ED6B
92FE4AC86CEF1D363EBB99D83DE4014DDE8169240F7E612BF7030D3CB845B5BCF348E31740D7
969932A4786BA759BE5624BACB358E16DD5F37CC8F4F698B7204843787C68E4B370190F45F86
4205A966EA82E6AF4E94FF0D5D74994F0C0EC831A49DA5AA9C03F091DBFD2771AB565F3729D9
796C82798B4DB4EFDE0343A7AC5FEC161E94F720A9A45B9558BF291C20C77430E15E0F7AC4CE
F13AE71FE4CE17EEFCA65A076B47A8836A87B82B63E5E901C6AA96E200B0894DF568483D3D18
C1D1713D6E8772F4EB480F1D53D9903ABD7BE69E4CB68D14820981E97D1CB9A6FFE916559D0F
562FB8023D5A8A2567C682C79B50E2D45AC30DD9A06DB0B3D5F570B73E599D4ED88CE8B40ACE
0216157B0D1E7F8DCA816F2CF6A751AA61D8FB3FB3D3706C983A96E1F49E32245480C9149643
378AD671B6F071EDB1B689208E424A3D3DC27B117936FDFE209154408F2A2F5145217A6B51F2
D0F701A918CBDE5C2025EC66258708A32B5B1ECFB9AA7B9F0E4E6C8F82D12B4D6855305F0564
5046EAEB19F34A586749DEF67568B65D5CA63ABC1713312F0073BC62233709076D93483FF276
381367F5815479C99FC42DC29E71BA6C718C81B032FFA4CBE02B62AB60ADADCBAD53857C1210
12812AE32B492ABDEA406E2720BF1DFB11300BB604F0EB98B796F351F8E5F8DC99203E97DF60
52EF6435BC0C4A5D64BC7EF3894E6AAF7AC169B107255E9230AB11F1EF863979DBA5CF23CDE1
9D9D2E31C71814D8AC2C52E9EE2F28649EC566A83E0AA69F837B3CB9A60B75E88F94D17AB48B
D18FF221A07A42AD8F1570721D5B4DF95E103D1559CA57015EECFA45574252DD1B6FD6BA3CA4
BE0CD66B225B9E21BF951E6C930A6D8546E89E3B586C64458D93EE058AB034B47A2331CA2634
F5E76CCD2DCF6FA03BE411F360AD5B32CE2C70AEF6121E71E36287E49C94C36EB989F22BFDBF
1A6C0F9548FD3D43D2DA96B5A63D96B1F47E966794F248A90A75A433141D4063AA6A5C6C31F5
DAED142FE6790D59CDBB2A96A40F8DE769B50B8C24783CC872EF2D25579852564EF01DC46471
B7D1C9C337606D253C2366E1CC6F40D24900BA9A4883CA16BC6FEF6C9595BE3B644682C46B77
5066BD9D0D83ED7094B47A0E0F373150714B01B8687F3EA1EDAE559C045C461865F4FC9B91A2
0C80F6B7D915187748169CD14F97E606BDA20ACA6697B886B5D41AD89E243D9958529BB6499F
08097A0F33F68D62233A488ED98E3DD665478FD2944E2AA96A1DDFE6EB82BDCE16733D13335E
9D3780F6AB38778744664A1690D7E1A7681AE3E9C17CF10282806A942F656BF3665968B97F4E
0EA511A856C31856BBF80E501E34133C099F2D1B7F5A905DDE99B6C42B07FAC37D4BB1306845
8A7E75719B13AE392E49ED85EEE1CCD069E304F08E8DBB0583F2DE2043BBA9FA8A554A019301
B940BE40BBF57AE7D41620853C171F126EC88DE9AB94FE8BEB9BFF7E846F007B7077456C182D
376340EA99AEE271669ECA77F3441B3ADA0DEEC4701C948D596FEF836B0323921AA1E6D62698
D07A9A82BE2AA6D7C298811C99920584ADB8BB02B2E6A18886594FBEA7909559DA4F5A82B6AC
36F2610A7D9FDBA9D8FCBB4A0BBE288C82505B0E931EC463B2C2058DC56C2C23D25FBB0078C5
7E991CCD19917828F19BB18F0A94C5BE07E241C7167E5F982C9F5929B68E32EE748DA544FC54
5E3CCC85A937D5C7A716A8C455168BCB11237C65F99CEC5DE15224A9B18D8476DE7787125A60
AE3D43E04691EAE16F743A4F9017E747F37A15E9429C3047D3179C8C9C22E1B3F312F2A3C9E3
DD774380CC8D736714A35572D7D5D7B596EA30426E475F5624B8B164F3E006CEA3A9D7E2E838
FFC93863435C95187E4AFC0B20D8FA8A6B8ADE3F00AD6B51CBD28F5CAF043787ED6E277A34A9
D733CEB8A7BB3A9AA83B274E93FB94FCE07B4430C4EC2641E63E01BD6D28875EE6C1D1F312CD
8929C44CC5D6610E81766143D9B521971118D4AAFF99DE5E8D0B593767BFB635CC3666522CDF
94F7C3405CB5D1395205A3744EDEFC81BB309757C5D0F9FF8D55CDA155BADBEE2F50CD2955E6
2DB0B60C47045BEB9D7CA5DEA8B849AD6B2B75594CBE7B0C1C0F1C5474CBEDE8BC9383827C6D
F7FA12A16294DFC87C06DE28767888D21E85F8F4F149176DAA0E0175BBA5297E94CF9ACD0A75
583792155E3D5525075D2302F438A725BC31C226CA1D18FB222E30759E4477428EBB02B72AFE
BB72686AA496BDDBA889667B7943F3E67EE1941F8E884E245249E212D235CB7CB80BBBB410AD
86C79BD9D959767D75052314082A93AA4878F72B2D492E6FE382C902AF1A86C63CA4EF38B2B6
E3388B9E3A002528486CA8F8D33BE8BECB8A259B4253F199AD19E703EFF16EC695B49DB776CD
ADC9CF3D3C1ADD2F42AD6D1DAD8B21B67D2FBB35B93CCCE96E96CE3D277B86CB996570E03D5C
88335B53709B655E6A94C07CE0A42E46448BA71F4FC26198E61C79BE75EDB4D8B396CCE0932C
B5325A8FDEA587F0D3CEC1523C4BC1EC7F449DE4E80D063A4A4DC5028CA6D11849D17B88D400
003644F795348009131FD88C8F1B6404B0F157BD7A38BE605BC9187DCBE2E2566B14A1E6B412
BFC3575554FE79A4D964F858267D589E045C0B44D194D208B611755268B75FCF76C9018D2811
281D84676BDD52512491BE789E052F1788E21308D91C4FA6729A9589E5099C818F23436F6A5B
7EF2A227BD48E8EB989A3D160592DE794AA7B4DDE82D1FFFB7B54A2DFE662FD75A9928C1AF34
29EFBAB25557DE5C2D8D172656F0011A25BB7473E1EC56A3E5A329699CC5B1174A187CDCF971
38C0418256D4A5F3D524F2E8E798F7959DA26B5759266AC85425B0DD0D120CE221E6146DA249
ADA68BD409EAF66B2E0E2126741BCF23B17EE76BE42A3A98258568EDBD8071037E1441E4C6FF
499F9D122ED505D205D14E4FB96F0F6919F778E70D65CE53689F9703C522CE33D2EAC0D0C6DA
A87BC96332946FA280CA70EDC593E681A9832D3FFB049F1723D03270FBA0CE8D26ABCC4F0952
98ABE8E584B5C2398D8D40FF035AB309DD09997041C612FD3E919DFF89D942711EAD46AD88B9
F8F5A7DFA0A5649E5538551BDB66246A74D83A93C223DC9F2C8210D18764A09E12F44C8E00D4
2FB0EACFD71BCD347FFE5F8BBDF0866913C843CD7250830D9B939D629B85F41317A0CC64F8F9
326DD88F7B5F1B85F36664EA9A93D94DA23F5AA633F03F8B126B0BBC54BDAFFEF696F87CC146
3118C6E8EC6119C84507AABF53DFB2962445C0C070C4004BB29788CB7E80402B4F129CD169C8
A86E2930DC219040750C89C9A98309BD2E0D75C9308B44CEEFB308652EF74A1ABEC02AFFD219
F4770F90049F29C8860238C89942657BA4344CC9BBA7DC5322897DBB8ED401142136A1277E25
96B53F9CD171BD41E8F9F95DE0AF97D7DF8CF246072DDF8F79B0D34CFE637ECC6B9DFA669D29
7395EE6935AA830184F0959147C07FCC7C54EB74DB0D65AFACE372714933968D3915AE3FEE79
CCF2CEB66BBA763769075C04E9EA8B7766EC65F80C12DE1081236BFBA1F9734C08FE0B84D978
F3D54D4DCE242FA65B243B42B9A937EDB7F36F1EF973B1A230DCBA8D2B914CAD3E08CA56A769
7C046E5B35BDDEF0D200200811A8E90BAE2F87FAE2B106BDEB0B6453B0451736A16F2A4A4034
876428DB735341ED59852D69E92C1B1FD07091EA476E88A666F0BB4FA270B9C05ACDF31DD38D
0EFBA1808C8B8BEA0FCBE0FBF6B2208BE201FF12753CCE6F34B74255DC2AA1DF0366B71211D2
9DE0262DF6A2B916FD8306C87636A00DA34B3D0272F37D38BAEC2A14F33D6689542A553E4225
59C1581FD73B8D63CF8FDBED4B3CCF9C39AE83C0DD287D5D239F443DADD96092A4B4A723C341
BF97FEA378FE624B1AED5AA20101C384C550CB73393E0945449A53EDA528A465CF4FAA3B020A
0E3505FF154995206C0D0E26B29AED1243932D0AF02473667ED86B56875E818A8CDFE7678465
BCCFEE7818625C7AF987BD430EDAC3F34B78D7BECEDAF0BE4BA4A0412D19585025CBCA4F9583
65CD8DE8DBB00893E287D1B10DA47BB7CD8E78ECF36940C865099B3D34C8E063D09D22DE91D6
9D25F0BA34EA859B31B750AEFAF19D26953D100951D0591341E48BEB10BA8D11C44DB5D1EAC8
BE176BBC0B878B7F945E69CBA526B7E06E64F9330A9F6CB8C49E09E2A26A4A2CF6A0AE69A348
6245CCFF8AA3F5C72E7111037D3C861116913DE6CCF8C5BB54BFC2243FC85367496BC7457C85
E81CD556A6E28002805EE1FF1CBA1EA83500CFF41A537A115A57D079FA28FB845E4ACF04A710
B3A1358C00354BC0AE4911D4940C5D76104BBFC0D68007B4E1E7CE32B2839750F7A5F3B6FE34
8FBFF32330B3005D165B1359061FD7D6C5BC06F1F77A739E7A4B91A4C66E1E864999292FB070
BC941A8B28BA052D5A49E492EF4D8B5A61CE23BBB974B183ED33E1C08BE46D0EBD041B955FDE
3B1EF9040FEC841C8ACC4BE3DB3FF3ACED3874214E60E2C3BAC462C080D6DD88CABF15FFECB7
F73B719C4A7FB00538791B6396FFCEB6D5B67DC19505C5435B37209F5715033B7A75CCA4D38B
8E0B10362025D9E11BDC8311820EBA7280FADBBD5E89AC6F2D1F828EA79F806DC858CA42EB35
E59DD17697BA463273C6A0B5295D7C58AB9D2A59B770BC6A6DD4D823FD4825B63107C2B0D6CF
0790752541CF2E10FAAC32CCB0F8FE0BBB3027FEAB8B06651526069B04EC3BFD54563BA8F326
1FE7962FA34A39C845C62E99D60EF0FD729C7948F7306219B339B58EC0D0FF2C9C8872C183BD
1C3E572DE453B2D807271D10715B17BD9E2FC7583F83E03C74A64DF2BE321AE42EE945BF7E74
B9162F918A8F11D3D923A4CAD3A98BF53A175C3E26086D2499AC567B0B947F7477E7F2243D47
C889EEA390B3DC7BBCFDED34946FBFC4D184CB34B9332B06953F9DDADD9174592F6BACC37EF4
7E31ADCC329DAD3055374ED404C4D812D3DEEFAAE96226804980AC01E0870C992608421D995D
C954BE4C58AADF0A60AADC8A27A55E0587B45B4CC45CDEBCF6446F462A14E145AB724C4E5C68
EF5A86C54F145E43ABCB45FDCC540B718AEC2C33720546ED2A2D08961F01562D05E014652D55
C9FA7BB7D34A1FECAA7A2C6FFAD2633178F6B2C41E4A01E4A10B7B9895F7C069062D762B1E01
49E1001DECF0ACFF4D9662BC3C1F2AE1B1B860A84CAD344045D4BA7DE000DE22B035825F66A3
1AAAAFCAE6A0F981DC393F56EE1D2BCC60DC4FF28F44DCFAB6C95D5AFD4071BF5BF19EFC8A6D
35338F34433DA402F84719F300CF731C4B55DBE7F7354E002D85DCD912D4AABA2B02F6D8083C
B2C8F92C2B92111156713D579E796C41C508536345ABAA5EFCA39D664E1434BB6D0D0CE6A584
E0316880E16E6C615246103CD1DCAE897A8396FB6C0CBD235613E00BB8CD2B2F9E993B1A01AC
819B9C6F679A28D4338458E21BF10C7C4136E28D2B060F694B9B03C83675A4A616EC53790152
081A7B4B1750941CB1117BD569A532ED1C49DC49FA3DA0D6BA30E93CB4A71A14B21713DAF82F
D93C9AE4D53A2FE61EA62BC37D38C2500EB7B5A2E4B448992F428D75928AF8ECDA6C9A376B77
17C1997B35C3D9971D1D49BE9B8E4626E3953751F0C6D784B406153488053EDAB38B3675CE8B
05C030331C974164088629E2A9B878063684853A37F20BFFA7D8310769A43774B51DF1BDFF39
A620C578D179D3128140453A0BE7AA76F71D106C6A58642F1A6EFD03E5EB12B74E184F1C0FCE
134A886C645E5762BB77C4A03BF0AA7B93E8766611974162F3AB8F9137E7E8A17E6EA75C75D2
E6FB802DF69EEC93C5E658FFEA205DFAFE8825DB796D4E8E232E00122D57A709A5E0543D01EC
1E2522ED30EF484333C222959B8B98710F958E9C2A57B44237427410329C1A5EFFD3E1E1C125
3C3A25387B5C165272038F19653F32886488F16AC31F7E576327E606CDF3172614561291E7BA
414FBD1A7558084D9CD408EFB7FF5CC53867B3FC96E6AA9419FE4DD98A9A064CC679D42829C5
9C96092F13F77D9EA63249762270017E4E31E1DDE29F57ADF2EDAA9106CC1492A8171717AE0E
42A9116C91CAB94B34C904A2811890DF7B52BE40C01846D131C8DFCCFBDF34EC9DCD5F4EE582
E858F357C3853A48890988859B202CC2A8CF675BF8B3C0434698A4A34D8DB358E42A38220874
F88022DEC2AFB967CF470CE40919E9F0A17E901806D53760FA81983D4E68471440BF8D1BF07F
CE3AB280E3FCA5AB0DFD9BBB74F39752939B75D62C43A6819A40464189F2A49F12B3D25269B8
CD1FFDF68C76AC81821CFAA668F2E2C2D5730C0F201DD7102EF066EEF420355806B127CD6B05
B0C5644072CDF444422DAB1C82D5F1B5C116C758717DD38C1919B099C4DC3E5DE9B6431BFA94
9FD09B01B723DCEB135960F8138D20C331C41B9BE376DA25F760F46072C799F7148C5C25445C
68F9A531F07CEAA52365A8291001D8B239B96CD6510F71C2F2EFD6DE3A2FD816392BE13F3901
CF9DD30CE20351FB9C40492B4449C51768A0C34CBDAB175FD07BAABB0B49C935BE2BCE6527AC
AEB677DFD53EFE53C057DD8F4F6235D93DDAD1BBE54D5E7832069D2E9FCFE8AB5C5112F56466
08168332F691AB0534407FB3A3D36D3C193E2761FD034C689BD35CC7335AD8600E7956003F56
EDF6EFFAB63291C1796A1A8829D62C16DF8344BAA8605A538C320F8BD41E35480DC6EAD20986
D1E671D5682C1D77D7C81B2E983B5D2955767A5940EE1FA51159FB5176091BFF203057D993F1
19C87D5669EC4AA1ED1B1048E0D34A439A10A03E64E6CB5305003832257C5CCC8D53196D0B57
AC82A5DF7AC9F2FD1528FBA6AC34DE1156D9E0CAD7D3B1E1945A3BC75FD91E0F76085E05B096
E139136ADF04CAB6F026C46E31C544E28B7D89A3AAE524188657E7F40EF34EF42B7B636A4501
0E9DA1D4A14B9F673ED233A46A8BBBC9522E5D1514848D51664B78A607390BA9D4354464F3A7
A91A876C1D893092105557CA13E2A460620B8ED0378C9FA6272196E5F7A2D63AD9732C57D478
549812AB1EAA2E735FBFE0B200D67F57161517B0B52C10EE134C0696DCD8FA8EE004B3078241
88469842E260D74758814816410E2BDF23B7E2075FF18723593536C293574E1FAEECCB985B02
E3FD624FFE0380E631C362985DE944030F9F13427AD35E7B87705EE761BD396B92A5DCC06D56
262D495994890218F117C3024A813C943A0608EC03CAE0D496B557F748C14696CE391A140DD5
E5248A1BE58A1764076ED3A5361A2563BB123C4831DFA952D6D8872A0E3C07142BC794682A94
A66E70430643C4096C71F6A634E2BAB8AEED329AC08110B690CED40CB37230AE9012BE2CB6A6
EDA2E2022A7CA16771A5BD2B6FA659BB47CC2C427E4C209D01815F0A907B096085B54752383D
C6FB049A147E6DC9D82DBB89C34EB50108D4FECA7DC223792292E64801443F7AED22E123077A
A52FAE9AD49AFD8A3F330CA78AE6B088BB8681790A357B46E786602BBE3A84B0781433C9BD1A
A098943D50743BE32FBCC9A35FE81AB29525983D6C93AD2EB0C66A0D75EF0F85F8A97CA5E54F
A5EFD9E23870C17DC543E87AEAB16A677B846E1F5954924C60650F03410B4C7EE099415B6021
E5C8F33E81FAEA57B6DD3ABB45BE7DBCF2D23CEB44965C34E40EB67EA8C504BE900FDED57E44
9A6BBA2C55821FB261537036030831D23EAFE00B3113AB3EC777DFCC357BAAFFFD655461888A
A8144629E39F83E169384685C1691927FF889A67B43B7F84689138CEB06C6AEF4402B5693BE0
466994665CECF34F5AD656CA098B215754794A6E567CB590C2F01795B2931BAB6F73C777BCBE
505D1CCE87026CE3DE41152FBCC4E1470F7361FE50843D0FDB2E7209B2CCDFC5C7D910BF3276
AD395F46DA6E532343104C4BFFEC3B627F89BBA72BCF7088A0AD564C05261670DFE2B1E28E8C
61519CFBF5937AD54B37A7B13B7770C93097364F5F8596BA3BF5E047170CF9F686D18ABFB7C2
4B0B22750D6AB28A1F47EFB0E06BAED2948EAEC810E2D11CFA7451BB33A2FA90FAEE1954081C
CA93A3E18749CFA50A2F7553AA63000A2A19FE92AD0C0D4974FF743D3341185F8916C783A466
C270C689389C9767289B1A00D11226AB3E1E90E9097588E0C14ED8EDBBF717202E5C5DAE9931
2B1E384878E4B6991D10DCE9252A8B8F0B2F2DDEAEF92A87299B2BD39FD1488A57CDC77FE147
0395DA0D4D7DE8E29A10D7A07849C78F003A3F2989D1EDFA7CA70B0F89D904A5DCCDBC292BE1
A0E5A35C2F6F5BDAA9EFA07D38E68959DE0A5C01FE0E5FF7BDFA46B4D15F050ECE607563BE52
B3104DAB7805B4F27231CFC0A7396605CC2A6D439C360903086CD1112E671F74E4E7FD80200C
A5CBC9EC087FC2C95FA7529713E43235767E29035D0BDAE76C4D4BC0AD18EBE12ADC7990666D
08EAF98545737FBE26F11EE1B42A52B170F37B21896E33209A9BA4A03285A55C6F98FA3B9649
28F83D7830A938FEC7B60F454BB143507407D3B12B6CD2094DD9AA7397810EB21CA7E47CC304
55314428F5EB009C9156A296A12796AEC951B5B6A8E2A188D3F3C5C03EE1146A1F94DF8E661F
8524B619433DE3AC98B13DBE39135BBA43C0832944FBDB106D0696CF114DFAD04E5DD7B6A7C5
2D9184144977194BD24CF2788A56EBF5F3C992C60B2F4A7B8A697FABAC56C4384434F10C980F
1DDB5B79DED34985E2D6344A1BC036CD50DBBDB8BB002F96A887036B8BA9E81893DBA05AFD50
C3006ABD5A74826AC085C6F85168E098CCC5F17F36381746FC37C6352FDE3D8A503014602EE2
78DAC70A16ED96CDE5BBACBA2A97232F71400B8B4CFD4C44183345F3165C4D8470AF9709806C
87AC87CFCF6BB1CE6366F63E0C646161E5EFE934CC215DE13B2E9A93802FC3C1AAABD6582A0C
B2FBA304FB5E50514B8D2FE55BE1545D034F207A96DF61AE7EAB1C06D26AF493E51B479B3BA7
8E16C7FED79A9EC38E1C4988BDA8A37692F39E6B944EE7AFD329F827AE8E58D7D6452811A0AC
50F3ED5F6DC055C7CA7D52FE746F23EA6BF02DB28342E173BBEC647E38EFDCE4458295F5509C
BA247A76EA82685EABE8846E7B07ABAD72305F06A987178098D19A37AAAB4D53988C69FD7513
014E2DCD9A36C102A7F49A22561A32F94D7790A7D463D6649A7F0D395627CB2AD50445A602D0
F6C2E1BB13ECF338A50385A0454EAD42B3441CDB836B6CEF0817D7FE9438187045BACD849EF3
348EA859E77C0DE75175E1DE97F2766C2D25F4CA2B2F441E9FE8F8AE95F9D8CA736AA5AD7A8A
8D4CB90371268FE41A623BFEDAB04FEBAFFBF6FA61DD1A3EC255774CD58C927AC41F24769F20
D43D0CE013D51A7434981177121A77547C298ABCFBF0AE83864E0A5F052CEC01B7D39919FFFB
3DC81930B423003348BA7143FF58F6908803695D70A122081A77BA8F797CC85E39D8ABF419AF
8732472EF2972137AE3206787149550BFCE8393B261B2AAF73417473B467464FCC848329BC3E
A5CAFF477862FC35D35BEFE5850153733D88BBA52DD1EED6DAE87A1EC09877415776657443DD
2C454B3D8ABB71762F0D636963A855BE25CB52D6B621C09E21A47D0DED25E92F52370DEA91CC
4E3F118C082DEE635443582C57D7151B934AB5975C9D8691D0FE281AEED8C196B06F787DD75C
F6A04BF63A3C9B88A36103B18CCDDCBCB213F270E4282C3B40E7B91AA535B6C58B239CD7DE24
F832026ACF4D87EDC83AAB433D03AA633B094AB62F2BA8C0265B9E39D1072282C0242B570661
4C34C2F2DD37287C73515BCD77BB2A4A428839F7683C4D8C83324A8157D56B82FF518FC3D903
F85DB1676EB71352E46F1B40651CCCF53F7D92200778A2F3B8414AF97779BA01E1DDE594A9C5
E45A1A3B5BE613790E9126723B95E3EA265E6A6956904DB6610F997C77E02F719EED9BC40AE7
66C37DFDC2581A1D6C625DFE94146E39DC435983D415EEEE370D951F660A0C8A34AD303DA80E
D66258D4466A647935580E86D723D923CD3BBE150B558AA4930CB9EEB4A4D2A57B4F087473A2
9BB3760B23AE615B10B58412CE6BA4632B91B6D775C06679AE08382F0934BB6B0D4CEE4F5B98
ACC6D7D5461C6A9E827A11603DA185E451C905843733031422218539B01CE7807986B866F659
761DB98CB8942BA1959AB973380394F70392ADB687FE92886D628B5873055CFF4F1052DCA10A
B657A147188F1E42B180685B723331D8CC35273E114F324D53C9DEE784F46026DA726BD29388
3D6BDB60D4A2198E89C21816E3E711D4FDD2C1A9D675A71BC6095F529F8625E815F82ECFC865
29A5AF692E8ABC76B940D19D24D6B96500E36FC662D5937F64C1711C1D265A2C90DD56ACF6D7
CC33C7633DB37BFD437F5C3D78973E61A257C379FA1095807579EE2514AE15AF5B341B43882F
3FE19236A59E92651EC64961E62E4FFB7A8F800B8B3C525E718C7E7ED92EA07C04FFE9FE5CA0
59D2FB05B95800EFC84C3A7C6B816D821225FBA9D3E39AC8052D9F37828218A221A031DDABEC
62BF03601183E68C83E8BE713A2C59E9306E8F42180ABFA2EF83BF2DE707FC35B46FB6A6ED72
8B569CC07BD680CA25661E2F9FD89428BDCE458E96578F725D210B60AF26DDAAFB382BC8E311
69D5BC5BFE7D48E92958EEA2823E3DA5E3EEE7A6AD644F003915B922465FDF858389AE6A88CF
7924DCBB96EFD85F12478B4C3D330BC6C5FC412091F3C54C9F1A6BE17973C025F48342D566C9
6220E66D95CB04477C054759A3C6DEB3FAB5B3F650ACC6DC1A57ED0B9859C9256C6BF4901C68
382FDB25AACD47DE9DF59366236C3C4BBE5D50465DBAF139F4F49E2D6E5CBA9F47D558BAC06D
FB98131BBFE8FEE681D5E4A737021E4B175B1CB96ED0B5B011BCD639C9756F8C30AFADBA5162
A48D8F5090C469A8E1EFF83E5613497C8DD7BD7B593CE3440C46027F0561B187F75F9C3B0C82
9923310354E5A903FA9846C199A405960AC0731188C863B460B51FBC12B407F50D4026AAEBC1
D21474A0915AB42B368AF2BAF658902D3B28E143C6B2B1E1B414BB399EF6A39B5ACB2EAF438C
C0B38FB44F1CA9B4174926B585BF5E287F8B42758ABE9476A9E4D8B9B9D3418014B2D1A2850C
62D4732D2024D4262FCC42EAAADA3B90CA39E03674AC19443C5B5C496C4A83324F822692B823
BE229F901AB0CC2AF98C43B0E13179D6931F1AA28D8DC2B1CF6C4A0959602A84E5AB1D0575DF
DF70E347A9A6389EA7736D353D0E5259A7686B50887883B3C9AC232B0DBA3DEA5C6B59D5307B
205F1A7D5ED917CFB3A2E9E66080BFE5B36BA012D05C73F6864C1E59D05CA076147DADF784EF
F55390B412F4BA448F93520F2D41BBC3CD52514D8C12BDCC69D4C5015B3462B2330046828399
029F6279A8109034B2D8A5AFCCF1B0CF20378A411863148DFE9DF7B5BA6219FEA021D9AC10B2
42FC55A829B050EE40C7C8213C175F882CF68F8EDFA80CB1A6BE053B339A70B1CC92191D15C2
D3E16ECD5F145AEAFDB83CCE8849508A70C3FDA228949070E9103A881697FCCF2AAF69A213B6
808F27694433ABCCAF502A8B0B6F075F7459DEECABFB827F760C8240D88EF529F4284B4CBAB9
4E8651BD94516005F72268C13B962867EF8B7939E1B077243478F83951F995B8C697508E9734
7E5EC96FFD7459C17C9C7C5FBE3BA5CF15EC0DD2872A60C31736F9C3948371B10A903DF62A9F
C360933746F20809C2C0917302FE0A397F6682F51CEEB509F4A070546C7422DF6F421B801D06
B3CB6F7D08DEE3E53A21DA5B416678170769ED91E27C34410BCEBE8FFFD94B2D6B22E88FD377
DC10BA223C7F305C6D7CDBCDA24CA5B2D8A0B83D6399ECEE47BE4421A95E6BAFEB7E539DA63D
CF328E55F4239EDAFE7FE722BC6B2B2C4FD89623023C8EE3AD682DB456968332CFE7145C7392
F609B0E6B5DB4F3E5692F3B80E0705CC5E712507D6B85E3372A54911336ADC17B2835EB4E470
7AB102FC2B765A2EF0E0EAF396B27C04DC6141E769475009F5784AF8498DFC70E93F5FE96EA4
364B3585DF27FE165C25689C8CF8D8ACF3BB4705B462BEFF2559A4E43B7A1118E611CC64BBA0
4F2AC87903880F8FE94B2AD27C1DB989E9F369DA73BFDA3A2BD6E6BA5ED03C132505E22B7DEC
FA770050D6A29C09E32A3F610B71E5C66A96414FE18030F79C652D565184723771C3F7E67560
27C68BB8F0362023C22B90B1A6B742D3D65297885AE7226F7AAA60309FA0E089F30731E30F4C
3675D4A2C9AA15CC3F8F54AFC4EFC6BDAB1CFDD3FA6C62C58E1D46F0F8495178A7265AB6B96E
E7EF51CFF1A24EC5223166239F892BEB7B2E5848B5D074BE03EC888937AC362D9E0EBC51B9D6
9C33C1BC3CBB2ED97CEFFB0BB6CA48B78611F8077532370F71A783E414ADE9C2A8E2120BD984
9F52872C65A4EBFF544E2DA3F27477A13457495F422DCABD8C42B84E3E2D28CE9B8ACE50456C
0D67D7BB4702A51D123A9290D7531611EDD7D022F6903D6B3F9574C3536C6BAFB54B00702F9D
C1EBD4BE5C2E8B113F92081C3A7F2EF92E04F0A53E67C1A0DF27DD65BD8C80F200260AAA9D67
A78A646F069850C56DE92BE2FC4FFCE96F0A4192E7E8BFF17413F1E0C01FB92EF970477B44F0
13B3C0ADDD856EF6E7D9DDFB2A88692760DE7CE43BA60528EE4CE3E656839F74812BD758F890
1F3E0E26782815F286F01E88ECB90D2B95B5A1183836D6A998B2EF57E9986185A91C33A0A35C
AE7D925B8DA8917535F1B602CF8A5D6B18825021B240BA96623696A8F6E668C5D233D537591F
5877AB2CCB7E954C057010706EE26901D64B2FBA1DAD9CF2A0E7AC704A96A3C4F5D6CB95F78D
A11ED9F98D36BE48693EAE30CD1BFE3CDFC47FB46ABAE7D67267DDDF0A319EF85C918FCAF6E6
574B5621218D04FE1864F754E22DAE2000EE135B975E3630064078A7DFE087EC81B86357008F
097310D45F7C10A253A90D713A790F6B0B3DD6FACFA99AA1513ABFCFB01FD363F18142750A33
FF283543377E73D1C006D8BEAFEF1BEA4EC8C56B46EB5FD06B85EA234EE5CB844765C229F084
DF8D3BCA608C34742BC6A8362F5A7994AB11D85600C5BAB2729B89DFE0E3B47ABF8D02367B53
9C27FC772838D806C991C6B03B9C6AF106771F6F7458F6AFA4A3DBCABD7F9E45FEC22A681F3E
039A4713CA7D9BA1E091CF7244F0DA2E53EA1323E03050E61C72DDF8C651F4C340B35FA341B8
8276A741900C9DFCC0F7FF866CFB348FABBEBCAB187B3F8AAE2022574F287324CF915AB8B230
1848989E807567C6BEA29D6ACB9CD80D6B54928F8CA4303C6B519D7E3E97EE92EC9FFC4AFFE4
D842C979DC923479B21136AD12D8DA127CFB12053E0B293A35D0152D0721EA96D7872BA4CE44
7978BE1CDCB2FDAC0D12FF26396AE0266D47C2170A444580EFBF5791E1490A978A15141526FB
1C76272DE761167C467178F10BD9B949A4452AD1BE2E79A2290C356ACCBD0556A3E68A88EAAC
42F166C263F37A2749827B09F77C5BDBB813C7EE62F625B68BFBF3F265B1D11D7E19CA1E1D31
BD6CE1CB12371C2C60F2F8D56D0C122034C2E28995FD0CB0473FCD2893892219BCC799A233DE
1809EEC627FDE75A66C7475BC5780D7F3B1330E496075913B369CA8C50918736BC3119228D93
E2C2316AC4418AD32B741665F81FE667D1697D8F59594882424F012228DB557D6FDBC99798BD
81C40D89C583BA80DE51DE3A458D350BFFBE35472B1571F78D590216C812EECA285C6AB4059A
3636B823D0F0BC2D931E7E90E2B620374099A43B8C93DCD6AC9EC986E84A2F6923C49C92E016
F58C540F1AD4B2AF8D878D5921C725FDA3485C058D9FA1CA672411EFF31EDE22BAF340B62D5A
6941B848EA9F56C651DC64D5193631E88C6A70BB78606A9B7EC9CE354EB410A5861206179B65
3211263CB49D512B20EF237BCDE0BB8F89A2013D08AD7F74EB690986E6097062902B4C523B34
E798A7029289C6C43DE12718C6E8ED13A4B987C44A1FB25B69E121BB352BD938695E64981DCD
DBB99DE0A98D21385A29792D9792949B385CC952F2E7C874A75D43D331091B4894C176A42EB0
A8F3D2C56AA95D4FD8813BD56F0F41BA0C769516BCCB1FA3284A9E973C5414300596927D6850
9592E224172ECDF8E90D9962BC4227356932574D951F6A0EEEFAEFAF771A5BC8A07480C424A5
5BC53CFFBB6E4EDE0F6F8FB506B5824086D8CBD0C3A1C20D067A111DEE113523BB7C690D3DC9
1F230DF7073250C779D6D3B1EAC04469D32C787E9425C27D9CED3F514C5962854D8BE3BD9B08
99685D1648E46A1484A7D6B820CF8382034E05EE3BE3E5C41220B68C7F0D7DE690B1A7F2A047
2D11C34CFF62F3D355FB2E237738773DC16420876A539E9A04CF5CB2389DCFD604F258317573
E5F46265BB4D9096639345B76EBCD2E0290721342ADF75FF56FFC00D302DCD7576CF0112C9F0
E30E4943C811081D1B54853777B7BA249E7084F6C5D7CF3C6146F4A3F88364DAA093FA30D248
133DC41005E66C1B56C191E6858ECDA5D3D8663635D796AD9D3548087D8753BCABE34D2CCB70
66CF23EFE18967509D4F3F6DC3318F7827C01AD194F25B20DC2A9D08E4878DC6C4A42902CE15
D2DF0E91D477DCBB5BA0D22EDB471F077E1B8A04F4111EEA04E1B29203839C19610C14B2FEDC
C1D6DAB356BE0FE566CBE184082F89E7C2C70EAF2A5123064A8118919A4655C4E6BC7E5353AA
FB4397FE2980588A678A2B7545D1CD3EF800A64512A1DF23A23249344278150A02804E54670B
FB4402A5FD402415598E1470196FC70F90D43DFB83F9844A2B91D914BFEE9164BDCF1F88117F
1337CE78CFA07C5D37F5F4CDD35CE6C8653CF2073699FC5CF848978E173C27B545ED35DE88D3
BD45F85782E5E51A9C2213C2DB65ACDB8E74274F7BA880A1DA7205FAB07E86A650499B8B2595
9C1DF4443A003F2616A68266C7BA1636767FDDBF3F50D432628E5219BDE4658DDAC984EADB62
F9DB863571E4DA74D24024C2491725427509469F5325E424B48993707071EC3C45006F1986E8
79D359606027510D5383E2178D016B402A18B914247E0095F9B7F905ED97386780B1120D3909
93ABAB3D18A36A2EB9BB8BAC2F084602F8BAD9CB754FEC8F3F4A263F48263C270EC619E73C0D
1E9178CFF739670A55CE6B1FC8EC2DB82795AFEB2135444801378862BB1FE4188C1C027840EB
A39E431A4D33F1DB6657F1DA89D2CF31C9BFC649A36C1DA8B28E993B4EA3B00742522FAFE528
9F1C736D6BA6DC95EBCA8DD45AE1FA4053411CE9AC5F768E3F20E2E0B799173B5D0B1FC393EA
7C86D8D75B511BA49B22ABCCFC43D9EB05B92B773728F9D2C14F0ACF1BE7C551FC2B8AD0258A
B348D9972B1939F9907B6135BE10B0D5FBFAF7BF857711DD5874C904544E12D6598A30E426D4
BD5ADA82F18AA5A78E5AF27E29C2B084A59DD2FD8DFC883B28296FEE1E9C143723667CAA3469
730DE83F2766A0B7F67025E941E600A3CF54BBD06D7AEBD95B80A6F05BC1D4FFE50E7FED9351
FA364B282B4A7D252F17C2C6FD50BE1A7DE88EC69E9436F8BB2BEEB6070668CE0A55AF51AF2E
9AB88DC3809EFD3BCBFA40778054EDCE6EE4D5E890187C340D22A7BDAA66B7D1FBA0C82F1B31
596699294BA2DFB4CA8DD08BB5B1DAFD4CB81049C186A7E91CA85BF3CD725084CABE2AD14BDA
65B947C107F93D8FBBC10A0243F9CA18B9868D6BB70963922B30D619BAFE6F632023C56281AF
A39376F838EE378AD1C6D7296DF4AE79E0D932B0DC027164EF2AA38CD543FB81DA48D884F056
3F53A28B59A2A9A0546805F55A60B2DAAE5CA90988508F9C8E5109FE3F6C8BF8B72A5E8D9286
E673216696D80FBDE4CD2AFF31A575DD7BD6FC45556E300127317DD0DF074B25594EE07DDBF4
31F5E3D2468F761DB02A85ECED800FACEA52139A1740D8891405121316E4D300D5F5B683811A
978EEF289D0F78D1CC00C25C539D2E828095A5C55F010771F694EAAF8E5C895204ACB45C902F
047DA19D518978528C07387828A977A9A845A06A2EE18C1EACE655C3E6F730AABC43E04C939F
73EEBBFF7B1BAB91912D3DA93E464AABFDA0335DC7037015AC17215D7D0A02AA486C3C7BEA98
16C11F027B577341BCFA10063C7AB567122B837AD85C5F47631FD54D82313CC04E1B2233F92E
E844A6DC0197E797A936CDD10C58BB35C138C7C5F84181A9EF67246E815D4B355877564A07F7
4E8C240EFFD757DE474BEFD4C66A3D50CBA5B7DB5F78EDF2A17766B38F5D8AB4B90DA090F75F
AC311E44A27AC3A5466BC6BE3AFA08B8B2EB31D998A45108A77B7ADE2E95835103DED4FC26DC
3CA70F5A29D76292475876563C5E5B7E12B2DBAD372FAD8EC7E6BCEF4FCC7E01469E39AB46C5
B3CFCDFA60DD550776B9748AA5581957F2D884063FE1920790EADCA2BF8387FC9232766D8FE7
2BBA9B326445813052B28D1B974F6221346D1B60C35678A23B9CEF0B87522233FE575C1C49F5
F0606D764B02B5EA88BBC38EF7B7D96B41EBE26DE64B5DBB69ADF3BC2CB73A046B20C3A2CA1F
7500D1F82362AAE79EF98A1AE987976CFADF7B041F82FB582B5FC6BFCD69187B839CB2BC18FC
AC9881DB194A8282BF236A8A1A1FE37C4C5C96505705B2D29BB01B70313C82C49D5162011DBA
746019D131ED8B94E200E1EB2A72E59A57C7D9584B46991514F2FBAD9045BBBFF0756B638177
676AB0A4A717CA9CCB454D2E157D90A15688AA1D4B3FE43CD6F25034BEE45158EC8EC94D8363
027E0D4E18D13C6A77D9D97B0E55AD6B2DCC0E7B77D6A942F7BFB3F26328ACDAE1D4DEDE1C6E
8310540CA38E0D4A9BD2C9DB61DA674716F3BCAFC3A43BF5E63B4E723CF453241009E1E8853D
F56FB8B61E969461A479F4EB860AA7B3DCA2276623A688177C0E3F4D35E6BA3802973CD5C15A
F7BB6FD30A4F630D30D6D9F976291DBBA055A7E2A665434921AC00F211147BA146D78CC9E00D
2E1956C15A95AA4DCAA66DC6A73ACADF828385FDF1CB047C6A1D64ABC5575458EFF7A8B0518F
459BC0CCEA2F5BE6C17C6B2FF5D9D6671CDB4D1EBCDCEDE311EBDBC46FFE4CE5925174FB6867
BD8782FBB5DF89A3E09B0E3A1351CCEDF95B919F5089793F82FEB57BC6A103F8CE6EB84AF506
C4ADD60A88295B0ACEAFEA03D417664F98C420B2FABE59DD85837D7F54804C5AA04ACB78C21F
6338989335200E5723EBE2B61F1AFE37374BD1281DB67EBB38CD7B6FF4955087D91DB6E50527
AC35D289DE10863B9CAF2F18A24B497A2E837B92E18DCB298E95A553152A94A0A0DA2A2589B8
6FB2A1FF9D9CA0E8482F2ED922A1805C7A6502C1EC0CE0DE7DD93D9D030CDC1425763008F573
5AAFD3BEBABEA1EF6E61E081513C5955F787650D381A05D0B806D2FB47314B962E717C3828DE
D4653BDDDA36DFE2131AA67583BD95D70872D1912C8635C5D188B42DD25F15E56FD0B7C8DA49
0157007B6D8241A3FFA3C8E3B105E233F6FA1FA4360A56E4A6D1DE7DBF15F9A9B298154129D4
3FA9B8208C40A519569B4C783B2787848930DDA9C566C58933F3BBA994BAD9C573D0130F818C
AFEEF9EF6B21CC05DA1CE1392F8F29D5550385D2F784B65705ED82A1ED75EF46537F3D336E91
FE5FA1843B843403DE927FA880CDAC0EECAF031D05E7F293D0644AFE6233583230A0D831E228
5B10CB3F25FB8CB7019A6C0BF054A5FA3A97CB6AB89FDD920E51B3DD8ACBC965A193FF0F09DA
90C0791C747422188DA90E2E9FDFCE7CEA252CFAFAF2616559FE7886C2E5C2B399F01A92BF00
8101111551D8495869B29620BEBF01FD091CBF8124DF8F433ED7E11F61FB6D3EFBB8338C8C9A
9AD85FEBEB8157F33E399CFB06A07487A28EA0946285667BE432D44195192F0CAB2460E5228F
0273629B9718A09656AD687B0B097919147AB0040A8882E5DF6067AFCEE5ED0DF2591493F01D
EB106D2BFB242F822A4E478A3C587BDA9E3F521898D0DD3020C30C999721A4E2DDAA72FF600E
D8481E7AD89C5E0A3A548442A5E117C8005BFB8216EDBB85DC1206320D903855BCFE52EE480B
F2514761D5E70ACD27EC36294B8EE83166769B1B7911D4C6A6E768A82BA9C6BB114FF803C532
590B1BF90E91FED98B2CF78378AE408D5013731547C548EBD62BEEADC32BB41796BC13C2A230
0827C5F717D4AC53B31DF3E1824AD1C5D4638DA0DE14B1D9ADBCDACA45CD024F14272CF3FF7B
F297EC6BBAA06566F599882F42C14AFEFBCBE9F0F0296A9FAFCC0DD04E24AB71118EEE1F8051
755D3F9A1ADE015374D5A6C7473AA23189A35C39CEE4022C5746C57DBA2208289A117DAF48DB
979BA835DBA59E4F5378B00283F49A82B5212EE30CE2BB037F628B9CCDD05E9F405AAD364F76
32B5C0338638B678F7FF9611C9E7AA59A50E28F5CE3582550453AF5B383798E03BC755A85C31
EFE9FF7F7A855103B16FCCA4168A7D47D0B0792BC52DEB56AB0C88F1E4C1B86C8382B5E825F1
D020D74229B25E40B774A1CF6EE02A298447C2E5DA5B4801416E3A27542EE0583BFF6B2CE90D
A6DA91B6814D58460015E6A6F6DDD3A804725E38C4E6E8A5D810075DC614FAF54DE04C99CB09
2E37B4FEC55AF9177B2D32A570F18D0E5FC556E3BFDB7C7EF95003EB25C1803FCF40D95D2762
DB4BA428DAD4F874F08E2852DFE9A9D22EDCB8A8A81AEB4DB000100694A0775C326877E3BA84
03732C640B82FF394717EFD48403550A7000A982A4E4B53BF01C0FB6A3F7756EFA462EFA06E5
61A72C7FFB24B3DEE827AC35E1EB302CDE6776285946826EDACFC9FA595C7D722DE059A6FF17
B6A1774FB4556398881108D239491FA4AD855237A8547AA55906DBE482F5B97979C885BB65E3
2E38949052E2FD9E714D7219161DA94ECDBFC591BD6EF0A58C4CF5CB13C19453811FFB81D44F
D2CD81997F3EA89B8F0EE379861EE1C7D18667E62A7E363CDD956B8E7CA9BD85794B154EC5EE
A9D3FDB960E272178043F4F0DA163FADFB2AFA9BEA23BA6E3BFC1A2ED7CCBF014B96E58BA2E0
7CC58C3384B38FC8E4CD78732117650C8F7ED5762587BC1663BD46AD4589E17B933EFD553184
391BA1D14881EDD73019485D880E1B1094E720B30E51EC5365E86C36CF2B0524C88477C0D71E
2C05E8B0388BACAD8BC1FD6633B41A18A53CDCAA86D2A7DF1B0B10326B398E208EEDDB3EBE80
516091FB7C46EFF8F08EC4A72DD8A3FCAC779895C14622B141348C7695BD2B861E32B31F3E71
A2DF12B0A7ADB96EC0C8C47386FB906C34603043EE4EFEACB7B610AFDAA4F19147532B2193DE
D1979B71C9D125590E78C5172C527988DEDE67341E306538CD6A837011130DB62DA87BBA4211
CC87F6815914AB0187B0B947D50FDE31627486245829E1EA5A94599F0E6ED0DB7853ADAE95D7
E6CD82542A14941C207F9794C9224E8DFCD434DEED1E43E7C0B86CAF70F7AE673305894BEB0A
33A840C497D3424B097D1065C57D9CACA4361C2FEAD7193B6CEFC1A10F26B2DF305155D9A392
5C360505C29C40074379B291CD8623556257266BAAD68E219FD9F24305F961E5D6017978173A
5EB177E17057DB577FDCF63FB0D2D45BE7D63F0BC205E7D2F4C1749CC9DEB24E730F1B7420A7
79639237756CA9516170EEA07E607EB3D5627467F65F5DB49CD43FC6D4A3AB2EAD3DF6703EBE
613ECDFDF64B7C9B29B08AEB582DDA25F944167D367F5997B8023564617C517873FFED86CCD7
09565DBF690F9FC22E38A7E619718C9CE7C399995BB01478EB3AB496F1D7E107AFE627C77CC2
944DB98EE2919BE57C144480400FE53970403F4F0DFCF69CA68235F001309841CAA6444EBDE8
B8ED0A1B049C62E57B97FF8E2307573BDAAB8913D220B68A8D551E2E6653F6B14FEBF8755440
47401AB366A900A58DA1C37BA66252EF1874B39974F0E31086BB20961D139AC7D57B8F2F8E8E
D659F0A68CEC598C35237B820A482D624DD5C628339946A0DC68A8BFC2E660E07F11916E951A
C82CE45D7E4D31D2FA5F3D5CD821F7300EBB8B56B7E4A52DCF641A5B267A53DE0BD022B3F928
C1AEDC8AD3F3AFF20EC5E4A5ADE35A5F1E322014A2FB9D19F7D42F994C1E4BEA452E25A090E5
9297B10EFAF537A2D584D86CF900F986C2EB13960B80BC8D133D2E46820112AD9921499FCA16
17DC84AAAEEC403DDCAB8837EB69A24C88407437FC156535A834C29FC06DEE695FE1734DCE89
1BEFD813868AC2ED37A09A9C29BE143C052AE238DA802C5B931D325EB4007FA1554AF96DE6A3
82CCF9CD405368B30209D8F4AF855716F0A78378D1A4152D10A5E3198D5791FC1C7D4AE6BCD1
5BAEBBEE5360CF1D783EC7B15B43F93C20DC09B6A016BB511BC0DB4C4FDC1FF44289447DA34C
C530FCC1988BDE9210505CE07196B5F22FFC400D951537978387DF257562833FE7E76CDD05DA
C3FD37F218433AAD9C2EDD90FDF346B92754FDA1EB1644C8975F1AC271D75F442810C163A2B5
2781B72BAF22D21AD77D41F78325CA190CBBEF27173BA0221486ACAF4935D2966FC34E61D4E9
5A15D40B8060546F99D6402371A4616476AB9843C67F15B2E0C79AFF014A8D115C521FE27572
B9FB39E0C057108866F8067981691466E13F68AC8D6C35F90A347B510F0A30DE09B98DF4129F
9EC2435B7F9E625909B305053B21ACC8B7D03CAC2B42BE5E87D6EE4392E8027E45383E9BD62B
F105FAF9A30E0C91AB1F3C55CB51995D7CDB27B8940402B67B9BB29D1B5955C8333863F71323
8637A42A3B8A56BE9B3B8C21D9CC04E187BEAFEDA56F3135DC4CF13867EDC44BB2537065FBCF
6CC5B4676E3A7D0331B6360C72291A3D9E9584A0E42412D24CD652D2D0A61AE1FADBACC27580
0438531823E31383F3BF75AD2C77A79D87C68E63FB3ABEE97D7C3B89DF29214E613B82E968AF
04E4A016398FDEC55F3F5DCFF53EE4C8F50A979F947A9489D878B7BC6C6D8E3D8BA220F44247
1FBBDBBF20F6B542A766B85B36274C7F59232E86B89BC54912B667887F864FE14B655D600674
E70C7A8F81AD2FB92701D3848E1D4BCBC8D0F4E317AE99D6F23437401E00F7A45E3BA8A10CDA
37ACA54571F16A4FA9BA469F71AC1395D37641E983A846CF7DE08EAF91EAF1B50CB9A9EADBAD
6D726799F70B7D8E9930CA0F60B5E95AD74DE84B9CF0CBA8B5767C12B62B875E9F96CD0AC537
256214C9363A94BC091FC0E8B45FAC9F1547C9A28E29F846ED8821530AB5898D9FDF0A58D506
E2C8BB70F640BEB821AD493B2F544ACA73584CFABE675D45706E9EF6CF8ECE867C1DB79E770E
0E000F30E64661469581DB39DA9CCF9783865BF646CFDD575ED5E5B0D3F398665D076EA19BF8
80C343253B8A86FA250964D45DA4DA056ACE37D73EC9D9C53C0E61CE96DA8C6C12BC3A3BBC40
DD4B95791E43A262BABE81E60126076C7A349AFCAB912C0D0D3B3771AED94F5BA90B9964B745
3BC7B628AA4380072438A6E7AC7C40D5C5AF2E072EB864B30FEBF7970E83574F351FB8F10695
AD664643659538E62266525677BFDB9E59003D79855AAB92E752087F138E79C5D22C6977043F
ABEDEE2F241A0C785C847BCF9B48FB6D1C552D60072FDED1D537277517EFA945669B16CA32B8
B2D8B483268DDCB6F00A3F43DD96F684DF21106792AB1D000F9AD65E85CF1B91467E3D4470F5
B40541F693226A1ECBF8467D6FAB8C8A99D26760643057CC977B92FD2EE52BE5152AA39961BC
2170D23B90BC6D79BB3E13BE3362E81033A0AB5F9902343B0E4254F5CEEEA9D3BD90B8F3D177
8F2CC8C5B1EACC65A2C46A49FB3DBCAB07A8F9A07F4F67A147E960CE643DA0FB451EE8E30158
A2083F4A2521B509383BCFC964ECDEB9680F1D4B5C54114F84027CEA064FBD53A7F1BA318526
BC4A33889FE55712D7496B4617C3FED3ED5357A0B4DB17D162DF05A701256087375FD9674440
36F376A799CD28EF5ABF726E61AE444182661DB46DA17B995CCDAE0B2123D1CC163D2DDF3A42
DBCFD951BCB9AE709F963201D58E5C8CE701BDF2C6111CEB83F6D7C2E7C7013151698312E6D2
FF1617DCE6F2475F6C21BBC83F086E67C53E76735C82E3DECA8EC7458C445748C24E279A6090
CF78BC19ABAFC68854EE2D5EC2E6F4DAEBF37E6948E1ECABA286078E8CEE9FFED59F0937A4E6
2D1B0833A7CDC16516CEB2CEF150AD08AF75951EBA8FC01823BEAA232327089B990039991E31
38451BB972B559AC5012419C2D6362C16A540F6A40B44CC12D35943BA077995048FE5F2B81D7
D85D1EA1E84672E43E333325289E7888FF3C9C7E653056E71201649B70834FB1DAA67F3D01C2
C8D07B5F6308E61C076D9F7DCDF604D652AEA56D5D507A4D727831A5FE3948DA472163C621F8
3C8B2878FD8B96ABCE28B3CD83C9C2E08A8421AF5247CA6E9A8828C78D09206F8052201F970D
485DA2158B6E81C24834B31A8F4F2AECFB89982727DAAB34F2A1CD8016F595C71DD19A7963CD
92395FFCCF248599118754CD8414548B97DF18B9CFFD49163A67DF17ACE0614B218333983C37
16B3AF677EC99E7BAB09B216B9A1527ACCDD137F50E0D37ED634910BA15CF0498EF8B6DE3F1B
846EDB13E22CB55456FB5B9322B395470B5F37C014D6572A3C3FF10B212880AFAC767395BB33
25E3C551A21AF572BBFBB118C9594A5ACC23C0B3523E43FA6AD72B28A37A82FAAB983600CFF6
2CCB4A04915DE391EB5A7183FF5E4F3E4D58A960E49A2B9D2374EC6DA504E854A1B68F5C2925
AF5F847801E7D2FA2C1286EA5F055FB7D222A615371D19D33E26BD537E0E323063D01C1FFE63
190D1D4DB6D5F45298CED7DA97F1CE60819906BDDBFBC5B679D2580CB50218F0E3AE8FD6D06F
DAF8710426A32461123C450B147A01080873511DA44E95DE756BE0E6157176AB43BDE5A9E745
9135E063DCD5A0A6F7779CE73E09A2902A2F040CDD62E0B033A7B3D48A1CC38C69D219FC44E8
0D61C1DDC6E3F553168913980ED2FF3858BE6C382C5BFD1E823430588DE1749F7C21081437A1
91A54DB980D028AD30D6DEBCA652341C0F6E4B211FE3247FCA193380155C9513386FEE05B3F8
3363DF205D7D109503011CC569F5E62F44BA7D1ECE2DD4533F1BF4157FB346D8BF38A0748588
741764FC50E7ED40E7B58AEDEE8CE96D7F09FAE151C18C006330B3B6FF12D152AE50D23C197F
461DEA3E4BF5EAF6C3EF700FCCBDF738AF1B2E4C28B1A514BC19A3AA5ADEC18046D75092C2EA
9DC70C6D98D2EC25CD0235253480FEADBF416032296995F5E94982A874EE09527348E31EF84F
21224F5F0531F85486A77FEDBCC60539A27AF619CAAB23E2699758529B157C7F2BAA75123A1C
5AF2F39A29C41B7E77AD0BB0D1290501CDF0555595583D04E447E75013915C459468E8378E5B
6146AD5451ACC0E902EAC8ED877DA0E6BE58ED89BEF43A870E1C155F08F8CF2998B494E5D887
A1E0A7085CC19177EBEFC6206D3726AA1148E9306F364B724AF7D5263BACFF0E977D399CCB58
EC653CF81F125989EC81F2224A363847709E6AB95FEFEF0537161D36CE2F1F36143F0DD6B139
9B31C02EFCEBD869359560BDE67B215FC88CF307AE81F39D793446C3F3A92F81E41E4C4AC627
0ED0A7D4C69702FB4C6CACA87CB1542DC76DD3D728D7FF25DBF1D491F121B27AA35B39296D48
E85D7EAE16452BFF1D9B4E211E9FBED567C9842D1F1503EC75777B01F4FEDB4F199CAFE1C559
47B17D087ABDCF0E7B5835AF7C82C3D9A4ADC368D78A2B1D46B2337C0CFC7A9F8FD3A87C6830
0C2B1EEAF6EA1ED0DF35F0D4DD92C01F76E50B84C879EE4D11510A0211C19A77E2680E4EB2E9
73513EB8B7764551FF139A1028267CFB2406333BF1C9D13286C7EA902E2756216EB1435189D3
FC0954CCFC970440775F6D106561EC34B2750ACDE5303D25DA50E29FCA7E3AD78322ED26ACFE
F57ACC243E7648BB168C9925CB5B57E2EBC48F0E8604974215FD03958EE95CA8F25172CC8C99
92B0EE94AF3E37F74D87C93ED14D96C15FFA788246AD6E73BCE2E8242405C5FBD3D01F8AB617
332AF525DD448BA8327A6260D2D2A3813318F46D7620EF1F9AC539ACBDA49DF39E17B8303A22
B575E5E8B8FFEAD8B7DDBDA7F9C29230279ACEE05D25704E230C837C09F5BF61FBA7AFEC8B44
8C76A83E80DEF396194BD7CE0274C3346023DF99302687CF624704788151F8FED792463BDC87
12EA74DA79710DAF5E059D1A72BFE36D6E1D688785DAAE4CC1E5D6167133E2BE54AA567D6149
AC06139EB1F705C29157F8F5A6431CE5B57374BF68C1D56373B87114722EAE982F7E9837C52D
FD5BBD681311B1B68A8E78050A96BD14A374280F541778778F76532D7F9F7FA31F41AE5C8193
D4009E8EF285F96F4668797A0A36A92D6C7004AB9E8D374CABF4CA99D072807AB7A2A6F137B7
A1B1DCA1995138F432F18C488D20E4C296823E72122101ED3FCF9D5AD16C4A911A951E59F2E1
ECB61B6A2C9844E571862EAC09A7902979F9E670AB5A47E4107FAFC36B0B25C85B109C98847F
7811960D3E0408A9DFB48C21C2E4F540F314C6225067F0B9AE3F507D637C3F053EA154529952
C9EE790AEFABD75C9A0FF001A021A39C58906DFF73952AAE28816D999955C446EE5B82455E4D
AC525656AB41A857139192B72057289F02DD6E2342F3DE1E5DEBECC81532E106BD06AE97DB72
E8F335C7FD6335A7B9647D38B8314B28742A8D6CFD6C037913CA3F10B77B0133C67C9130CA87
32FFF366EF89D3F57C223C28CB622AC956453071B85C068D131E981EDBB9BEA673D4B9797EA0
5BFA78F7FBBFD715353FAC5000055BB7AB0E5F8822941361225B119E4F20F108A4A2D77420BF
BFD8DB7A3C2E053C4925BFF27CFCDEF223E73DD02D55F6ED833791AB74A79DE8D16FA1F6E56C
B5E1284B1E2414DEB7AA020B4ED8AE44BF6EE6E433E82A0D6123D871DCB14DB07F4631E69F1A
70E3DC7A61E434C0468FAB02381732BEB2B958A6AACBB31CC5347F1968A863CC6C17626009B1
47C3F7D2764F46F89476032526FD0B1D884981AF0DC2708D1A7C7BB6548EDA90D7C67BD93B25
6A36D4975BC9C9E774D93D2D123DB84023AF2EFA22F7F8923582D4434A6AFDC98D831BBBE89F
107E2BF6F2E8BFB314C20FD8660FA50EF01BC8489812048F8AD827BB0C0A2E63435C488DEAA1
78DDB75D4D76B60CF95D07DE85F5764B5484F377788F49ADD2545A8B8BB81CB11E52B1964577
E3B34F3505B2ADE76BE512A0EBCDED10D35DDB2510B372AB71CA71ADC085701C7A5AC7F47FF2
EC11912EC6EF53A8DF4E2F823A66479594E70E14D78B2BE6108AF4D077650C5FE03CCB17AC04
952977F668B887C9C426C2EDE490E28211D8034C7226D128A1B91B20631F505143AB1537B371
709ADB7D7812638416493A4A2EBC27DACC8501E83677D7CAEC05E7FC8CDA2D17FBBAD16FFDC4
7035478AE84CA72C5F644BEB0904D2325968B9E8065ECBEC37269E6D9BFA3CA975CD06C19F1F
23B073D58E06151FF11ECD71F20445C2A6900AB9CD54D4C8D3845C6FEA080E42F758214DC001
27582F6A6DB20958DA4DCCF3452B5ACE051496927CEC7CEF42C0268C9517DCA4D146BE0B4B00
D7E510737F28AE1407998D095D89354BFA32738F113FA4DFD1CC28FC16177F14AA8EF8350CC3
5793E01E77FDC2699638A0D269ECA8EB21C94D05632E3B43FC33AE57F5F808C0059F22F1FBBC
A884EF91D744E54A8DB6D51EA9F083D89A0571C5E7D85DB94BA8550828E75A61967427330638
8EB7BBEB8F69BE203E9C9027EA35C98C4A3B5622A11F434204BAA008F3BE852484C7A61D7DE8
1C5752E8C600C8DB896E608BC8BDADA3767DCF3A6ADA32C482B8CBE17B416783AB018243FDEF
5BCB84A2294954DF5D1F4937A17699B039B9694A20637DFC8AAD926173D935652F626696ACB6
3D8CD8AB36CAB2499F44A3FEA78A99BB3BF16FA52EA267672DA977CF2D5AFC1E49967DC04A26
E1A849FE20D826BEF6629CD6DC568EE87D4EB3DC9CC291D829AF1251AE6220AB60E7D750E8BD
F7BC635C69C94656E638AFB9DA6A5DDD853777F26B0B6167B4CACA08ECB0BAE84068B24E1EEA
874FE583A10FB7CE5E581791235427784C0E1BF18C584BF5F2330AFC21C26E98BFF1305462E0
E8FD02D13AD10D33031D60924433583380A48B976569C182BB636E98D39F9966DB853058BE02
ABC7E978C7C2F45D8F0DA754F51CB3454A25CBEE824FCE9782D077B8CC67846FB33CBE7C7F64
E13AE587E4096D7797D51401D309B06D5A87E1467125B7EB3C9E4315CF6C60B31FE767287C66
9BB0BCAF25CF0E2D22EAB00DF82EDB90EBFC6B8F1649582B444E6337A7FA2C925F677B4AE829
26A60FEB9D30F95EDA59B86C0658184F2482A9F09DA453B88D256A2479FF03D8033681200A50
5D43B1A9E61AB71262EE3C7ECB51FA62D6046A9F35596A0543DEC82E2452508F0DA86C5EF6AA
105D10FD1F2769501A4FCF49861CBEA6696BCB76A8E3E84DB2F43DA6A17053E9FB2CB459AB7E
A91A80E20932386D9F3ADDA23D2E4A1CF5D6BA73B477824ABE16BA45E641F34104708129D896
3A5D972092D360BC6C16A53DFC76157F227E71EC621BC9E1C9DA074901C4C288702566A5C863
9C39144EE346158716D7CD94739742B94496DE1DB825337342F7CDD6DE68BDB54708AB9E4969
5031B07DF9366C3ED0AEDB35BD60513A249AB38D6BC44472638A17B537F89E6BF1DD367097AF
E4DA5809F9D9013D5AFD8C92A2CFA6E040F28ABD7E0A0D56BF97EEC35CCD8D212E5A772B33D1
512546F4C35DC1CA4CC666B01B5B8FA9F517CE409F26D3710C519F68E411E47AED69B8000FF3
DF955943A0CBD6EAB124A6BC157ADEF8626D8AB9F6910B18E950619146C84287713C4F3E6A33
11A7D10A15F396760F43F6BFC144F74C0D3246C8F9E3FEBDCE96036B6AC4316085CDCB72E7FE
52D732B83D65F48E5D23B6E5E948E5AE2BD5686ADFEFA3FD4601B096BFBF04D4924384B764FE
34D29C5E61629DB5956B8A3F7C326D7B8D2C01EBBA6D875557BAD134B422A591FB636F6FB325
179A1548DC183FC94CBE924BE379A5779FE2ADDE9D652D78400CDC677EF0CDC08A85BFAF5022
BCA9054BD0B49DA4DDB77CA9F6D2C97A4145731D48D822089E687481DFF711E2AD61428DBCA2
2C6DAED292450E9D6BCE00B79FC3EB027683352DA7A200948F06B2946E42F8DC88FC22D43D22
E4527C4C0CC4153A285D78339C2C9D30F7C1A9D014986BCAAD3ED6DB41D66C981A1B0B460F74
39A06C2F319A2F2EB24CF6485E6B46447F908BB4730875090700733CC22C5E0263E53E80FE56
862FD336D263245C2D433C5F4ABAAA7A81B2427F9AC8595498140CB8461893D7D1311075DF42
2DCEA23AB71F12DC8909A0AB787219977214836D085D456A053A193561C26A5D4DC2DF3B99E0
ED34A9FBD688977EED1D18EFF8E8D617628DB902988D1B3066A62FA123C26235368A21B79D68
022248664C93C241BC7AB24FAB0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont
%%BeginFont: StandardSymL
%!PS-AdobeFont-1.0: StandardSymL 001.005
%%CreationDate: Thu Oct 21 1999
% Copyright URW Software, Copyright 1997 by URW
% URW Software, Copyright 1997 by URW
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (001.005) readonly def
/Notice (URW Software, Copyright 1997 by URW. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright URW Software, Copyright 1997 by URW) readonly def
/FullName (Standard Symbols L) readonly def
/FamilyName (Standard Symbols L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -229 def
/UnderlineThickness 46 def
end readonly def
/FontName /StandardSymL def
/PaintType 0 def
/WMode 0 def
/FontBBox {-180 -293 1090 1010} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding 256 array 
0 1 255 {1 index exch /.notdef put} for 
dup 32 /space put
dup 33 /exclam put
dup 34 /universal put
dup 35 /numbersign put
dup 36 /existential put
dup 37 /percent put
dup 38 /ampersand put
dup 39 /suchthat put
dup 40 /parenleft put
dup 41 /parenright put
dup 42 /asteriskmath put
dup 43 /plus put
dup 44 /comma put
dup 45 /minus put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 59 /semicolon put
dup 60 /less put
dup 61 /equal put
dup 62 /greater put
dup 63 /question put
dup 64 /congruent put
dup 65 /Alpha put
dup 66 /Beta put
dup 67 /Chi put
dup 68 /Delta put
dup 69 /Epsilon put
dup 70 /Phi put
dup 71 /Gamma put
dup 72 /Eta put
dup 73 /Iota put
dup 74 /theta1 put
dup 75 /Kappa put
dup 76 /Lambda put
dup 77 /Mu put
dup 78 /Nu put
dup 79 /Omicron put
dup 80 /Pi put
dup 81 /Theta put
dup 82 /Rho put
dup 83 /Sigma put
dup 84 /Tau put
dup 85 /Upsilon put
dup 86 /sigma1 put
dup 87 /Omega put
dup 88 /Xi put
dup 89 /Psi put
dup 90 /Zeta put
dup 91 /bracketleft put
dup 92 /therefore put
dup 93 /bracketright put
dup 94 /perpendicular put
dup 95 /underscore put
dup 96 /radicalex put
dup 97 /alpha put
dup 98 /beta put
dup 99 /chi put
dup 100 /delta put
dup 101 /epsilon put
dup 102 /phi put
dup 103 /gamma put
dup 104 /eta put
dup 105 /iota put
dup 106 /phi1 put
dup 107 /kappa put
dup 108 /lambda put
dup 109 /mu put
dup 110 /nu put
dup 111 /omicron put
dup 112 /pi put
dup 113 /theta put
dup 114 /rho put
dup 115 /sigma put
dup 116 /tau put
dup 117 /upsilon put
dup 118 /omega1 put
dup 119 /omega put
dup 120 /xi put
dup 121 /psi put
dup 122 /zeta put
dup 123 /braceleft put
dup 124 /bar put
dup 125 /braceright put
dup 126 /similar put
dup 161 /Upsilon1 put
dup 160 /Euro put
dup 162 /minute put
dup 163 /lessequal put
dup 164 /fraction put
dup 165 /infinity put
dup 166 /florin put
dup 167 /club put
dup 168 /diamond put
dup 169 /heart put
dup 170 /spade put
dup 171 /arrowboth put
dup 172 /arrowleft put
dup 173 /arrowup put
dup 174 /arrowright put
dup 175 /arrowdown put
dup 176 /degree put
dup 177 /plusminus put
dup 178 /second put
dup 179 /greaterequal put
dup 180 /multiply put
dup 181 /proportional put
dup 182 /partialdiff put
dup 183 /bullet put
dup 184 /divide put
dup 185 /notequal put
dup 186 /equivalence put
dup 187 /approxequal put
dup 188 /ellipsis put
dup 189 /arrowvertex put
dup 190 /arrowhorizex put
dup 191 /carriagereturn put
dup 192 /aleph put
dup 193 /Ifraktur put
dup 194 /Rfraktur put
dup 195 /weierstrass put
dup 196 /circlemultiply put
dup 197 /circleplus put
dup 198 /emptyset put
dup 199 /intersection put
dup 200 /union put
dup 201 /propersuperset put
dup 202 /reflexsuperset put
dup 203 /notsubset put
dup 204 /propersubset put
dup 205 /reflexsubset put
dup 206 /element put
dup 207 /notelement put
dup 208 /angle put
dup 209 /gradient put
dup 210 /registerserif put
dup 211 /copyrightserif put
dup 212 /trademarkserif put
dup 213 /product put
dup 214 /radical put
dup 215 /dotmath put
dup 216 /logicalnot put
dup 217 /logicaland put
dup 218 /logicalor put
dup 219 /arrowdblboth put
dup 220 /arrowdblleft put
dup 221 /arrowdblup put
dup 222 /arrowdblright put
dup 223 /arrowdbldown put
dup 224 /lozenge put
dup 225 /angleleft put
dup 226 /registersans put
dup 227 /copyrightsans put
dup 228 /trademarksans put
dup 229 /summation put
dup 230 /parenlefttp put
dup 231 /parenleftex put
dup 232 /parenleftbt put
dup 233 /bracketlefttp put
dup 234 /bracketleftex put
dup 235 /bracketleftbt put
dup 236 /bracelefttp put
dup 237 /braceleftmid put
dup 238 /braceleftbt put
dup 239 /braceex put
dup 241 /angleright put
dup 242 /integral put
dup 243 /integraltp put
dup 244 /integralex put
dup 245 /integralbt put
dup 246 /parenrighttp put
dup 247 /parenrightex put
dup 248 /parenrightbt put
dup 249 /bracketrighttp put
dup 250 /bracketrightex put
dup 251 /bracketrightbt put
dup 252 /bracerighttp put
dup 253 /bracerightmid put
dup 254 /bracerightbt put
readonly def
/UniqueID 5021339 def
currentdict end
currentfile eexec
E98D09D760A3C22CF119F9DC699A22C35B5B35ED6AA23593C76D54CABB5E942BF7D6DD84F166
4B89699C74B472DE9F8E6DF925F6C4F204E9F1C639B4DBA988ED2AC419FF2B2BDE605B8EE326
4EDD66412D4F21C64AC522BDFC7C5502F9C3F3E5592B3B2093D33C9BFAEDD2D49E89AABAA832
E23F062E91A25032519D1868816E44B4E0747795003D7930299D6E1E2A5BFE0D595DC97E1409
89CE81D8D7F852FF9CDC7A1B1B598C69131DEE005B415805A16D8A13E5927617AE7F247A71CE
0C7D56AFD75D85ED2D9F20FF9A6C38E8D5205197D08780180CCA9C35522B1609B501724D4D64
00169B91BCEB6A4DE00AFC781CF8873012B3117D22A18587895543DBC2A1FFC7752376DECD4C
92A691224258E8F8F113F2A5CB3D8DA10FE823C6656A8800CBC7FFD018A28AC2885F35E22EF9
FB549B00E23D31BBA304DD9C28DF02A8C370CE49C58A40C9F673AD61F5ABEE9D62EBAC590B5A
44F2BABD96E137464DB066B602A5D8D43ED041B780F0FB98F9952F20AD8084199ADFEE9ECB19
3C018772E63A5A83BB0600962FE724F63351B4B7A16412743AD14A38418877768AF423E3348D
48ED773C2E87624CFEF777A15B6872F54488E42C4849AE6D54CB857DC0972E1B57C88F40B899
28EA43C18DBC73182F69B52F0BD66B7133881676616AB669723240F17D5EAAA27C8E29586228
8DC30918D00008C9592A51F39E30DDC462F6287654ECCC13FB9525F6EAC5709E952FB237E8CB
0870CAC5DDC13DA58DBD060D3193FC92E6C4CEF3BCFD81CE6B3679BFC5855796CDFA8A26D63A
659A2FF7A1A7E318A7F76FF80E846A2D647D38E827FFAF54BD5A9221EEB416A475EABF4EF040
9B3CC15077E01F742C46ED43CA72924C32E48A78622463396680CAC363406C524A9B3B768CD5
A6892643F78B7CD65C610EBFEBD1058DFEEA67D8A9B9AFD9BF39033A56856537C06F75BAB0A4
7079DFF64CF7343CD6E7FE7BB1FBCEE32749C91435CB86F7550D505C81DEFFBE1E3A1F6304DD
03CD20842B335D7FCE6EB31F175724D51C184800C3756DB044E2FE04BF53E995FB425AAC96FC
EF384C930334B5F384536CB3ABD98447844BABF04CA767EDB70786132C796CC2F6530852275A
B4DF0C8B4D2EAE01380ED24E62F5A85DC8345D556C67F00F622D32DD66FE18219169DACA3744
A819CFACC305FCA9471A0DE5936E270E3B2D4E1211D9DA8DE26E790C6F56C2CE8B19E175256E
8BF85B8E52DB7DA8C44FE52E57AF48DE9B771658139B6B81B36092ECE2B629C0F64D31D62DC7
D422C2A204BC0414CC6F78F4E975BF8F27A17CC3B35B31ED313B5274F487A92EBB33B02AF472
EBD84C4B1B4006E5C5228A6F7222DAB490259DE2223F4CBCDD006A6549F08085EAEAE51E4D7B
08ACC8B08E8F98DBF79ED4220132A755C007366600FC27E0BADD73C875074B6F211DA05FF145
4730F3DDFE96D36CA12F8249CBE74C82A940F1D60205CD9624AEB7824D5B0A1578EB3FD45FFD
B97E66BF0FAA27BC25E631C20674E7D6DB5E4CC7B10F3A77731AA3A53A187E5211DA39F2E97C
0236E36F8714C49D630E6E1FB42206CAD9361794A9E002369CCC6587F9A4CBCE5CFDE26656DD
8A36663CA82EFC1E93CC58863E3A290090906220923F544E8CA05E5C837724AFC674E6008278
FCC696462CD7986AA3B884ED5C17F9D035B9A1A169D9F8F28875F7E5D7BAB34668B61D026F77
E37277D53E9E0467152F6AC7AB56AE9206F15177732EAD7B2A003799862772B241D65818C0D2
D6C53FD0945CAA1719DB446F7CE5C383F28BB1F419F023F3DEF204E895B8057407648EFE1973
DC8F7B8C17ABAA1716AB69F3BF0575F564C3400FB55BC430F455B266871E7569C39A81BDB082
FA5134239272F9D69D2F5BE493292555A5115A0DBDF30DA71BDDA418CD5875BF2C0CCF00E236
F2C97056B102E8E014C2C118A76CF79C10FE2921D32022B8F96443BFA1B34189E5C5ABCFEC51
AD20CC4508AC5376690BCFE01DC8F924FA190A6F1295C15C74DDAD5E9C4047AD014576858A26
5FFCE0BE9E77E763E911BB662359DF98DD767367DAE1B686EEDECAE1F0C9CBC54BC4CD46E514
71256BD340B338C38DCBD6D327FE6D2348B4EB2A1C95BF082F2E4A1BDADBE349FB331AE9EA00
2C602097746265455A5C60A7C0BBD2F407C8A7E5FE9FBEA4BD8EC9962542E2E3021A0CA40F3B
3FFDB790592167AFB21DBBB9ECA9012D06086F1DE6749FF3C63BE36E0A55A9A103406D8CCC09
5975872FE895B8C43A2A445AFA5E03C7902489D4F4C4A9AC829121E532C6604C059C355652FC
9C2F16A553D5368BA0752DFDCA4C0E9B944BD1C2D115C25E4421EBE412B171290AB0D0E5B0B2
C42BBE58A4EB39EA61C710496DD8A4F0DE76759F5D55F557224A4B9549CEA21B8FE277FC5848
8FC369D9C0F1A3DC52B8542125BB42561B594BDF33BE43AEF93F00EE5C60274AFFC05484B001
1D8C465F56BB9D04FEB88B6DE54FC2104B07DC5EC8CD419D9F597E5F4DDFC0BBB0E920629FDF
06492BEC78C970C1E6653D4BBF92D3F1CABDC4FBAE380B22F1DB6E8AA9B050E33A384D5CAD95
43A3ADBF91A4A94059705D20D906FC7CEB2577CA5004339ECBD2A3679F29EB43C89247FA1135
0BAD35EBC938BBD745F774727DE92EB78BFCBDB109C54022AD09C21E85600DCB70CB1B51AEEA
B9CCE57B8B14C54EEB1E956A8C3961747216580822C531BEA4051318283A3CF1F612360B4D3E
D785EC76C59EA475C15B15E9E19314BFC6A12892491CD9D7CB3AFD9020BD28B685129EF9E2C1
51C59599F1E8E13EEA8FB5746CCE8AE317691A28D263C77714E5F401F9EDAEF085B72A86A9CF
5DFD56739E3BFCAB4929679EF111D23378A443440CF9523D3BF23F9BDCDCD7F2C40D75099F37
77E66F6E3F1AE4DEF3D5B062FFBB2FBDA4B938F80F74B6BE3032BBA77F99501878567F48A64E
B09F1684F095F8B4E407A78C964825ABDB71FAADB42AAB7C41E146FFD21AC742574049DCA257
E9F3D4CE46D200F776ED7915EEA1915E321177963DEDB2A24C8701D70A2658568CF1313FDC41
66E6EA59A4BD300930911C13B7BF4E72012FC99CCCDA3B8C6D07FEBF15C0A15C01B220A6DFBB
1D80CEED73812BE525E5B7B35BAD9B6772C6673CA1F580FFF16F3C96B9B9B7F041AED50CDFCF
7246DB20787436C9E2B8706D38591372BADAC219B83DDB3BFA1AF853AA3A7DA41B16BDF5E42C
8277C2CC73C1C9F668931E66AD5523D435DBE68071D056CB8FE1DE179C5244CC511D40BBA831
1D976A2120A6C46E85B939291F60394C911E30A214AD03BFE58A03E92FC67BFE81B828028E26
3650D27B064558E3EB72F01B40CA4CF029B6F1C1843193FB23721F1F6F19922F821C28ECD434
0F10E96EB38B788C589CB8815BB708B0C46C378E8C16EACC72CCF9CA0B9EBDB0B4906AF58FC5
CB8E7D62191F1C11943BB76D82251258C4B251AA9561D42ADCF0A5F918491E063B6A88CDF4E0
C8D41C968D57C6E3FBCD6BC618D139A687303EE12A6B31BBF23A04F19590540468BB12BC46C3
E69F4BAB7D195A1FE7DB409809F5A6B0178A77A4792F69C23489F5034379B4A7668CC1C9369A
36F8951BE8C85E23D2E47DEDF3718C0A2ADF816ACBFBDA1D46AE86293448ABC732DB99C17A6E
747DFE204CB1161C9430ADA3787BDB924556234F9E2CFAE7571F9542FC06C7B7CC06F630D43C
04A454C2DBD1B23549311B03D8BACE01FEAD8E0F4967F514AD83472957CB2FD7661BD18215AF
416609669E878C72E1B8F692C44911958CB98BCAC7C3087956E5369E6F41F1603ED496F4766F
D3517E88680D37104F5455D00B7769AA1EB0497D65B9C53952B4CECA60ADD156D91F86C60C6E
683DE2D67FD900E00AFF558004A66E12A9C1B94B2EAC6162C89610943E65DE52FC63A8FF04C6
E0B80CBFE53E15F94647C5EA40ECC42A6BDBBE981CC27FED8DF21369C37012087CE77408B778
66ECB381F0A1DD651772728B8E07728BC82AD72225C94C86B2451D891C1E1BF843067D38EC94
23A269DAAA3D71EBA07FB7F5982BD73CCF01C615CE12B396F656D86E0E4C62BFF0305566CBC8
39B1843046CAE4B57993F86CB5D5EE8A5381C33F136E01B779492E3D0C86787943046324887E
B4E927307678F2C8C8AF15D5AF787584254E99BAF1E3345D89EECA11846CCCD62BF08B6C3937
F7A3D816CA6ED30C71999A392D34F04E502E01934F2DF047410E72B50A53F11079103502080E
75E0314BDDAA9640887FD0B2D248B73E8EA80BD8CF69627F0D345A73791F257BB59B3B0A7624
3BB06BD0B1FCA3448EF08F012FE7D6960D592923B13A6962B0EBEFF6EE814B6CB369CAD2399A
3B3E39AD7F0DD9C32FC7EAAB819EECC9B3FD971231A833D00BCF78CE224933C40F1FD31AB11D
89932ED56046D87BEBEB0D04DFABA88F20070745A4FA25CDC7F482F6A29E32D5CFCD50FCE23A
1281CC914D9D2FA2D62114E00293E2E74E25E99CE2DB0696DE78B67BCB47AE793721E6958C6D
A47368536A5C9F9FBC134DDD4D08BF5C0B2D3BB4F863EB2C0E88E8699645A41ADE9CE5BFC877
D7C3C7BCAB236FB508E5C8FB6A1C33179670E294A7A068199581965C0FFD8B1121F4632088BC
969314D1319246E8C9E4564BC6BBB723698EDD949D12560B33F770FBECBEA8C23BEDDD57E08C
9165420CAF1B354852B07B6AF70F0352FFBCC71C9172D62D85C67BCD90CBD733491ECF747CCA
756250FE5093A9B8457F0FAB6FB3F365CD1640E30073D6F3596F896E55D1C0639573284BE2BE
1CA00DB036D4D055274E620EC875C5D16F2689B20865BAE0F14B1453CFFEFCAC59FE0F76BE88
D16D5FAF229149767916EEE5D37E4B2B060A3A3735FCBD078705FCE3E795443568C6B74B1ED8
F40C7126610BEA528083349C2BB60AD9C15EDCD2588C09C71E5399C0DF7EE8E51C4BF67891EE
652533564D7E5AF2D8910A9879DCA382EE62378E2A3C7EDF7437B5F639B633FFD5AFD3455A7B
1DA9C4C7FE0C03CA927BC933D8821E2F9B7962B8E775717629E24BC980BE517EABEE67CE8720
3D0423E856F10E4A5B7016952F6928A1D3080AAC0E25630B19ABD7B4BBBE3EC959D60343FF4D
F715455EA45B5FE5A6E3FCC77EA118037919B2A2B1DEDA705AFD532431BE9AD75309ECF826AF
7D63EDA6C1434B06BC5E9ACB43EE209E7B6BC20167028CA785D393BA779CE7A174A8988C2F76
23CCF2CE9AC3C8982C865120740BD7494CCAE328BB37AA4873FFD99C46D20059C1C5BCB9ACA5
E0FA9E1200D12545DF876C580E1ECD188295A790E039729EF9392117044E157051CE87EF3FE5
9BFFF2557C7138D4C630680F93F31DC51B87CD7FD8D2142E16B89B3ABFFDA36EF051B5643C4F
533EEB1F8AC18DF700729300D3FA5ABEF49B53A887FADB0DCD5B3E0B22D988C2D607DD2C9F51
06F83A521E755684ABF21960A0F9033066D573DF043ADF95F7C8E9F822CB1FBD5EED34D0550F
44FABF736A5E6338AB99CD0CED9C8A27090C85B498199C3EB567F2E92567FE87B20899A3B684
3D71D43B28B1C20DE059C102C0580254642F24EFD11EC8AC2819DDABF1AD4B1CD9AFE92CC0E4
6E194865B980B28CD543DF06AC23EFC9C64CBEE9D921C29C696F47BD8E700B6D7C1D052E75F7
597C5D513C76EE9FDE2951CD86703FF6824D2F42D4837893D2BF82349260038D21E9E0FA96EB
EEC822F6E91EC01F214AA9D1B83F0B732CEE3974019FFEEE359A25BD36B0B8E8250DBE1935BC
0CE2C33BBCC6D1E7023630C885AEFA7A770FD3B1992ECD9AAD06A13DC58F18FE545671E54C71
B8F5E66D076D1901AC6BF8E874CA84054815A145A7BCEFF0787367B58C668E22028216F62726
7F83F279656F6B4FDD61FB071241CC883B0060FB9B8D74313BE9C271FA13EA9640ADC53564F2
D2A85E4D1799B2E5D04B67F13A30914BCA5597A72D1456EB9F228F56EA95D1ABDF5B4332DF78
92B23C571BE72CE474A5685488E3B3EB489B6DE3F5E3FD5435E3CC6BCE8071126261D2B92554
17A050CF5A286BDAC485A678009CB3F7B4BE9A245270C08F92F339B57FA9CC899B8ADF5F7336
1198781480C3B4D6A2D8C65A60749A47CFF15E761A0352C5AB72D1DF98EF57CAE899DFA9D8CC
7FDF02C4FA66FB90A68B8569C277D99376BA317C9E6E59D7971B3FE53DAEFB91FD05E32FDD51
7B0B22A636524B4BC23D7464BBFA592B4385D006A495C0F74684FAB0D2AA4046B8721CF503E1
6E6C6A65B54D929212A796134AC6EBE6283B722286B8CD869C99A5B7F9B3506EAD333EBF2E6B
9C97F15F0CB8046F0980B0796857621626EBC802D5F3198ED91EC321522D6FA84FC3BC752F6A
6F47FC2C051AD193AD4E406CA0150A9A77DE9371F832D3ACA7A84CA8C3F7D97DC5E9485C4F2A
77EF071919CC90BE7FE13618A4A9BD73870A968CB8BA24688708F485C15872888220E73AA662
368F410EF76B34655663C54AAEFEE827B7C553ABC82543FA8E8DDE1323C6040FB8F24FC213A1
88F1949A4701B73C0464AD9657A7535440307897D816B3E4B6DACA7684F92A4B74262D772969
DEE711E4ED9EE115FB7F91BD9D1A3D40325F135B2E037350A36B43CF5A4CADEA68ACA368F992
78FA5ECDFF0D10ED1517489C3E59568CF5676015D06D296E7A26013D1282B0BE1AED1E1B0B72
A9BDF8E8D7BCC14633875C07CF5CCA202965C0AB8DCF250C3399007326CA40B0E3B45A9F82E6
01B0F69D362CC9352DEFAFB017F76710F829DEE9F4BADFCF550C83868B5100AC893517A84E0D
D8CA2C0DBF356E0A7A533080ED1B39DE69D1A31F0D2FC4D80CF09E75A82401B9E205953571C2
988CC68AE61E0C986E7631B822FF448098F015A925FA9589D4DA4F0B47413218A6C4542D45AE
8F328318EB676944D9CD0611263CE4F1BEC8470D1B8646DE66D351646200B5A3E8C7A7694054
4CFFCD6FDC9824275BA4095EF08F5B43CF24DB7D8B1A0B196E255BD6098DBC3F9859D49A159C
692284B52EDED63202306487C99740DEE252EEB2CE6A53479EAF7FCD6057346B6A83AD3578E6
5218EE3BFA52F9FD7052DBB3B3F841887CAB19395F64779F64D3F9B4A3FE3947B6A501B68BC2
88C6EF892F34F8E20A94605B6C42DF84D61EDCD000DBAB26F4A1E7BB2DA0A926BA762B2112BC
10921B387E100D9DB20905E27D47F0DB3C7CC67F29E4EFEB6F179F144B83AE9493F724AB589E
94BFFBDCDA86FE2BB33E6158BF1547321015D46E1667A22FCC7C56D3C60CA255105CEC8B03E8
8BFA66950424E879D6DB2C4FFD9D6DF35AB3ECC8D5DA69916784E274BD3FC32077D6636ED734
03105506FE86C7393D6DA5C0F43A8847EFD46D2999C2A662B2CAEE14AD13E48F1487F534B666
BD3882D5AD91DED50023840C31375EE1BFB540190F11C953C3C86C0F66139E57EC50AAD8FE9B
0AA154250F73C0E12B85B42B52F46B7DC85EC0610CCDD08C2F3F7A535FD609897E472BE4A422
8E451693921ED1F6FD9BFDAB638DA15123F3552DC8BE0530C8A76E85F59E13D95B5AE41D3171
F8C3AA8DAD0A02C3749E2090C6A795D53605340C4E9B596818AAB10CA126E84F9023C81BF23C
C73F61DDC66199E562780ADEBD2E903547098A5915FC7268198AF301C501D59B90F5BC507DA3
B2FAE2728746CBC4ECDADF62AEB3FF1952D7D9F1042AC5448A77F360B34DA1E782F3F10194B3
D43436B4117694575F7611D1E3427F7F7814D94AF7F5C1FE268AFD82C2E7E9E3F6E0B8B5FD82
7DB4E7B47E131793C6E29B33C9B0857435E4D57F515EBC299023A438E174150403C894AEF50C
25AC5AAF7F872055FAF3C1ED0144A6C1028E252C3AF250A181BEC8730283A087845EB774D9D6
4FB8E73B3770B41E7505E4A502FF355E3F7582F329702508549D5E07511244558145D9C457DF
485615592593827F8E16E0C392019E9BB9AFA29D2EC37E28F55F1D812D3F552DD43E9A707FB2
3652E944967B3DA009453D8418C0D709021B3D6036133611532664E92EB7CC78A0AAEA7EC83E
D8353551B6D7ED4571E466E55C00DA0929645B998C12F2969D76A27D56EE94D981FEEC5B957A
0CA637A04A3F0AE1BEF57D8A83D1A1593FE04DA296482291409185F0E2AE09FE4C2439E2F457
9F54C784C5A53D3897B6AF8B095B9A98054BF89FEBAF16C481F356753C8BB80195BD24445A80
2A0517AE0944EEC6307996F8381B2D974D7965E3F3E92296BE91DE6C548630E726236C658D98
61CAB98B257279432FA474854F9216EC7B6D27A1321A7B670ADE7265C10B6AA509BFD3ADFA44
CC3A1D33DC82DC4C1B139D95DDD7A2316BFA26C608B40A36BA9BF92F441EBBC83A5D0B4627C5
68F65D5C05372841627A8D8E3059D8737519935C2215BE69D4C5F60D4DFF230A09E72431C1F0
AC9885920574775A1224C3C559B0F340085302D07AD4016200443B3BB065CB076E898381FAF8
7AF0AB611A55A41B92ED6D9510951751C0ED0BCFBCEEA792FF6B87979489791DC83B88E74770
C07DF34E782BBD14377B0399025B011C7DB92CA2DB7D08099A68E395E9F282F8D7169E4138DC
E2824E053EE76F6DE8B58296BA38B0D9D273E3A4616F60F291DBF4346848E7DC0AF3B63A76D8
3F06ABCF2175550A55B6CB4A3168F0D33FAE389E0484EE677BDDE16C106F39BFFB37F90D8912
AB6674A631A3E12EFB2E0391BCE42A1DB09812DBD0FB0BB01ABB134EBD0B6ECA134A7EA7E0EE
66F809C46E5FADB70085D7F0C8F7D78FA864F241EA501BDCDFB8FB1D2496D96AC23337156CB6
3F9921BF84B06A7F9DE424EDB09070D09EFCFCD32A7061C990BFA088174EC45A0F4A385803C6
64C22EAB041B71CC959D9F3CF8FCB27E6BE9D7E13618482C30DE5425382FB964A3BD82E7426A
8CA0AC81A8C09B6C0B416F33C54A45C4F57BBF1026A12C5BAA1A5540E7DB5E954EE101C36A70
3623A7290CE302753EC158B65F810F7C46C55C7F9F127AA3945FE2A320A6AA49323125C85E17
4A828C559783107EDD7E3967BB1F5C6163B9A15B8C9D2BE84419FD9C0F36018BDE462B7BEE20
4AF15EAEE3E4F5FE39A269742BA5398BC6DCDBACFD346699A28B8D708E8B09EF00C4FFE6FC8B
E121CE97AE6D92B042895344492AD9A66932913563025C0BEB65CA343FBCDD121E126C49692D
52AB4BCB715F52DB80680C0F55A2201B22C2F263D38A89CC8981C56BCDB245805347A797D0D7
1E02A11B8238FBC24245625001EC6890CFB1A0939937AAB82FF635DE52E47D62CBB38D4C8952
3556125D761EFBEE56916F2ED351A8C8BEDEB375B400A5499EF7CC7DB0D9D7F60647C3416CE1
D505293EC1289CC0181479B28A71ACCCD35D1C497F628443FD33291A48F7AFA1D6A675AE2BAA
C9FBC4A189FC04A4420B91E3D51ED1BA42C2ACA67CDDAB41638C82236F66A8F2CEF2C66A33D5
4253B5609989168E1CB5E92E9A46256A87104F0FA8390DBBFB8148D7F900B9634A3E67B0F761
BFF5F4160B2DB21528D0A4D55874EEA9F015D952CB8FF88F3AFE834FC1EA1DE273B9C0048E45
E3E2AA57E4C092618B50B3C1F51521D03E9BA74389AB4613B0337D2C74785F28EEE574F18178
C167E6A3B5A5F6613FBE58B584A353222458B6E54AC8AA08F31AB0761E1567265FFF40CB3E75
0963F8179D495C226284125367D1AC5D188F5CA6A9FE0F25125F30353DF54E96E1F6C511C938
E100BE0C1B4AE68D4E3333794F0BC95D9AE9BB517E0D183CFE88E0483BCA95780FB6437CD3C2
BC3AF965BC6BC58D845D3046CE5D12EC9285C1FDDE314660A960AF7E4A7F07F90F950F06C77B
E9F26FA91F14FAC8DD904EAE790ED216E7CC22FF475F8F462E1A46BCDA71A9D65D07DEDC038D
00F493B3886F674983DCFDD7D760FBDE7BAACD78AC12F18DEF55886938F88B99AD4FC8A420CB
D6003615D4E31FF2942B35F72C1A1FB13C2B22625273F715E5D89A4DFE43E2047562F77E9C8E
5C2929BDC7674EE9BEAA8C7CE8021D28492D5C54768C002A366A862BBA99390BE487E4781513
B80A7BCD5D47DC23541C9A55B9455C53E9325D0D77FB0390CD7E12CE2E4E34581A4AB524A6A9
1FD3BDB9E07953447116C7E4F429A99FF6C4C11B1CED99E51127C30904BDF3ED12D7261C31AA
4833AC725F5597B3C1170A4892C3CCC765F02129442D491B12270413A46C92C9B83D41EADB08
C78037A1C8630599695F00BD7C8B298415403AEC630237432F7E6F753851CB3588E229AC8A0E
E375D815AC0C0225006109BDF8E0B496DEDD2AA9CFAA16286A4662E256778B125CB4DB05D252
AA66DADA5D161EF6A5971E9ED85C913D1BEFA7D862AAB7E16BC95E03956460E1F55AA7594800
600D5F0D1433EE8F0F0BE4CEC403CFEDCA52734645826EB6961AF0C4E1DFFA69F1930E196815
39960EB58BC386FE31F266F5E10B13BE4D4F46A29BA95403E705CA8DBCDCC03C273509D9A8BD
ED6E6118DAF7FBC363C7E784F8306F8EEB7749CC6D855ED29F99C7EA8B43378C12738FB813FB
825CDEAD8A664E1FADF11F7AB84FA7E4257BD1EF7FCBC31E2DA8A8582F43BE6AE0FCA6676048
4C5122CB38176951449919341A9EB60093EDCEEA347FF83A16278C37A9FF38202B27A4F75C06
6FE443A241B630149C585750E2D815F627A1254276DBEAE8182270F2699AC1E78C6A09767E29
6A646E5EDED4843D2EB8A68673AC5B81E06510DB64872547A92A4BC851E768F43DA053A6BB3B
E89CBEF166E8A3419EEDE1B97DF88A698C0F5F864D81B5C4F7AD97EBF78B4EE82CCD71A34C39
8DD3F74609C555B7653CE27E78BE0DE7CAA11DE78FCAC0E0293101A2A8C5545941291C56D495
7FCD65E36CCC57C8C9DCCC07407A11F5C9CB214FF508A5F617FF24F0B617004D6787EACA9729
6108B8B00276F3B7E28AF1DB998C36EF517C38D96DBCAF33DEB899A344A6C047CDD2662A02B9
4F39AC528A21FFAAFE364770BCFB995F62EB0C6D076F12241F72E4B284F085A3C6FE9263F879
AF8C049979F51EBF49314DD0331E935F94F2A58A107906C2265E3BD6D644EA75C928EE81268E
7DB0D2B61775CBDCFCE743EF1AE9784C4A9B2D4EB0D5BC2651D79F108306722670399D2A90E4
536467C00DE86FF4A4F4A51176ED721EA3A1C72CEE354C54F62DB4982A566307CFD320D6245B
C3108A054F44B3F4F61FDE2C84AB416D1816454430B6468C57D86C155218C6F05FAE1FE22A7D
A461E960C210EC6E44BD7FEA797C1CC6B63F5F93E75BF6CE42DD559EB1E97A8CD01DAAD4E9AF
2A544896F6E597ED16D6847E48539D0FE0C1DF99298630EC2B465DD037CA7617EAD304993972
4BB3D428E9137DDA6709DDE2E72E16C80CC960CB85F1727BF30845FA51FCA8D52B6099A65A0C
DD444DAA35534782AE347CFA7D849AD3A93749DB904103E597F6DD56E032025F59F7B724D1C9
47358099FF3B336E6D688B72BD115B86D6D0C54DD457B7BCE443524CB0718A82D6661FBB0567
3B86A3EF66D1981788039A1E26597F2F6C51D055B1DE1D32145D39B244C91EB3EFD23C3D4B78
5B96296ACB8CE21882B4814CA4D25ED88A3B6729890CCA8843C1E2F746289B4E3BF5196E268C
5C08E52670E875AEED4E9CEF6F45A70D6F944AA9518C2EC860D163131B66E61BE344AAFA0FCD
4B5AF24830DA2E9811C4024CB807AF29CE56A577666BB8A6AE62DD780F3ED028352DEE9B6AEF
748349F071F151B9B33A5C707D690CACACDC1FBC8EAAB920D11C4EBF40682732930332A7542C
002ED0E4EF2D3CC5A611A48585FC0097426F9710D6DEA70F1FFCA65B3D39C875369A91C045AE
73D2DE28B548F6BD8D0D76E874655E7AB6EF5BF9A4E08E12A1AD867FF1B70CB0F2AC3D198D5F
70C3A251058291D7F537E66AF56C87C11916390B7705821107C658D2A403CF1C6CAC79137505
D904A6E31F34EF23045F923AC40AA9335058AD760DCDDF43AA9B516652FB81FDE901D29CC3D2
EA99C42FB8CBB10A5CFC0403C5DB7256C7D3AD11934D3FCDCBDE7B87E11966FD3361210CC511
459CD82B61CA45E208A92EDC040CD58B2828FAD652AB3846C0415FBBC503C9251D7FA661FB8E
5FD167FD3E9DF8BB17A52D2301C21F974B16340AC7E431272B48895F837687CB41EE7595A826
315338D997FBA43A9F8A0A9067229537C85CAAABC2667000E6961F5CA11D60D3CB970D0E059E
7446F1B42166292D96ABAE83A185DDEEABBFF0D9DA54CED5CB12E782A26B7128F0DA66EBBCBA
7F45B6D4522A3BAAFA39D764B7C83EFDA777DD173720D41E0C494949372F9BE61DE175BAE4AD
0BF8D788B3D5032BC46E95821290CB6C665122220CCD6CFF2544B3AD1E11DDEE3C0C653181AB
E20F6A66A4E898EB48636A8D6087FB79477AAA5419B785DAD54F49CAA8C3427F2973A49A5B06
4767AFC3B028FA53CA96401D912A71514ABEDB68E6A41B2DC619041AE1B798C1D6D064478BA1
7C0D040F73F1D158C72FEF160D30B80A9EE8054BA8860F69F2241A6926737A040E06FE294544
A393FBA38E9D850ADAAEC2AE183B12FB776C82CB3460DB4CEEFFACFABA629C7A0EDC662D8FC4
8B59DB18E8C5908D491359A9C1DABE1418B46978924CD0028F1E19399904737F41AD8DE10D42
14D05D6A4DB485CBFCF4DF0921E4E629AB834A695C317B791BAAF902EC59231B856E3E646868
CE13FBD5CC41B6FDF3E4D918A02EFAA20AAB7D526A04EDCB2EB388A2CCBCEEDB9D0B0DF1343E
18317F46A6054C2BBB14201A92AFBC452C760F16E12CF94C8A901F50F1263E019308C5AAD246
CA64570B122032948BBCFE1152937C2C32B764F78BC248174A72A706FCE7487EE6C605D48EAF
C229C9206077A3F0FE0868AD5FEDAB9A9B07A7D7D973FDAAB891509A8C8C3CB9862BBFE04CD0
C3505DF3EA8A4B51981705B38FF503ABC17FD88230BF242FD737314B9D7B613989438D9E0F71
D5CBEC77F1D93A517D9FE08E0AA138D3AA55C232F493CCC1F13EC45F2E075BB3A95F0D4A32D5
DD2176A06BCBCCFA8D0FF2E2200AD6F2CB91D325EE4840AE4A27C8709EECEDE5682C0FD5D94D
570790E304B9B4FBFF08852D9895F7FAA0464F625E7D51F3FB5424EE25E89DA33936DE5F313D
13F3A5C565E33EDE87B22CAD211EB58B70F671F5A8C473A15898EF3D35C0D496C62B01DDA196
3999D313B475DBE8AA888A4D66CFE1AF9C86707D86267AB18FBFEDE68848BBB9DD5AF6A5817B
5594C6A74DAE1CB83EBED616F7BDE4A43C6A3811A7F0B6FFCC08894D118F53828D5C55060EB0
ACFD818CF991796A9439F7339482C925946A5E5D7B55EC7C9F0F31DE88CAF20686FF27415EB8
3022C7B7299F23CEBF34A766A4BF842DE6C113C39DB711A6291EE66ABC42E4021DFC43D91AEC
3AEC56FFA48FE9D555D9C435EE363533FE2195111B9483EAEACE96281B83962FA3F7E0C57A2C
3CF955DDD8774A263EE61B2D43AD97B0CC58D4657BC27AEF767215CFE5C9F7A87DF9D439CECF
6124BAF26E619E7D7A0AFFB678DF6EB3D663BC9F77AACD75FABAD0B41622C3D5AC9A78A43259
57155F36C9DBE2D1DFA81BF0E11E0512978BC8E74D30B73FC9FB783539A1C1321B893B4FF978
7084185280967B2D2DF72690339994563B8ABD371FFBB8323C4105D304BA0A184568DD1F32D8
8AA56724286535C33182FB59830F88E2D878822B1C0202B3D34FA70A1525E5F06BB08844ABE5
4E98CA304FAFDC6DC9522871EB5E6C838476CF5C15A43C694D7AC26B04F8C0DEAF7F0CB0E44B
0448E958E31374DE9FE5397530ED700E78E09EDEABA6D006B5E82566C399AFDD754EE2638ECC
0A2F59A1557A084502FFEFDCB7E9B32AC98EB2750038BAE5487DC255D76461273FA3708B8A1A
F0397A2C985F45A26AF331286E27DBC1E5624C7EB27D87A94A8BBC5E2A67F78E9B202C2298EE
390F8CC3581D407F555D2699E827058940D1C1C69AE67209D354DA032287F55668FB6034F5B9
6919FE361FE6870EF24C914A6A1E98C9B1BDC745C71CE5D6111E67CDD5B809B8F789151BAF3A
208E949C8C7F69BBBD5BDDA2958E444D960746BF955FFBBC82E88724E54A0BBB4E86085E079D
60472B7D9E2E38B58206D7EB32BF5459005BA2839A007CC41D41C019713F17B1E209DA9A2CCC
AC58A9B0E39BBDBA1C0E4AA0EA12349B64271E965FD0B5F5D49955034E635645E76DCEF521CA
CF68DF4CA06557D0900699C52CA3286F682215811FEA8C8E7569BDE853033E165BF1670F1B18
1988DA996262BB0326EF9591BCCDB4D4807686451D5842D7A79D5E5F5104528C89178E286A41
15B9ECDD36CC3B1A08F31C54A2943027DE0114EE35D096379C1697FF60336155741CB4669B3C
A41C6EAD258F7D29EA3B4C932511F697EEDA22B90C000ED5DF8170F0E189B11013E3852953C2
FA2FB21907C5E19B8343FE43529F7219FECFA8B4A7BB3E01FC74EB2DC148940E332D1F53F4F7
226C78B158CADF82D756B21E96718DB77BA7ACA31FD5279D19B1CF40690CF3F7A3624611BAB4
A7B0EE77B4E30A109BBC1549D0A6F9B6F7363F73226AD19B9295824C1523A8CA0EFD878CDF81
E8DF64156D7F5F068730EB304ABEE1344A9F8D366D0540E913D8F79E9DA8044DE90066A63979
6FE62569C78AD5E52DA7853B5CD251737FCED1E17E7573B5341AE6927EF38BB57A84370CCAA5
06BF9656EA00C7D65AFC6A7C625342F369BD932745FD4EC25A5AFB57C9BC0C8C82DE8E9E7390
B16064EFFFBD151D9E169F42BBF5EC9DF52CF88289EA9D829A29A561B03CCB14BC6A0CC6277C
D53524E94C0AA173D4B72D3ED2FD7D7DC7A25B7CB9B768310B885A99480337CE2C11FE903D7F
C5B59376C93D6C169D25B9E8A2CEC8B5D971F77F0029B61D36D9C46A5FEA7D49FFE0320C3B83
F5A7DDA48EE4A5E15721F77812C5F618784670C92D7236CD1D19248FC8C90E6C0BC876A1D9E3
B53857FD3EE7790F486E7EC4DD3DA944967D62F7E8D706A9F6EBFF86B38A5300DF6F54441489
78453351BF8D230215D35257BB54A702EFEBB4BA90F53CD1346909329E92E064710259FF8A33
F1A9CCA5AE5BFDEA62876539C0AA79B2DBD95F0B80AC51842EDFAC8BA6C79AA9F0914113CA29
565384571B885AED9FF1E2DF3BDD667514A78EE26B59F96261B6268B7AFB245DE6EE930943C3
D52C238EBB6DEF8F6777DC9840D0C220AE81755C742C3CF42F6CF3C33A2C6A4FABCA01EA12C3
7B2CD899CE780E434592F23C7FE96F878AA5F196D9A70BB3D544247A5F295042842181D78F1D
D58AF09D99D25F4647BFEF59E133D4257AA689BDCF248532556E6A4CFDF558BFC1AF8D099188
9AD61D8BA10DA576D1366BE4F6B0203899F9A02FAB34E921E9A7B09C2D06F8C6600B9FFCB187
D95C1FACF73D1ECDB28BD4F5143BACAE5E193DC0D196E16AB2E4D3168A7624DE988E1B25E564
06F12B6846C66D7EE0771E71BE78E2ABA637364DF774F91BD43E6608359B8540BDF22E28C34B
AE81AE5BFE50D754553CB6858A8C2FB7DFE840421B702B99F22B221455D28AC55F2B8B01E5C6
ED897D42FE45A36D396F2B263FE51663F898FD747630DEA134D758954D52A44E36C743DCD583
1F732A23D4AAF49ACF6BCBB3884A21063CF0A007E2516BFA71683E34B361D4456F5353E72C1D
B7C693C9D0357AE8179A644F2F373D5C763F5E6C8C8B487288FB8377112784FC50B31E39DD5D
69D14AA893B55534374CECF619A98B47EEF81C8CD20BD3B1838654F308FCAF94504FD5FD8E93
F07A4760C182651145778990122E2AFA7B5623061EC3F4D7D9F061F2B7A7A09A3CCDC33CB160
2093369ACFF1EB1C6DFD73DFD67A4AA978BA1BA496BC17EFDFE7A8F533486C3B69DF01BC5A20
230235454F3C41B0584D28F6E8A019DB4CC78D5DDC5D9D8A867B7DBF3E39F7AC68CA55A40D9A
05E2E385835C888288C24CD9FC51AD2250493122E0302655C463CD7E1188B5081387C4674BF1
6EDD2C1F1E49B26899DB5E1A4CB1BF6AFE14DD24400877F8C8657BA4D3227C767C1971BD33EF
70472C2542B60148FC4AE31035240BF578E3BA4CE8A479FEB4AB2D06CA63F8B80CB0B592B2E6
977DB02BD2D9F81335F13F803F5C5CAE420236E8C5C11DC4D67C210CF2694B47E7D71B47C29C
280061B9CA2E4FD8A303BA12AEF815503B67955F62BFCD7B2A2EA4E31F799987BDAD5D028B29
EB1D91BF894A8CC7F4751D15D11F80C40C0EAA38AF5A9CF69D8942A21352E3657C3657D92B40
985EDC1EBFA807C5285A74C47DFDFF79C41AAA22826EC0161E3A4E6249664F7B7F52161D0ED4
630CA4CFDD6D68FE2B4B7A4D64D7051B2C12CD0E4DAE0F66932D7881D601FB62F3EEAC552E65
4C2DE5BDAF65178EFAC1D91DDADF43980B1A23D5C3B5D38A39115548B7124B8BC5FC8F45E15F
32F506EF0D7DCF45C93D2925829133A732A858CD6F26A3546A613BC1024A8D31276E529322D8
075BFC9E970415940F96EF9BE114AA3C97FCC08A6E67971A6854F4CFDF8F6B43A8D9FCE53CDE
AA81AC6F97A3545F9188596D78B6A33476DFB838FD6C4FA785747203133D4518AEE00C184AE0
FDF5DB850326AD9FDCDB244BB4F659B66E3319334F59EA2088E4957477A5DEFCA2D4A5FA3E37
FBFED1384500784E08FFA2F5AA417795A1D2FE54822E10CB284515B6F394E7681FD911510BD6
8EFA22957930608625775A64A48D0C2492BEB3EBFE2F85BB6EBE4A5E409FC7F14A98F9239306
C5EB3E6D04D741BF3DFC478BD03CCFFFF848E0ED18E47BECB6C55C39A4662283F3C4E2DFB76C
AEF16C4FAB8944C1FF6243E22715AF0B4DE2FD6A442EA56A5C88A6B93C36EBE522B5C46014BC
03E86167481D599BC3FEEE0564A090E43571B0DBE09611482D69A250626DCB909668F145F9B6
26F9A7907F4A1778E8AC066AF5B9EE025172917726CCF4164B1E0C7E7C94E3B7DF8516C78B1C
72F6FD57CA0AED0E419F2C5DD1FF24F47438C0E0473EDF9B5FCF277C84D500A4FF055566EE7E
CBF5707262FDCD3C7A28F1D04A4333374B6108C540C64A0CC773CC90D5883B7ADBBE0668A38E
A57CD2292EC92602CF4A0A70CA7BFDDB955D71C02AA12EFFB4C365F7AF85F2E379B2A5E80BCF
653CFDE715C7DB2FB98F3CD3AF72A94DE7AB989F2D38441A893934D396C2A418998A0F515AA2
6914447E3A9C025E8169717DCC63FC878B3E825FAF7DA165662751E0811304ECC1A7C73FF806
380DAC5D61611388F37D7A92DDA1C535A3365A82227F999E3F3DDE8BBD72A5232B3332E0CB27
5312CD28F4C840C95DE6366E02817028782CE6EE7C56A004D6DE4A2786060FCB6B6D05AFDDC7
43C210F6F0458603382C1BE83E61E9A03835C2F6BBA1A4760564635BE899F75BD23BF6F63637
1BD2238B72331220156FDAF0A5D932D24829EA054B6B7910A738C03C231D1DBC9CAF0165D409
1A31350DA275976924F83CB4187E618917B56FD9B881BB25A8D7F8741B407A89AB26719DB257
D9E6B60C3C25878C5896094DFFC58891FC7CA3EAEA6AE4876CE36B3D3282C4D1DAB373534C26
1104D235CA94C08A9DAA039540650FBB97BA61D5D907244BE0B6AE1AE2C315FC7A13FD194960
922E5D54C8528E8AE6651E9B36D7266AC9058AE97EE0AF5B27B4C045AEC4D2BED7C42CAB914E
1068CC8538861AECEE6243B3D38F60AE09CD655DA05A2BCB1A15F914A4B819D1E173C4ABF8D2
5F3F29B45C4BCDCDCBFF3E24ADD7E76AEA86675FD8E8774948A1625DBD5EE5FEC0D512DE9F2C
A7E91B97AFDF4A4BF242499B6D8F04766B0B8E7522CF8848A4BCBE382C39CBB3BF393EF10347
F18A2E6DFAA6842E31CB9EEEE419C762DEBFCAF49CD7BF5874F992A787030817E9DA9981B0D9
0ECDC538EBB1812B88C96B6E93B350B327EA5D7378877AAC9D7129C150C571ECDD4808F02479
BBFC87F1DF80DF86ED6B573339B69BCDEC24FB9DF93C871A6AAB8FA236B3D39ABAA1404321D9
03297149923899DFB447021B9510420441B9FD8AE89E2667441D7670B4061439CFD8767D30D2
D298EA15C1AB2DD7B25FA514BAB9F714176C8AE5A204BB167CDB335B132A35F6BD14B70FFD70
31CEBC7E180924F24FC5417199CF211EE8E6A55E094AFB5637334E8D42168DA0DBCDA3B25336
705988C929EFE68A56FFDB156EAC310CCE0D067DC6B564634A71D6CBD6F9CA9F868FD2AE8877
8D2AC52AE78DDBB7FA9C939DBA897D3DCDE0ACF6E04D59653DF22BCB70F9FBFCFEC1EE703E92
3B07E0D41370C4E4CF70FF63F8C79C5C6438F86725A50E49E3EEE18687EA324E651DABAD022E
8A783C4C10CF84F0AB482E5C977D4880BC99ADFF1C8A4C5E9E643FF55128C306CB16EB9D23C7
BFFD19D55EF59A6F3608DEAD9DB7DC3931C48771B9AC55368E5F8A857E6D5C118DE26D1A1F38
3A8A5BB9A2A4B4C0958C0437FC96F264AD36D1A0ACC37500C0AD72EA86330E77C8518A74DE75
EEDC0F3834F03860E2C26169B8C02752DCC5824B028765255026506B2DFFEC0A1578CDC55F15
D471C6481C08A757EA55686352D2A7B69C3EEF57C630F12E9B2AFF398671240DC216A29C5EC1
7D44E05F1A8DDE9076DE92456E969C8055B85A3C04041365EC35D79F2C05ABD075F14EB26EEE
478DEFF3D12FCF9937DD3901D509B695F8C1FA590D977D78DB84B2849562C460659842A7B90F
8B21C2CC27D642586872C49B534D299B3FB7E14D70A868138371550F9E021A74D2A6E0F67D90
D53EC408502C40D8DC51EAABBE86FBF5572A2A7F121BEA99BE0B0045D2C516D10C9BEB813E16
F440825A77D4DEDE2C8B49C4AC5B71C11EBD8F8FC4CD73A62E47F7EB212FF0572281B4279633
2F70728D9205CE38570C96BD89B3F2A3EDF498CA83A37ACB4027B561DE28BA37B9199D04A56E
14716CEB4A4633007637B216B9F6BA2A4ECA8A2DE0CD63FF0944DC63059BEFEF0DFB53A48EF6
2F54F15BC0355356787923ED729A782D962B4D78235DE8DCB31892638F51000F8981B86BFBD8
53B28929F896A0530B72F075CC0BFAC799631F2E51F474AC2F98E6E2FAB89C2B3890007913BB
9841969B44ED76D4E888D9B3D9841DFAC5D41459DBE7233745BB4E79FC22FD7E466601153EFE
3CD7700AA86ACAD07B0692CEAA6B00B20D768C5E6052894C5915607E9CBC49F8FE4F6F3C3304
5FB4F0EC20A3C948AF28E80FB67F379CCC1BD019B339532191CDB803CA9676977ED9CA01BB03
955348175F8CAA95A0714327D59B82444DF22AC4EE8F5049C91473F226D4F27CE402BBEA6F40
6CF21872B15B19AF6C0CDB798F806994EC1AA9056637B13912EFFA08DC015BB67F3CA7A4C82C
5E34D39D88CDD5287C3044BA95F2F75F6B6DB9F1D60A41FA9034D91BD9CBECFC7CE7D76F4048
206F5FAB0901F7CDD639ED068CC82BE17C35F6DBB8D85995A63FF69E52BC0A01261662153EC3
40FD4027EAAD5B1B811FAD9E16663918E46E983B02A3AD97EE543C4754F9E9B6238295E6477F
0E8133FA12360B5FE5ADB0389778F4300C11A26FE4C9BAC6E234AD26F855BCA28B49A3BD95C0
758587E98FB123C1C80F82573FB4583E578BF6599E79A9090F35BE2C9FDE410EBFF05EA76120
C7D52B3C47690264E1DD276B6AB08ABF52B30B91735B3C84659115BFEF8B88C12A7DD1BB0898
FC1D5782EDD9F371379A8C9796CF3616A93193A06152DD3C8DA6EFFD03386E580B8011D2DE3D
B70458D957ECD0A2DB427058FC80522028C7D203904913B0E63D26D60FC42A2C1E9C53B41BB2
06B324121347C6FC55E9939086CF26B3DE1933C0586ABC166BF9F312754704645D4D29DFEF97
8D8AB3411EB295C500446D3E2A62D6738B1B4A9F20EE6B3A7C1C0641B5502D52A28D95DD07DA
8FC8EB96A234565FB0B9D82CBB263450F929C9155D3D29AE2A75EBE893D1EB74B6F0628F5BCA
4C90A7DD943DB0E99B178A0D83524800B3610D651475905983E84F5905F49B0EF12D880CEE22
2E913B5BA51BC5532AFA722F8EF9254C49F7F62F744D580BFBDEE17D40FF9A04AC2BF64016D4
673A4538A66E52238B4F4C1D37AC94F1F65C7BEDA2468A10B0DFA321B18C84E378CDD2555C45
3D62C92C4293BA0AED6733AAFCADFB488DFBE545DE91E412C8A1AD04D959C75262E92A37C4D1
BB48DCDCA4C8F6D9FB07A9180B6F9C56EFA9AD9AB9FE48ED61D59C5A4B0FC284351D439E7E50
3E9235A30863408FA5A99AAA693CB8AEBBA6EB8476009234BE914CE235BC206D093200D35937
43EAE9DB40F639EAB16FD3A7D049005FBF938696948D82BC25674C69D1D7EDD0B6D51438183C
30769CA3104EB378B82BCB5E605D1E065A11E17892E0A32EB07FA974D3C6F70C0B657384AE83
9F74C622656EFBD3878A7AFF1A01A2933E47F366953BD28773878C6C999F39ABB27048E53970
A5C88A137C75E49C91A53316C5F9044464E40C1EEB3EBA35762A490A3FFE8FC886D299E9ECFC
FE553DBF334913B30E03E5BFBD3DE06207BF47CDAAEA4CFC8147BBFA154D6295BD46AF68AD29
8B5C02FB0569B6CA521361427C55D456FF6D8083417F3BB3EE883A957DD0E453A889D389BDF5
74516BE147499CB02D9D760B62DDE4EEEB70A7FDC12338ABD01D709CCD256FFA5F62A7F4AA6D
3C7F235DAE276553DA64993147B5B86F62C473D0D3ED14883ED0DE74F1C623F3E6249D6AF157
1DC177D27E2C1F0BFF7ED9DCCE8FCBD37BEA8501AEA6C6D7B259420BDFB804E3BFA4E339708D
19FCA748D8ED84050439BA7F5A088DA4802FDC46B95A99959E95F18407ABE239701A6FBA7D6E
2094641C509DA66FE556747A21B0D73E3E7E157BA4018295EEE683D0FBDBFD52437EF581B00E
F2DD582661A4A99B02F6685CB183AC801F038E3237EB22F9508C54B34E06A1AAFDB4FC6ADDAC
5110D2569D4921EF8B43C6CE363E642951BADF00AD01B56D262CB0796E6BC3500FB760ACE1E7
C9FE44D6816C84063B7AFF0EA04D918D048DC193FC07BAD3BB8E7A178F8720B68A80027E9FF2
FE4BF8F601DE48B4C863AE6A0F5CC9FCA4614FB487A0D7E42CC17EC429E1094C06718A4C01C5
32CD08503EED35BEF2A83C86E85A8E74CB9364A01D7AA51AF9A7AD59E93B78E3D119E400ED46
C608C71E33FACD29E424123626B535A7EC87CF2C12D196E378986732C89481D88F14FCF9507D
CD50834110C071B68860090E128CB525EAC3B519C2191DCC7D39D587E56FB33AC6BB2312EB21
7D08BDF9C9EB34CE910A07477031D4EDC8226E71421F6AE90BFC43C7398928DC2FDF62A54832
4C99E740B5815CBAC9157F2F5B51A46A1CF6ECB6A03753E7FD49CB4A04E5E8AB19C4AC2FB506
18BD9F1417FAF34225523A6AF9F9B23EF982831C5F1946460795E0B5970B383BF8ADDEB045C5
4E9C593F5E1F9DAAEF7DC58BDA2819209F05AEAC4FF234E3BF47EC5F496C75322417A96DE3B7
0C5096932DD0026384C3D15260446292BA7A0CC570A29A6B31B7A37596DB015EC0846BFD0A66
4CDA0329E8A452241CBC7443B4CFCBEC48B94A1FB2BAD1073268AFD3231BB21AC37602DBF565
3780215E4108E2D4F7164B12E74824397373C405184888673573B1F2263DBBCDC07CEADB2D22
02A18AD03652F0355FABF0DF08C30278496290306F93BE7E42F663B51E4F0F7E49D3292370C9
2B45BBB7660748CDAD641B1C2D24BDC33DDD9272C8BC6C4C80FDB1D6476AA6A17D0E35B43EF7
D3FBC7828F0209D6F83B04AF1DF350CE10A3AF84855BB90A2FDEC60F796D5A20EEE1B323EDFD
E3D69950CE90894184246DCE29499C3E87EFFD5630AABE1442E2399F0393F21BEB96708B6CF0
B6B207E47273BBE303A35024CF49899328C87191BFBFFFEF9500611BEBEEDB27933B1F53D6BC
805ED7C3271FE94DCC7FFA9F2F53810CD3D08949D5AB0B144A8FAC533BA3EE72BCE2BE5CD880
34C6303C7D323FEF2432EDC947CAD4AF6B1C38BE9BD148CACA12323F66EB57C3096C72F8268E
746CFFD4EF80DF5ECBCF522D85AA41166FDDEDFE8D843CB25B9975908B5DE7C4DAB8FFF7B98B
8C24EC1E84771270EA877B2A5EDCE15539685991971922F50404B14BBF10E66264FD8207CF05
0C7C0311D387C62B78AAAC2B969D315F4A7963A79F8E724F5EFA019025E7790E6A5C902B7DA8
57438E84A9BFF679409DEDF5A4A0F670AE4536F05023A9E13C71978CA70490706CAC13D790ED
4481EBBD8952F759A038D821BD0027E057837754BACBB838EECDF781299A2C349E34578B0322
50842CB37F3726A67BBC8A8C229262ECC0CDF375EF7469BD85327B8735550F942CC55CE679A0
AF078126540BD2D4F9581707E67EAFE4A1EBCDE24A2AD06535CE001FB7D2E5F59C2E6B8E3BB1
6EB2C863DBBA5E781C80E5C80FD9D2E7AD5D11E809B842F13450F4075C59648F4F59E1B5B8D1
33BD28EC16D32B6230CF626E4D8C76F1E46974703ABB1934D3720A9B16AD752B34C0155C2412
E3B0B4E917CF5111C0A986C361BDE767C6262D8AB6520C7F540C75C2C92B134F1DFDD0807D3B
FFF5674E376CE4513CA149BBD53D0EC109D2A8B7ECE2F6CD76E9B07A249BFE81CB1AF012DE45
7337786A7EA8853745E001E3A07AA41FB4CF2D0DC29A779EE9DED63DF1251DEE748A69D71596
E1FEB5082D14044E3B74AEDBC2EF7A288C671E7A7B7C43E0D8F3ACC76505875855DEBCEB7DED
992273CA741CBB7073C9FE6182865CAD971A7196610134C314826F2F12CC4F2835F269CEC7B8
A046DBC7568B2CBC56CEC08095FC771A9B093A4DBD3B6E7E71B1AE183BB5428BDF018193EA62
A99AD8ADF581BB60295874CBEA14DE08F9A9D86C5EFC49AA30ACBAC07F637B2C1A022978383D
063E12F17FA4A20F18140FF565088BE1714BC19701A15166DE32429AB505903BA52E1EF072A3
04D1448755CE00DC7082DF7D990635574C9A5B66DAAD0A45605903D73179E0ED9E2630F43861
E22354EA16418CECDFDCA05201E2F75AB6F7B3EAE336C4EBF7E3851CC097E2105BEAED211144
4DE983C6B82F11B32FDD61EAB45331F7EBC1F93CEF31F223FCE6A349D8969651AB627A481314
FBA2A3AA950327257F8F50E69E1A20943816EF41225AE1B76811C5AF88976C4B4E0274B43A58
F63A27EA8958A3F5D875448CB57ABBEB4859668A11510897686101542A0830AC31F076C5ED66
26ECD9EED04AD3E762E9318C7BAB07AD3204831F57B4F10DEEED0895E24668AADCBEBA9257F1
EC419111E7257FCA098D3CA89A1DED16094D10231BBCDCAFAC1166C08A7007749748E8C4F500
B9B87B84E8117042575A5B0D50652355DF6CC61CD2C785B1C6811DB2E9B9B7B47266B4A1084B
E1F3F7D188FBD9494CEC5116FA627C8069950113F7090936F10DE3D71DE1B70AFC56B61EE245
EF7278860B64113233A8A7817A0CA23E5F08370CD48548E4757478B057A0AE59E9CE81A4ED7F
F3AC3D2117354CB0A98623705DEAFAD89CE0C5B5196776CB5D437920BB5C72A8A718AE629B25
E253C75501555420621480AFA2B91B756E967C7F24E3005462CD1496FB58F34A42A9D59A10D6
D68BB3C42566161059DFBBCBA569A089D9C1DBAEBDE651B2275D59DF0933DC21D0A902F21C5F
5037299C6E8FB9541691ED13C0E36A5AF58D7B8BB360E8BDD2A77B24138B88A5AA2938066FF6
B098326C2B43853800EAA4A304102281325ECDFBB2BB1400F09EDEE97AE812728CC153F7EABC
4A7CF7619A74B495FC82B5A89A9E0246F98322C2266BF838BD1DEFB516C7A371D91BF573DE96
F05001EC48FDCB9E9045AB1FC910F6B9344ADB49C38EB75023016E2398846602E2FE7A07A90C
A86376FC125D8BED1956B897781DEF6EB4298204E4B551EEC3CE13B1FEE5711F10C0C8232CCD
533F82317027A87C30B91BC14D91E14AD3AC92177830435C27FA8B8F8DBC75C04CAB0181455E
AB3D1E101B14974A6F4FB99C87ED435F380F2087438B4B371D1E6113BD6519AFBFD9244F0384
DAE185025AEA6457401F54545E34941201059CE756CF7FAB4FA583F986A8B4D559E834EF331A
6833971C89F96C58CD5FB3BE135CB06F658FE2627509C8CDFA91EDEB439EB386E3BF9BC4DC4E
7290A2FFEA0EC25C0B9C021285ABCC821BEFA442C87CEDB0A6C2342C933DD46116CA786DFA3E
E43A7F3AEACA49E4F3A1D404E59EB35611CFC68EBFB5321EE4D871B206AC8692930C892DD7CD
C7B31BAEA9A439FFFBC5F9D3CBA3E71F5638DC6DCB8C64F763E254C327F77352297BD706F3A9
B4ECF045B1F132EF78C2967E393100BE57AEA4B6A5A8CD51B68BC114AD91E1E43512B8079834
464E4A9231CE839825CECD400F71DEA1B4DA2010D89F3FA8506F26888F25564F6F0B5864768A
BE3D3E857BC265FB6B99E9546495E4BE3F7B3BD616EDA6FCA19F05B84DF96A2B7174CD315029
082EC03D74E9B16FDE55E6C51C86B0E6C0A1875275FBC8F24E08EFF26BA23F0A963F7A40C359
DF33A2731F13FE2C905F6F60ACB43D4D03CC63725C85A406108089C33D82E1AA107CCF7F0517
BEBA564376C21CC2589DDA7994CD35739722509C630C4F8895BF3687BB8ABAE73B5E1C429159
94C614E9876B7A1DC571C06EF000D7EC59DEB52819AE24516AAF054BB91545310116F9C46AF6
5343853F896668DCEE475899D08F4BC405EFBDC9D455D2B48CD23D1DD4E40B8948FBF834132B
83BF7B950E2F83A0915CC277D4951B1D9BF8C9D7C2900ED222CA89E7AAB7E64D28B0D90ADF9C
470AC90AFA395A63964604653936A618DBBEE33CAA4474ED522ACEE561047DC163C784D5B8A2
6E04256B16F96C63EEBA3B63DD8CB056834DF7F846FA32E32F0FFC14F074F03891816DE860F2
01028060C3043B391FE9858CF29622D55418D67F5E6E6C718F1FC2E62DAF1DD4CF79EB95A16D
9C3FECCDEDF261F9F41905F8B8C39B9BFFB2C0E8D65EE4F9CBAE52B55FB3BBE107C08C3ABD66
8E91601C849AF2E034B99DE6891224A561B7449AEC3D0BE475991F52211B9D1668311AAA7AC9
185E78F90FD31A324B6C820F7F8E189E952CD15E57D475430E1BEAF7537CF6649E80E35DF16F
C03A71EA162A19B7D29617BD5AF341E7EC81DDC338606FE0507649BF761ECA6F72DCD2B21797
32BAEB51D65779019E678CC846F184BAAE95550FC430D6C4E315C1A661932E5A8C4D3D81ACB4
45E2B0B807771E2AAD8465847FBFDEFD7209D10DBFA7FAF2C3041A678C70A1C807A6F82EB448
688C8E9A6C968F7F9F4CBFA88505997572CE6AA228CAC0A80F49964957017E9090BEE36C566C
06E79BEBEDC2DE9A7902750E1D25F2B4A51E10221B4EF82D8F1FBFADDCE9F9682F3843A581EB
10B55CEA4A8EA1E2F7C84B6394E04EA4B6BC9D9AD344C41477724A196F73D92B9C4358F73A3F
882F4452045C22555127BF9CAAF52777C200D67986227CB17F94A118BA663428AB3FDDA95C35
9A353B4AAE31F94B04D84A9C0C699407CAAFB272AE58EF328E9065B57C33BC9BD75B35E4F7D2
A69AFFB2137A0947573D52972B014A28F14700F0FC2AF0AFB71FA3C038A4FB5FC2EE2FC65125
96B42D3B72A612B86263862BD3B2DD4333758611077474FAC0A722E1D9199D66510A1A86F807
AA0DE71C13920D5BD7328874BF1A0E2B80C6D07638F261AC24DCF7485301C5D5CF0A8B62D646
8817D57B9EB835A3F9966EBF73223CB5909A1AE2A85BC90F012EE26B484A40C8A998ADA321A0
FA9505D9A09C8F61D708E80C7B5F47599D12E020FE79D63BCBB6227E4158ACFD41870941FD77
4F6525B78A6781FB50519AD9240EC7F31C1B85AAD48745EA2E58EF88B890BF9C5CC5910148AE
D529F2694F1CEC8B0E2C30952A4DD9221D53BA846CBBAA2D67D64EC25DB97FEF8973D5120793
0FE5584CDE28A273468ED7713CF2E8865DEC285E20F49AD3E6CA4E43908A9116DF1BAE41BFDB
724B3BF2CBFD255E0EB69560B329B7EEA14BBCDFD0398C663AB9C13CFC7898C674BFA207018C
D1C85281C4BC995B16EEC777F51B0D1929100553532C4C3E8E71ACC6DAF2193471704D3FB92D
E494E89F81BBF7BB700D0FE46D9A21F9CC6BF251AE31F40334C66BD40F801D02ED63B52C3EC6
A1303D659EDE330CD53DE8502899EBC6DDA655DE3D583104E01E123001BCA6FB3BA5FFD4F1E5
06CF7ED59FE3F991808B2272B1197210E5EA213B3BF7D6A2177CCA3B0483447BDB44AD2C80E0
4CF5E368525F8D6B9BA6B114A4145C2C8A69311321C8D5CE682F2E13EE4720E0568EFD8488FA
F57760A93722DFDA8489EF4963F2E65978ADFAB8B9C9C8D9146180B92B3C84C725E1F50EA135
004B64797CA6C6A87C95952E8F5D68958B644276D106E3706AF153CA270F159F6F8AD76F0B9F
4BE493574FF549AD6AB909D42E5718424001D8AA17567DFEC66A3E0CDAF98C89E56A4692F0D5
85B13E8C8E1DD4A5801B1EEE8B3A333B63D44E65A2C50A1B46615AFC550390C1668EA06AB0F6
F9A175E408B1568BB470F73A9BABC7F82795AD940615701EF5E2046887414770FFBE9C86BECB
EF31DA6F294FAED8E4F9CA084A61915D2F7194AD578FD5B9E01F4C23027708ADD4326FD70B48
D0CBF9B42DF2860784859DD9CBC707020C3917D1920CE164A671D5E09D268545DFB9D2555A1C
7B820AC802007C54B403E1A6F9553E6CD52C64816E788E6115EBE9520D57AA5D0278C1E6940F
B80959941AF78BDD96877279CAB45C9EF7E47D90D24B5B3E0869B769D3A0FB03DCDA79EE3A52
349F3FE89204AFE517B97455EA1B056F87CD846202593CB7768DD89321AF3DBDC0C188DA25B9
699CDE6E0B1928CB4060F09B4F6A6C2B68700BC14EB9FE2890FECB5E389E7606186D4417F5F5
A6BABDF43C1352F4FEB43A99698ECA73C7D7EB93FF5D38EBFE6D102CFD0D986AF39184B4E007
BF65131B6A2DABD1593020E2FDBA559E939DAF7F6CBACE2176489D45AB860FA4A05930CD7718
9C67D4B72DF03FE8CF482419972621DE5F2F0143EA14F5DC08463B302BE1F4BD73CD1F6C5B17
C74D7740C802CF197AB3F412B697C2BC8F41743EB2BE55E238DCDC6A0253A72E63479DBF563E
6A161935F77F0E5BC5372DD1F92AE1763E05E019B47967809D42709324EADE06CECD85DAABC4
56D9E903E0083D3A74D5CD2DF30BF1DB1477A6A71A55A52359F4940F2C339BDB6EDBAADE3E61
4D4C7C36FA2B26ACCBF520579DF89A7239EC627869AEC628E7F4AC09EA132F7E2D030408DC91
F2596C954A9C026FADCC416F1E061B48437221B50D8A4B735C91D6E8D2937E4454B0E8D1F553
B84A35C43E1101F497F5E429D6E0852F011213E7068D53E4DC696F6F7FF9637D3AC5ED28B0F8
B55BAABABFE8E9AA7FA60172450BD17B615B1B89048FCFEE829552077ABC1D30615C9B572570
1CB39E6675404C8230BA27395AC8B5444F318600DDE103D3039CDEF4650E68A9F1280CA84AA8
CF87C652AEB45CCEAFD1A21793385A174D4A5A5830700593CDD94D61374FF4EB563EEAEE80B7
61230ED61D06BE11FA574DE0AE6C3452583AA53768238A25F570EFF0AF5F5EBFDEEA98C85AFD
A53319182611E3E6285659EC99D27A718AC5A1CD7CD80F2C97BFE9BBEDF6912A41A171EC583A
0EAA4AC571B495AC78B275BED49EB32A0202A07F1EBCB0A89FD2D1CB6EC43631E8E26869AA6A
BD775F31E1CAE5158F904A0C14A4EF72D51E20503FF7814C717A0F9B28AE19897A448D890572
5DA4E40F17F6D7978538095ADD5E820E80DE9F261ACE43D77D4BF97510F774860E45037C793C
28915B01CFBF7C6388B2E9225B0E2721CF5FBB52BA2DA6BFBC11D5153ED1423FABC05624B54A
1A60235EE26E908F63C52826315F1AD84FC79DE23ED793CC756578475900E7A9BA8A812E06D2
B9721556483FCE01ECDB7F83190B4A6F2EB8728F5BF941A5934C960548E4A8C0D17F67083866
07A0502A1CEB0CF8EE2BA70D0E0B350019BAF415A66EE50EA8A8CEEF78AD242421D7397C06CA
F762F6B4BB54BB3B8484F398000F0571F3C9111E96164AF8420A7AAAD2B6B5056EC35D0BD02B
46A7E007E24E1CDD1631D343856DA9A4B66EF36561844B16E6BEB6F08B0DC8DE04B04364335D
6657FF916495C3F9AA5D87A2E455428A2D489F70C2AAE03B64390A6E083094E925F75F7F2EA2
9A44C76EBB50D62D91FD78C3035CF4BBE13D3D7205DAA28EBBB258456E2838C641AB51E16525
94C92F592FF8D31D90C6F179E067747E9D499A5E0FCCF5C16753BFB70A3201FDEE641C9F45CC
FFAD879E477963C8D89162195474EF984F1ED3D69369905A3D55CA6703889213FD8CFD7B029A
3BE8ADAABF620111675F6F65DF5F5B05C635EBFFD9D6C573B0D6217448C881A4D25262CEFDF4
9083E775589A406ED03F8B0038DC7C47E1B484DDFF035994F4A6200923C85EDC8236D20E46B0
D3E617A8B026CF7070CED14B3340E6DC34FEF020A9BE702E17F4BCBC738770E76F47FFD84961
4E24207DFA5E6F8D2AAAB20451D4412546E40E8CBF56DA8D121F364E03EE310CE1CB7F6FA51C
6BCEDE9FC198B66D39D57B23ECCD3441460593F44EC22CB4335BF19E09DDD89184DC0F09F682
DCA18763EA72DB6C8E32FAAA8F002D49F9023D27B508395AB751BE5B02B5DB309DC9A51B40E7
7552BEE48E379FE478BF337E039DEFCD992AFC2F712A5B0F646EF0902B593D8E9F03BD9EB512
EE344E115F84671F21E5B5D03B0AC0548481A9A07292F79BF74C41772E16611D15CF15EC0798
14ECA31DF380EE3F56E9BDB39E0028B15793670AA6D1EBEE19603071EE3CA517FDA6F8C5763C
9C97D11EF62CD19542412B55D55058027494143F217DF42FF2DE1C529E533D0DDD46EBFA886D
DCB9072D299C13266D7C07A2CE9F5B76ADDB44EE6513244D7D4D55BE1AAD98821431280E3348
89718B60B3E58929A1B7197D4BE03753E22A5BEA21669A4EE78AB070A41F2EB01A30F200619F
CDB75CFF898152F0C44B2FA25508CB346661F4FE7846928D52014AE28981D803EA0EB8525E6A
2318CD2ED96F7386A22AC36025027C5D9D50186B5A2830DE062B07EF56BA35883AE1A0C76BE5
4A0986EBA08FC4640B5D18BD247F2CAD7D9F950B698D11EB11AAE9F847F9253E91AD4CB56A1B
8DC50D19B81362D1E1B04661E58FC86B016503BCFFB63B3DEEF03C5DFDFDB7CF2C732D77A0D5
5FF77D2F6A7AE2A896BC1184C9DE0BE31924E087E0828628427E0E61F5641475C066CC66DB89
0C417DF5879F3C6DB72D36132E1D87A88CCA57C99AA8F5F38E5B6911048E5FC827D4170C35F3
298EE937F79C7E0F51727AC94602191D21BB621246161A5C2CF5260B7E42932B779FCBBB32A3
91599CF96B462826DDB8C2ACB70C4BCC6D8BDB4BFAC2691A48BB0D6B7699321352AC3104A0BD
F7DA836A84116F8A52D924FA8DB025C37F39DC8AF563441C51E317A1C2F5242AE9BB32ECA30B
DD7E304E95D1527B7526992A1279ACB46FBA73FABF5F038B6081DEABB5D2966CEE770030D726
315080C371AEC87CB96AB3D9C0858E4FBCA3FEEFC066DC6CA8387326A9EAB6E03D1A56E5C5A2
BA7254FAA91986F2E51A767E8A4B8009EBC6C8CBB6C9024EAE983E115BF5D52B9BCA03BB482D
A239372F4AF2DC92ACF7272A35CF622CF6251218DF39D9B3D0444D36C8B7EF7DB3F7EB57DF36
5CED86F4A92D48782C219400B13A0A96AB32E09E124B8AA085BC508C44E299B7D5689DBD7CE0
981C2127D6853BC099E437CA0592AF681CE6FF71A2DD24807997288AFA1A407602342D18F069
5F442241C897500432FD73529EEA55948CA77E86C3F6D4E875AED4DCC5377D055A08CEC70057
E4133240C63BA28C1CA90623BEB512E89F4F3FCA56239AD0C57A7FA9CC6D4EBC7EFFB427496F
C36D05C395CDEAFB5A21DD430C98FD80943EC41E7B41A641A28FC257924692A592C1AEA49712
DFA7BAA46F8C55626A1F30FD01105D2F9F460BDFFA8342CCAD277BA5D11D815B45ADAD5BE5F7
3BD73EB5E2E5FCCC20883BB5A1B5D5D569C9935B0BE71E7FB82FB2D1B4C2A8DCE24236F65D2B
8FBFF5066FA300F667A4D2B6F150A9B1C2C6E50D6B6F642FAF0FDB850C6D7EFD955F8582384F
1A937A9A32DD35747403BA93DE7CF7EDE437EDB83E84E9DBAFFC0E45F901511DFC3E651434BD
58F0FC52C28F6CAC352EB7ACE4ED61F49DF8CEBFBE0C0964E484D2CA8CA5F1FBC839B907F8C2
B5A420CCA06582868827E9115301FAA2BB434E5BC9CC1978217FF5A99A3038ACF13A9D8FF87E
A545E49DA1E9DDD0E953F39CE7FEA2B0672B44331D85A03A3015399E4F2D03EB72DA4693F733
A34BFA872978060E65DC4E42894F341473EEED60431CE8FE1F2CFC3E5746C1EAD96E228CCD12
030BBA674BD3EFC3DB7BC76F56B758A391D44BD6E93A4B65C1B109DA98811B08FF4A1C98190B
24FEB0FDA2107FF837BB3B29C31AFB2DDEBC3593ED6D0FF0E88B85322230ACA6F9CB82D641A6
7E602C3A0B40A695AC1B7265538A53B04DD22B5439546E8C4EF96070B64469860B82BA4FB73B
424F6812CB580E1771506A891C678DF4851784EB30CAA4D3DFE140E518622F8737B86F4D9CFF
D8707132E2B15BE6B987DD30A3BE8433E7DFFDE4D62AFC8E6DDFCFD68D07B2FDE94E4253B755
01D2C8E9F556420E14C88993322A24C31F6E37D45BA1A2E034B3F749D3705E43CEF545D47AF8
6948448DD0B886CC3A98A1C1B8399BEEA86BA1F3A69FD5A4EF2CEDB670F5B9249E176897E406
149AE0C6063DA49ACAFB1DBFF711B977DC7F5D4A67366E93C7B7D2CFE461E8FAA4D169109C08
3E6CDD1564E5940D3BCF6421AB684F833C6E53BF76BC7B0B1BF85B0E6D3576CC4E86F06A86A2
41F22E12E5199CE07DFA7460E9F27366EF0F670984BA93612D1E68501E5EB5F97A588F71179A
A2325CAE91456D2A6096C1DDA4933527DCAA9D23C893408E6B3ABD7048B17CB58484CC2C381D
3A4DECDBD963839C343E8AB2165BCF6EC6D3A93DE2BD06291B6C04F8658785A2F71A4CCF286A
BB902766A45E9725F0DE564D71CF9D514A0D88A2FACB119C7F6077D95716E5AC935439B47FA0
208E9E5FD9666179F45A21EFC417B82E110D6C2CB5D724C3FC1032DD5B24644CA4918D4CB4DF
0B3D8ECDDCB2E13BAA967D76D4ABCC2439205E04C93B11240CAE025C456DE5DA2534A524AFD8
7E4E60D62EB1AB7D1D54E23E629DD88754C056E78F057EF66C497D993AF61F9B66544A3CA699
DFB2EDEE722219199D4962CB72D34E6F7B5FC4BC45EFD1240BF4A87A2B88355CAA3FBCFBDF61
59BC1C72DB4489BCA279507E8DBE67B168DB9E6B3EE1E024E42E02CB076AB71EE609F88A109B
F00FF75FC91A53D49151F1F84FD15F9903F1D3A3C66618C4C00721875F84A9B255466673DF7B
FEFD193AB00D239497D5AEFA6F78705934F1AAAD9B6A51513BAE7349CC4F52154C43E03616BC
DCDAAA9DBD168DCED676BC680FFC6A0CCD9C2F6EFE807CF6AB5D82D2BA75DCA1C2D7E08D25BF
FD648CD35B1E038274AAD7CFC271FFEFEBA50D76D6D22927B4D7931FBBC3CF4AEC101E07434C
D8BAA28D7A344F2B4B2755A6F746A66368CCDA78A0C40AF1C1AEF1813213BC1BBD17151BA773
2DFB8B590378BEC84266A3DAA34871669DB997B178F799C05D310DA0D97D3ED2F4B31E33E4F1
34B179818B6FAAE80DDC1599D04DC8FD1892A95EBB128E719CFB885E13FDBFAB96BED732637E
75A4237B030990ACF70964BC3F16B095690C8B54D16270B90045637E0E50947B5B6C0EC4383C
F47AF58A777122117B1D93912E1D9390D364E7653F920F295FBD79C635A112481583BB781844
E3EFF4C8667C1F8AABBD6D74F6378611FAA1B09175BA98EFFC02F9CE27D66C7D180CE4E8A76D
A7CDB89901260D72AF79F852947F89DB2993DD1D11CED6202F70B9A6CAEC7A8213C84EEE0436
3BD2D60BC9BBE93689FAFEA0EDE575D489A031519818AE508C599A7B143B1B5FE2AE164A8263
7B77CBE436D7CD5D1840F1BEC3E4D6FABEB3DEEABB570CDE270070B1417E2C723F853E00A1D1
D12A2EC6CA23AA78E136B17C07E7B69A29160D61BA545783A3864B1DA08942FE40CD220AC380
8AFC6F69F11C8BC8E2761A74D8738CD41BE944FC505B25C3A784E15DBCEC050999C8E1F55749
C832D64DFE1AF119E5DD4A05325ECC662BCF7F6A70DF6F2B6131BA3D95F0D3563F7F43A678EB
9C44F7F5AA50A8061A6C16D04E09B8AC05827809BEEC451AF1E2C2530F492A2CAF5CF38001F2
A61686C24C6A1113E9098B2C49F992D32AC4A8F06974EF9F974B241121915ECE38334C418278
0F9E32D4205F7484C033D597C0910D47BC3764006D4B5FC28A4615BD27B46E5BB9BB8483B546
1933DC9E08693E09C267BAEB17500D763EDEFB5036F820081C1AD0C731123206DE774FA464B9
DF19E2BE494B3B30E29A0B8AAD263602357ED11A666272BBB114A1E490431D838BE19A268EA9
6A8D646EDC15598038598524796B89A857B0259353D0C2560F2B39B6DE8383CBB6CA4D0FFB23
5A2B761BA3F794D067F16FD0E65171182614C8C82883BD9203318F38E1279AC713E68EE393EF
AE4C0BEF1D4F509D19F5404592F0689053D407F1706A3F61EEF0CE1D6EBCFF4901D8771563B0
E4FB078597F9C59024B0C67AEF020157C09451EFFB5FBA75A9C2780D87A865745D0CE8D1F535
DD07FE0A17D574BB1457B5D1EE9DC5DC41EC418AA318320E5ABC070B2B675D1C463F77D72753
1C787CEBB466072D0FDAF224A1903F18DF46E98BB4CC5288F11F886F570D770B346BE00598F9
9209EBC5F2CC5ED4AF88A96D6C6324C46E9649B2FC37B56B0A072BADB2C7F8AF4BE1CA5978D9
DB9A45C99D416901CF8C30902D3D4FD413695F18043445888E91A76BD572CC4C3ED8EABFF296
FE8A8ED3320527EE0C9882EDF49C6EB839A1AAFACB82ACDB87D4A140970A6A603CDFE8BEE72D
8A75510E43D169001ADB292CC6B62D069352C4CFF9066E12D8226C14362A30A6288E38515937
FC541D1D5ECAB8A3291098D33CFAF89339C43844F84EE3C57F1715354FD2AB8FEFA10D3E04F4
31B66747E91AEE2C935F67D2556BEB4B16418B3CA818C8B85F83B592CA9915D341141DC52A66
764DB0BB74104088D93159C8CF31558334E0BFD4C01A122E5AB06F35B751F7FEA64F3F07E106
43814F38357033B34D82E71CF99E9481BD44F05C9B3AB0DDD0C9028D5B251EF3BC167D6DC137
75871CAD29DA1FD91E460150F51506B4FE130454F2E7A3E4C9A4A2D7E6C43291F7D9418D8772
F5755660610FA4909B545D594D0BF908C8109279399CEB2933D1ECBBDDB185B84172610F5B0B
E712DA7E324F9338BA7C566444490F832932FDB33FD09E397BE06A0D0EC06E946FF06773A338
EDE4E3BE9FC8ACF98BC981E1AF0C412FC0BD7358932436BDDC43B07C061909D929682E7DE987
2AFB6D9B57E96DEF7FF9DDBE4A64EF21D14189F7005A64D213607ABE48C67022980CB3681741
D633DCC15D5FD3484CACEAF5066BAFDD863E3EAE64B6826ED7D74874ABACAF28CE9622B1B8D4
342A2D833608775F97D0A559CE4233008C412FB0117E72E45307B099C64724141506B2A9C565
ED541D478F49AE5D98CC9A9B751103EFCBB9F09799FA874FD3C9BEAB0E597CE6EB425F93F4B8
3560DB87F75182A755CCA3DDDDB8707665A8BE010A40EC6117046C91E5337FB7CA377EC96F06
3BA5E1F97BFE1C1214717103606CD373853626FD460620130DB020B05F4EA1D3644B2A8DA11C
DD2C6C2A065117278098630BC70FDCE0651BC51685841D824FA42DF0EAB5427C408198DB0927
C91166B46C9D89A760EEDB9308A5150C7675BC05ECCCBC0051EA8DA1FDE8132CC06412F1D6DC
E02BC76FFCEEB8870564078620F9FA7FDA867811A3304F00A4169D96E5CFEC2EBFA90D81DDE0
7949659D313FF7F8402BDB1EEA4CE01663E3BEC00400AA33F6B816696A13C8DBC338AA192FCC
3E06C45B76EA41EF156B3645BFC3EE5F1F2B15EF8FEF7622007196F9D8279097919A225431E6
683BB3CABB71DFF8D8A579D174B2063F48D63B7FE16A9C83DFF1FFAEBFD33E9CA293A8C3E6F9
501E73900B0F3F5C6986EB2E7A74307B6D86B8480627C39C2D01215C4F95BAED042305D720DD
E7116B93190E87D5F5050AA0DBD0E8D6988A982E7D2A1B70B3B7F5F8B806F49D3626DD1E5CB7
0338035DF553ABDB4CE6BE4B5F977DB8722899CE46C3D0AA8331438F1C22E1697983B82A3A6B
128F2AE513509FC66D8A56F4F74955716D00081E4F1DCFDA34408FFC05CA4681379725188378
343F875E734BF5DDCE99186C9532999800CD4B4263105EF314B8CE102A3EC7B5EC0838E6618C
C016D8DAB5C45976F491CFC1F542B6020C907D64F822BB626AA03F04344804DA444DE14DE255
853277DD1678AFAAF82AB3851AAFD2C8FFB6B7A25EB5A1165936AC02A53FCA5B6A24C5B0C988
4D01B54895CDC6E64C4F3061D2EA76A7B4F7B0164FAF03ACCD3FBE9BCE7A12D2A37AF3F44C2E
864FBE8422D461AB553C101F9E21A50BBDCB6DDF394E2F80F94A2C721FFDBA037688F016C9BE
C8DC1BBB69CA91B04823CAA2FD07AA0B1F1071213251D24753FC7A8E152628E23F5BBFCBAECB
0F61CAC8DCC6A8FFCA0311483D2798450C4AF21F5798763F5B4EC54E99CC25CCF0019E95C7B8
9967EFF0E002F576583BF8FFA66850006E9FEB0F46183C41186476FFC10E193C6912FF8517AC
215CCBBF210762C4D3318A83A08947B7F3807217FA8D155A3EAB3BF2A8CD65CFE9764E8D9998
B1D972CACF112738D7804C4D2F545529031F81306F5FBBE974063935754C8D8A55CCCE35FEF8
0DBB6319A40C2484DA95C777D9AB30DE56F071EC3298E3163358C5F2D7D0B8968CA4DF727B8C
7C7E571236B7FC308D6C9AED824A7EA3527FCCF2626EEAD5810D45DF801AB75CD958CB42A00F
F9734AE6A9D870A4392D6249962F81BB145D623F5F380406025D4E3A491509439CA5C9557938
6162AA02D4574080AAAFDA2003A2CC680165749FD5DCEAA91BF47BD838F16A21E116A396E9E6
F758D41DF50D3F1610F7D8A65257AE00F2CEDE6CAB0ADA9B16D9ADDC30CB7A068B358E247AB5
C1810922A70E23D60FCB5D3C67089DD4024C5B9CBBAEAB1CE8847671732026EC1A6043E38AE2
28CFC27B0B5B27B2304EE1ADB7BC8289EDBA34935BCA94F680FA5EEC2DD45F10CF13732B8698
D84AA2BB5F5DB833D672CD7506DA8FA396B0845D8994B9BE69A515B9A099F31492478F824413
A40DD76C862830F89DB2F21531141D5EAD597FA5D816BB015CC8EE87BA594BCF0C717544F32E
B695E911F585F593AF6852CD27AE6B25E06329E7576A9855D0D7CF76E81DC8B6A42A3196D178
112EC5B62994AF67FFB9DB4526C76F049B43A251F82426A002D760EA17104CC5702CF5C0DD20
454FB833D247D38352C951E412D4D5688C1991E4E570DDC3F514218DD1D5EA6436A094F14A96
983E13B5E5997CB2D115ABDD35C8D8D64EC1BA0C0B1DA86FC40BB1A456C03D79BE63A870E9A8
82C235950BEBAB733B5A50ADB07C35BD8C7F8807F603FD0734B496E1A783E518A9069BC22CE8
F48F29B905A18F110FDA8EE43ACF22BEDF99B2EBB1E607D1AB920DC290E30D041C468A0CF27D
948351D50C7205755264DC6ADD5279CA172ABF27BA1B93A623F2E4796409592CE84C1AE4102E
4B9221C6A8C8466319E6BFE089759D68DD58F74C19B3DF9E140AA31AC26B7544A8497365507B
35F85586B6025581B80F6647FFF71339ACDD01C2FE36C6B7E615CA23304A828FB79D891545AB
8CF5D15129B975AA66132B89BD18E89A9106B7A95DE04A3BB4F0802571886C5C38D05AD09A3B
E3BB2960128BF22B70A8102A2C2063834C969CF050A5AF3C050A3347358E00FDB0391DC3E0BE
FDB1E52178243A0DDE5DC83FC7A854EBA1982CE7FF65E750B9C4DD86DDB7FF4AE7B72702D3CB
C7A0B369102D247CAE19677D998F7B550F901ADA79A82319F24E1806F44DD825326D7F5DF6A9
C0BB9546EB28E1D6DBDB2CC18BA3D463ABD838B208419C168A2DE68F252825FAF425FE397F85
2FBFB4D379696E73B84B9A876458F526A623A5A0238A210CD5BB715C33D3A8B48352902C2D83
D18952C55FA749885132AB6B7E6DB794B15988B9D511438124D8DDE3678A74654F9253D0B8B5
703BD0D35B3F7EA294FDD9B44601A8E73CCB3FDBD980C2391D4C7928B41B46E9AD163886ACC2
B68C5C4C2A06911A7FB36ECC544B7D886C75DACB52308EE0EFEA5E3F16A11028A53929F7B495
389601BDCA158609B9D8BE1A5D68E5CE3827189A0F4A7E182DB0EB81FA0DCD6C587098F264A3
D0E2049F84C8A4E8FF503A68E8102B436A4BC956EB9081143CF2CB903ABA73070F8B3C4721C3
61FD398F7D17B363DFFFDFCE66C02F2A7B110A9626A8FD9B7F053B286A7D7AC4D57AC019B77F
9051FF0972190FDC0968F8D527AFC6D8E70D9C638C33BFEA751E62D1D4490027C64E60CBE9C5
AEB395BC6D692796DDA167BD5BBBD233ED01CE57A8DF6FAEBF95C6C7539339F31397C1582D47
FA00A40E236B7BCA3A3BDAA06E53350F664C12E10F4B174195986E94C98699BAFBD3105AFF22
A82F8D54E1A488E44842BC58DEDBBACE508E3A69DD35DBA1F0F0D69E34651BB078232519DBEE
D3B29D2DCEE4B449BE5F39A41D2E0C84AB52609F8BB0B3B85D0CBCFE85A9DDD9BCE5F1636B4D
D7E7C77CDF6A025FCC206B9104EAD365D8B52F4277D64AD3EC49ACA1BB60B87B9F39D40678E3
B2C8AD69D1B5D3FA6D0991BFF3FAADC1225617411FB4BA6B79B3EFF8F3E0802D0092567F1C3D
43118ED30D3D90807474808A9BB5F07F31371F3A4CAE9EDE2F758875145F1F4BE72E8C7A8F1A
733F91C761039025275D15F76DAA677FB447795CA639A5C9F9E4BCF3C2C06BBE0202187CCC5F
2CFFBBC208641A52DA611D40B08908500375829B8CEB8C93C7398389264B3821DE6D37ACCA04
FCBCD02499847B4297FDCDB15CA26FBF868D5E335A3E0F3980CEB288149424968BC10AB2466A
15CEDBDF550EEA623C162A3A7963D657CED119101602898B23D7CB99618B5B3D59868F5AC31C
E289EF1DF56BA4C5C398068D5A928A4AA53325D95BD1C774F0D1D503628BA1546F464303E0F4
54CC6ACA98D032ACF05872DA95A9188D0F224B875C05157C2FC993D65521A770E6962407A22C
0F2A14B80064BBC74F496C61B44255C40C51BDF60DBFA7900F77296D59ABF61F964FEFB6AFF3
F5DCCDD7A812FB5EC30C6DC8063BD828F6ADEAD242DC0A6E72B100A694AC24089D150B8729DE
5A322AD77D84E7F4A62570A178F0A9EC0DD32A7B909178D9A544430CFF30E2E570DBBB649D9E
19554B39546713047EE0861B8A0D960F690D2E2E160F24F152F6F0A93F6B13B1EB2477A416FB
F3C15296DDB13A3D09F771D8618A85DEC2362F88D117F1BB174E829F96F9BE965B175321A3BB
0746376B95260B82CF34134D29BA6425D9B86E764791D699784151BF26D4DC5B01CC0F88261D
F88E3CABB371D334E1A2F5F60952EC7038403F2045F70925E9D8B49ECC330BD90F563D3894B1
5CE629E686E3BAE594E5C2512F7982EAB95FD43CD595D8EC5FDF962F5E5277E416A91C279178
BD98D082CED5655015C9F425C048AEC135F5BF41260DEA74FC1C16984C3DB8DEAA0A65C1426B
7A5E91AC5F67E222905EFCDD297C1CAA1DFC17FA1A3DE462D3200A1491D41B26F799475DAED3
D6E3B1FE923D3CAC505823A1E77CE6B07C0C2EFEC207347A8E44D3C5D196376C7B7EDCE7C9BE
D0519DA191A63FAB427AB930C1156F51C8D5AC5BD9D062E0E04089355DF1619450C40D0050BE
CF1037BDC9B62D7D4C90B76219991D215A37B31091CFD832D6A95669DD02B9040AC2B60419DC
F064AA70A3C91A10E5E4087093246FB95645828A758D835F51DCC7AB133B360DBB003CEEAAA1
102DFC07931F0EE238273D9DC4C9C8B8FF089232BF823FFDD7A33D0D7E142070F240D078FDF5
90DAFD88B89629B0275AF422EB54BC1285EAE58CAD06BC2B12D5A0C2BFE51C4D1082AA23EAAF
334271C0523E3193D6AA4B6A30BCCA62EDB662D30D93F5F553A211612CC2EA7DA1D19112CB98
1727EDF44136EF358EDA02444649008A8E9DB0985ACE34A56BCCD493378138AF3F1632CD8852
59F01F97A38B185443E3B4408AAA06C09529403545DC768BE1F6E4B4E85EC2F094AB06D4ED78
620489DE9014ED3D4A76AF19A75C3D65C73CF8B3AEDA993E97289BBA416758D561D6DC1223F3
A5A740C2A64FE4AA02A8AF2EFFF0A3FD8C0DACC5B6A9F0EAE8833359BF6BEF10D03BD931F05B
EA5CC117E21AA4E3A486845357A256AF1AC282967169745BCE4592B4501CF410E4045A8AC47B
F72F802CE93E562948B0084873F33F872340B4930954A97AE25E9C74677117EBBACC18E5CF9D
A28961E6442C545F7EE10D0689CAD67B5E7E9ABCBAD934672E013A622BCDE541A2BAEA62F957
C199FC3EEB1BB8091ED8AC159F5AFB61D35893AFBAA5883C5A97B0DAB2B2C4BA2FF7A3093588
2011248F8D9E6D23B4A3D91A71DF66C0398C65BE4CC71CBA58BD19CBC9D5F7BDB30DFE9FA814
C9D8B505B2BC3098A2204C5D35F353E66576E032FC0D23D2A2D49ED27D4EA0E4E0C17E6CFCE3
CC97470E9292FAEDA13B6647DA7C64C7A717620980DE1323C6040FB8F22E2537240422E2248B
EF0DCCE6FC223B8720FC9DFE3C47809B31FDDF8079D638F8690F441EEA511B9CF818FBE872FF
3E2A0A2950F9ACDBB88D48B9D76480915B0DD985074C0429E9F4EC356C6D1F418096EAD18CB7
669DCE76E8B21A6B0CF19DBAF1E79E2C70A1888FFCAE76174518C355C3F733B6D051D9371B79
6908C09BA1CB9FE3C7E16E4529912126B5253EFF6ACECDA3C37FCCC761F9D781F0C75EB7075C
121C68540706958E26166E19E1C0B29EE08D2C2382F99AC70EE4EE4A6296A4FFEC552F3DB647
1AA42D3B38857223FE511D0AA35A84B1C1205A304B2D0BFC95FFFBD603E8E6F42E60017A2808
BABE00C270CEBA6F93B83BB9C41C7787992734171FC2A4F0B46F06C6F029C82CCC985B7C3C84
EA655478FF79E8AB8FE6CCE591ECB39C353A0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont
%%BeginFont: NimbusRomNo9L-Regu
%!PS-AdobeFont-1.0: NimbusRomNo9L-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -281 1000 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
/UniqueID 5020931 def
currentdict end
currentfile eexec
E98D09D760A3C22CF119F9DC699A22C35B5B35ED6AA23593C76D54CABB5E942BF7D6DD84F166
4B89699C74B472DE9F8E6DF925F6C4F204E9F1C639B4DBA988ED2AC419FF2B2BDE605B8EE326
4EDD66412D4F21C64AC522BDFC7C5502F9C3F3E5592B3B2093D33C9BFAEDD2D49E89AABAA832
E23F062E91A25032519D1868816E44B4E0747795003D7930299D6E1E2A5BFE0D595DC97E1409
89CE81D8D7F852FF9CDC7A1B1B598C69131DEE005B415805A16D8A123E6DB3DC98343C9CD2D0
9BA4312225F67DC69B9EBF6788F6EB296E972B66105D0F9B72A7695AB14F20CA7544F6DF6E48
3149AD930D519E44C63233F66E8B13D5181461CE56C068C015DF16D752F5AECC3D441B0593BB
D552F4C410471AAE8231BFE2FEDF619E5D4CC615BD2436ACA507FAA7ECBD97AAC2547C447F08
A4FFB28E12C5B6E3D5F110277B39B6C53F031A3B203434593B55469D1A9F0F823738CA8491C3
F035CB745171772C4600BECE8645C5797C2298C78E7837D6F9B18BA86D037028A819709A03A1
ADE46FD4C912D86ACFC431B59C2707F663EDCC194B904BF0ACDF91B6F768FAF9F367B38842AF
9FCD356CC5B6F7DDB7405D062F27453B989EE9BA166805ECE707320AA50429144C1D97779AB4
62712055A7432A3D49BE61AF9B6DE8A9C820C0E70D43E51D09B83720C9D206DEE13784CD0CB2
1512F7E0418A9071975E5B69A55A97555676E823E940F5A5E6E67B40054199A5F8AE9741D2D5
527153F9CDC08EB9D95C4DDDFB0948051953F39C6D2D811D3FFDC25F786E072B2A8A1F4830F9
E556D78A2E5C0C7138E07CD5A9C2C8A7A61E21D9281FA6E6D5D4D19DEB813AE44D4A49709E0F
C5632624610533275A51E93B50777E12D9359DBB3E0C3C8F3E33D4E14D03AD885241C894D364
07F924FFC10112B8E10F4A5F1C4787D66B4441ED836218C0446D204A89BC157C4A6C384518E5
30ABDAAE8C29D39738DE4BAE5AC68D6234031623A5737AD7567F516CF361BC42DB1410C2812A
0F7F11ED81797FF59F25D0AC1BB7138984906112F747956BB865EEB55DD4F48BAE75FF778851
DFBFF71E9B3BE5917EDB74E7AE6C334252E8DD5E1F0287BED3FBDC20F95B78911E25280DF0B8
C867B3579B9CDB190E4802D7143C2164B0C02BB7A9B1282318F7F61A6288A33B83DEA53A9D1B
C4CA8293E4D993A1D275FC86CF2617E9213829B5F7A30135D1CAAAC711984BC00C3D209B05E8
FB22993B3923D23C15BF486896FE3B398AE560D6CB11B552BE1A5AC0F861E429A9D9BF84DC5D
E0BAA75D49ADB441ABCA51E3F87BB6163957478B4912EA80753F0823B60E9FBED3552DB48967
F2F47B16061DDDEEC78C186E194E62EC59D18DB8C84F56F003514B2A0EF7B0EA9B1345DE35B0
9B42AC9E57ADF2EECD0F68B100B9647AA415460191CA3255620A35BD3604EE5B7B9C5D72C81D
A6A6A37C1B03AE4CA6055E180814ABE385251128A0A6ECD579DCB1BEA31123D98E1B3C657B11
080A1C13962DA7E4740F8BBC91371B31E70A70DC912ED7E2E6138C0E3D757E8DBDE0A88C1AB8
1741FA70BC8EDC795C8CA8480D4BEF7B1B5BD96DA7208B4E6FF1528486B4AEEF0FC7D21AAFA4
82B4ACD3143473218B6E51F82EBE9909F5CE6D50AFEF6E0569D607D2F962729B45C3E0C7260C
A20BB04CC1AAC4F108D026D5F9B0262997DA26FAE37C80417451121E40B4111511A7FC534C80
7F41B8034E0F96F116D2D3FA69F864A63076E4FCA3D709C7D16CDA76DFD840A204C7FBB96F9F
2021A31FFFBBE6166750ADC49B1F5F600D218D7CD0567772A7BBEC0C6C49A295B2CCA64C0E3E
83187C69D36126B8BC8E30EC69062BCB62EAC182B1FFC57178DD3B1689DFD57EF6455E4CBD4C
EED062999E3FEFE3946CA837B087B840C3E65245EAC47A870D120C44B0E84E17E885D0FDA748
3DA2FBD0CDB9192CBBA469315A6F325E6DCB13659CDF9CF8D9A3E6F22E3D3A3BCFB65DB1A106
46D08AA21C608FABCE6756CA1ED8ECEB613B3D5E76070D394836BBA9070953B10740BBB31824
F93E64A990FD8AFA989EB8BA0C4352165633E79BC99B077579F87F7D547EACC4F4B69C8AFC24
0C23B30182250CDBE461FEC4C2E67D397FB28D8D4EC078B97C43E71DA903EA0E80C87B65E350
4EEF8495148A00282FA246F7D62021E05D2624B00B9F7F62712B8A590ECCD3F81F99DA5E6E31
8CA3DBEB233CF03FDB0AF81C83B9097C0E8ED1A7A2AD78D7E1BAF3FDF211D5FE83F10E426E13
E2ECF3FDDC149C5561CF793D0AD4588FEB34D15405037D921243A3AEB331CCD8C5A949FBB529
F1575336EF66FCF240291EE3BDD29642B061255C93ECD94A9E4F6FA09AE69C1496A8BEA5F48C
60E370754666B2F86577168D86B98DE567FB37E8F70BEEF43ECC25BB0C4EE70CAB7C2C2858A0
D639161D0ACBF97C6CC5E1C96790E1E180CAFA5D09B1C6520703F3FDB3D1A8C7B829E7B7263C
E0746B96EF1AE6FD46CC2046499B6357949F550A4795E8B4E9A41846381DC9D1E093599AB035
A3D9E355DE386E2A72FB009528F36E79D3B2B768768321F4F5971D6370E65233B768D678432E
A96131E8D6D5E8F281DF69303B29D0275E10F95539090AB2EABF276ECCE07980930316537514
F963B0F2D8204748E7152846BA1324C897249FC69576CD2B143891EB69EEDE25A0C58C9F02ED
2BDEADC40A08553B28155938CD652FDB1F59F47EA3AF8FBF0C0ED8F3918D1DCB9200DD611A0D
4AA2A1B2CEA3641F12FC2A455157B1C9D035DCF911B941A500CFBA9F65E76D6828EC84D275C0
FE675EC6E370B94F19A5C5B5D5394BC7D95EF926E4630F60DDC5B06276684C2D654950067ABD
E1C37AA4EC9173A9CB5187EE10D7E13A54842F147AE6EE4AFB50B84FFC836D5A5B893EAA18B9
8AE9FA745125F51B5ACB7EEAAA838E11AE69E8551AB6EAAA0D049D98DC53DD73B3A0307E1E8B
FA338229C9F3BB56D03CDA746BA5AEA5F25462B472D2C3C67E71D8BE2B727E0E76B8B57E4C28
A4A177DCD7D375CD749ECAE829F99F87076955C6A2C56A1AD58FDBD331C9F45925EF8EB5BF52
706AD260532621F1C1B19AC7CB8173026474697F1DB6E55F2EBBA3F513EB6FF41E416680AC7F
ABB50BD0BC0896F60CB304316A945370CFA23B1739B485A1761342A39F5F6434C9C79D0A10A4
EAA36622D2316893091161285284FEBC79674B4FCC14B662926F34FF616C9E48B54080840477
44C14EDA3CF09A42A4408FC0033CEEF644EDC7A80F97E2812A2A3294FF30540E9A74CB796DA3
95180ABB066ECB7AFCD5AAE34F89846E5ADF77465A5F9BD2E4FB2D4828F0656A4B02E562F15E
630DCB00FB8B54FF10DA11CAC0FBB4B48B02DCEB29D184AA9A5F0B00CBE121208569C4AF9CF7
1513D855CDC3BAA79B0765DB4424A7353D9A366AFA76CC170EA63DDCF98C86EE5D21DBD34D81
C30BBAA8BFCA634397723C604DF9A29DC82B981AC295107E783C69AB612F12ADBAB51CCE116A
4C9BCD0BB25E144C39D74A33559423ECACE8CBB84868330F7D9D1CABA32E69156D282BB7BDFC
5534BB41A6FF75538C745EE041F16B1310CF0FD9BD583016699A3FDC335F3C7F984C76210217
CB0B626E6A70887599C320FC7FF9C287C9CCF7B74332DDDE527CCAD32CB17662609EA7FB6779
F38FE87245CE2C4B260605E262488CAE3357C1E63D9D795E843318139D0E41BA3E7894DB41FE
1E3781899B0190CD9C6944CB0D342190A4F9A5A959A14F5EC9E325D9349808AFB095DFACBDF1
D2F97DBCDD1D4B13841555403382F61847A3CD4CDCCD7574AA8DE3B033E16B9DCE00CC9CB9F6
7650CE7A717D7FB15F7C70FE86DC15E6B05258DAEEB7490E747B3F4082281F57AD4FB03A92C4
B0B8F617033147A0194391B50D55F47F9A6D686DED51A3C73CDB5BBCA8C848963020A5B12945
16734DB9B91D72701A04CDE888F88967CF82C547CE1F1AEAFF2B35A4581AB3426B888FD34B5E
D99DF001D2E484ADF64844F80AE2577D211C806BF6156600F09A16DAC73E1CFED74178E6AA94
AA3BFC7B13EE73D22EAFD4D327C78F57DBEC80D7BA2D9BE8600359C3C371D02911F1D5E3FC32
42072D73D67B65840676B693775394D59EEF806BD53F42BBEAACB46FAA6F768D14386A0CB737
8114BD3726F3734BD35B9B4D9632B97BAC71B29AAE4FFC83A933DFA5ABAA123E9E560D4FEE47
723B5D387FA0EE0651F8F104B6D70B90FF0AE618BBDFC9B4FEBD0B26DA3B909C693E8D32CA54
43D98654F70C8ADB04FDD10FA5129BF4A7E1D5BAD899F54C36B23529F808ECA59DFB1C98C757
87A7D93932E5D115DDF58C9A9995D8A8ECE2B7374827AE96036BD5872FEDDA784524E0BB5EC0
2680D834B180EB559729BAFB50F8E7B9F261B394AD166D78E5D917A2C0B5CB167F457001B8CF
633992DDBB45EA13C99C659C0FCADB366CD0283A6BBB9BFDF16CE498184CE25C2BB66A287D2B
A92A6CE6BD440086327E137B8DE6A23B418FF169EE4B87A4700BD5D40EA463CEF58B05DF68F3
2D679EEF70E88571AC7D8DE9FAC6D46552386049D59AE3A923E62CDB3B980E4C3DC89D789253
56F0F6EF013F696F06BBA6E6ED89BD50C09E1C7C0DB57DB6CD3E1F1DAE4294EF8B428BC4ADCB
B030156AFAC0064BCD2C8FEDF460786759897494CCA03328604DE6870F6F2C2B07D8926E830E
29BB5ED5420B389C97E5BB5CCFC444537BE322ECB3C7D589B1CF76F8A0BDCF583EFBE1FF3856
2C7F2BAD537A5B563D36F1FCA95352346A96D2E2E6CF103794C29AEF3F7F863140BBA6CA9592
9DF2D23FEB974D6F23C214B936C397E8FA030772C0DCF74E67C5139C5363C4877B6698F02102
DC0B27CD99AC7D748CF08695A3AA3F3A1388DF56F8DFA9F4769F9C686C55643FE4BA9EA1354F
3EA2AB3D9A3781744DEE788754E00DF0759C4AE95A30E2AA049A980BD167221076CFDCEC9149
42B1E5B38BD30286E0A8B3E4A4A0C2CABCEE19E27A066D6B8F923AE34B82BCFCD7738D3B4D3C
62D2CBD836763870280ECA09C55A80ABED0CD63720FA99189E3D30864A4AC4D5DA57AFA26B25
8684833BC91198457D3422227BDA3BF0B60235000BDAD21D129A893D752AF2ACDC13243530A3
78EA396D97F61769DBC1C0170A7F1EAFD1E0B843460BE9518C8BBFC07701F1A6BE13EE3A74D1
AF1AAFCB202750EDF547F1F95DF14B96C1F5D03FC5179D79A0E9618C39645936B81798FE7F80
FE81A7A5B53E680760C174216EA73EF03626CC1CFA369B5640C23D76A69DCEE8381C65932CAB
F3262C8B70126B9A1BB7E58596CA74C9B7E91CA30DA00F269FB38586B046E8945F5FE3F496A7
0B141231D5566B1C688DF52A52A90FE6297AB473A283A44BC7C98DE16A4DC5F1B03CDA3EE14D
BD8B72B01885792109B25FD8ECFD6B13D2731DE7067DFCEE52E2C0AB0B5DDCA7961322F91926
361763B893015F48EE6747F0011F695118657324ABA04E86F41D9BCB4160ACEA9AA6365A1C2B
7A182E07F2C5D48190747D72777639BA246CAA2804AA3C28A7186B1BF98D99E6A83BFE4AC6F8
48EB2A58701D1389AE6ED4746670AC62EA2C099E213BA47B6D8128EAD98AF167692FAD5B3F8E
442492E7A89D2DF0A00A3A117AF086F5015E43B5A56A502F29329ECAE472DB8F963DBC89A238
3121482B77271F8BF24A51EB2C8FAEF5BA41D174B85A3C89DCB80A5D5BCB857197AF86374130
E0E7A9BA425E081BB1CF6DBF8730F2A4AB20AEF9642EEDBC0857DC4F818504D86931257341EE
8043218E77DB9426B483D93FF1C201C8B1A7ADE21F92F19EFD5BB6744136CBAD1023756E10C1
0718E97459BD1B05C56B741C99278070BACB74B707AB92A7A86799C7E5B32E703C7733139FFE
F7EB85C6EAFD1F87E8282705A06F2508C6FBCF5E427A337E427B10C406421EBCF15C2A8995DE
BE580D75F5873A6F37F0783946C71BCD813491A1035F357A76FDDC3D0CFB59DA67858F9393AF
9AA5E6E947FCF49174B80DB5E961675FC0AD09A641D93EE38D20EA38F60867A9C17AB3E3DCAC
7FBE05429EBF2169A8092E7B0CC9B824007A7A113EE1A23D8D0A626E6E61847D02D9679F9456
CD7ECB1C71589EAA2AEC52E3A4F818C78DD4720A3EA136F8256B7DCCA0AA2E2435F0332EE6E2
B7195382C640FD9A1F15A26486027C0433EDB6EA1346CE258629AD3C42AD41847E3C93DCBFC5
5466D61903D0FE6D25A91A66C9D4B8666C1EF73BA4C7FCA94A395F4EA4E160CDA20AC7978CBF
D27DF6943D1F4A09678E2E00D92107FF37E672B108F3CF0F0BBF75BCA32329BEFCD32E213896
44CE5B7BCC1308EA5568D073ED46C68298C9FB4E588B0C0C69FF0088AC55EB492AC30D9DD0AF
149C2D7A532206CBDA420A3AC189CA348DA4933A13A0A38DCA8F99A2E58D6A7D2E118EB8F9F3
C2335F5579C2462B2F87D21497C993C6E09BDD2FDE4C295151BE69A5328A2FDC905874EA54E9
092DDDC6522A306EB48440D16A80ADDEDE63C7E44D55AAB8FA863530A5A87C446FFDA36E5EDD
6453C550F3FAAB0BB65544E2E27C86275428DA18F8B657F32340FC82E3A2EDBA810B8B51C2CD
00EFF381EB477F8C9D8D83343986EE995ED8689DF05A591B102F3AAE017016FE59CBF9A241D3
0D0C46D69F77F5ED42255593D34939560E77F9AB66E60C8115D28A76AA3756677C679E5EEFF8
5DA5D95EB2DC5E10A059EDAED8C145FB91EDB892CD6C01A2D8FC7989EE78FFB2B30D1BC75CB0
DAE3EE6FD66E13F50199BBBE22AFAF5278C82CDA9A25EB183B3F48D6885016AA5085329A3ABD
8A260AC8404F98358E087905181FA6D69160BC58DD95B72F6FEDCF8546625EED9CE5C0E19A3D
98FA7C79413A262F5A147980E8CADD6E019E016DDA699544C7B75C381968C266081A583EAF93
160124B52610ABB7578C29C0F3FF83B3E52574F2BC949604D635C05AD2ADA4D017A84B0C8332
C0AB91C32043DC4211FAFF0909E7247BE7CE7E7206C16B76B46326BBE3D97ABC509916E73ABA
81847390E03ACA7A2BAE2123668A6478D2B54F1207559D3EDC24F13C9B92A88BF677E36025B8
41435EC1FD22E301DD2F070892F3D67A34F7A79C2B7D53082CC63BC664169B32EF7F1030738D
77ABC2DB30B1B241DE50305E6A9C19B9D24FDD859FB848BD7A513229798576FB9D9D73EA96FE
F282C55CADB69DFAC99E611405A20AF64487159B663738E918B17E14F8702E94725A511EBF1F
D9998E7642E8C6FCF61820CA87112D1B5F49FAA0CBFE85341DF9A6D29AB63138E33AA0BC8406
EBA6E9845D01D441545DD1EC9AA62978AFD34C4D8D08D399CA51762B51FAB69842F68BECB69A
ADD4BD3C20017A9411BF924DE016F8B4C7075FEB7DCEE474A079AB2900350B2FEA765B68E59E
03BFEA937847A21088EE2519B09B49B3A88F10BB26871A09D6ECAED6F3B1382732FAAED04275
B49EE17C674DFDED4E1C8298B3FD21D1FE47D7D00156C328736455BCD1324970493BDB5F504F
691A7CACC6F0F7C12A3886E625FD58823EB91C49F3086D3F93557BDDFB7BB08D27F5CAD8E573
95071FBB8A257C95DBB994E1888EFD02E0C7A12C05C03044C5484646327AFCA6D3D6882BF5E8
72F3F494398B881F50F8F99EA475E8CD2026EE028198DFD7488D961F8E8016A56B28CE5F7DEF
368D092485E597CB06A9C235000395DDE1C3CB951AF96CA447A349CFE6AAD3994057F339A9FF
49CCD16D913C2B011665153F46EB6AD43AED8E4847646A88427BC6AF6108EA80378911789BAE
231C898B76489D249E72657C1B8850066E97E663FD86EA70650C849798757CAB43FD6C9733C2
AD7D09DE36B9C608A477017045555E4204997E85DFA6EE8D1B26CF0C8024E2959749E610D02C
AD218D69302A8B4AD3F6880A5548E4112EB5505EBA021BB00BECA223143D7430D6521CA73CF7
89787EDD1CAA6A64AF045131194CE5CCD4FAE5041D1A7A6F59DC8AF259594752FA2E39A58EA6
347640A3034FED09BD85BC5213FC76259E25860A3E8C45EF151DAA84C3F9FB951EC636E142F7
8458571358906CE350BC4C84C90FB0E7C366CA6F51CABAAF6F0F9674753A6A9731D4A493FAB5
BF544AC6F0E9FD1E3D63CE12CD3759914A19CF9C590B3D41FAA247CAC5C3B75C640B78632E29
936378FAD69F53C5477BBE7A3EC00194CF01B6B4D18BE7132F024627C593273EA9AC13474407
FAF0F3232272D7A9C131236A229B1EC2A82FC1A7C255A801270B11395C99425D5A3E59A6973E
88BF7AD7433A53A93B508C990FD5DD14D8ABFB6007F574D718DA3AAF8630199186EAB5BAC397
587A6DA9ED2EA6634AAFCA34766751BE83D86139CB2A2DBDBCE57EFFC52413389E88F6B79EBA
B3D1D4F44B2B9DA86475232F0EF82F4485598157622405D2442CD5DA68F992B474A48445C43C
4D5A45F85A787E8EDF84558AEA40995C46420E5FAEDA784D20F06BA454296EC17A8FE8FC122C
049463AE81F75310D8407933568C91A27E78462B97C779DB6F09568FD192E619A50E25F40EC8
F7EC8E78849F9A1A1B87DFC06959CFB774B1515C7C90FD045F1F84251854E2C06AA2A59F6455
C1680435B9978592982C6EBA8AB37B5C35D075C414E0DC27603C8752634180F486C6150A2F99
0827397A0F7FB0797CBBB9E2377DC05B536E14046B90C79C4E7B77F70ECF63FE15E393C3F333
4854C525BE2F0F713E6E547DFFAFA5F98CDDB57E71F1EA9B963122A1AB3928BF706B2D85D5B8
2CFF6EBCD4364B76198719C2728D1853D0195D5E74D488CE619FC10BBFBDCF134E1DEDA3123F
56F9967E439584BFB274C4D2299A74F241050A0D7757A4BC7C674B84CA45EA044EDF644BF889
CBC2CF5C8D1E82B25B790E7A0800DEE0069FF404181A874A9C8C2C6E0BBE3DE5134EC49EA8DB
6E0CC76939E993806EB18E1B4DA518F5ADAFBC84BE4849AD3979D2F4AA17C6D739CA0E7E142E
3427A92F9CE0CB9DED7BD5C1FEFF382FA74A085FDD2BE71EA8E2F40D9906D07BD8E6C849F8BF
B906FB799E01AB8339F685454470FCB13914C915D81363AF828D46838B68B06900060949CAF6
6BF1433F46449EE4B39D259E2789ED74CBF16364613B493B745F973316936B4B568E6156B36B
1C4FEF0926518BE0F5AC8605ED1E2CB6E076D75724A9649FD0A0C09F19E93365B348C01F66E4
92C7F1A0225F5E96938E68FC8EA33DAFA89F10EB1608B37C2903F6FF36F9C529EF32943BF1C3
CC06D2182E9D24488289E6B86BAEFD77AA61CAE2C5057487BF0CFA62FCE09EB85AF8B0305FBE
B2FD88C69AC5E1BFCB9DE72FCD5A3A04F82AC871B94BAC8E4F31B8F89FDF177255B1D69354F7
4DB698442A4EA1D80E56F5BE682193E60B2B5F1D2BD5C33FD1849CFD1907C7C8AE101CFCD2CA
43728C2380D71CDD63B933865552B6B9F99875D5A737D682C7E32F52A795B18EFD0A4F289707
9261EF35A1EAB57E3D94961A032561F5868490A9E3B9C9E603AE975AC36AB984BC2A288CB627
1FC8CE07D041FC958E7A6EEB4C29182E839FCF9791631BCB008F6DB509B06ED8365A57B530C1
71F0702CCD8A947CA790678C091FE49FAE07FC45AEE111E7516E8A8E96353DF8BF4306AF12BA
B732AD211BE8ACA46F92701B8CE90B2BA74C7DCB8D72862D87AEE5391F05C1F5500529B9C5F7
0B995C61D16383A6E7C74B3F067CC1DF9F31CA80D14ED8173012B6F47A07750727693F0B06CC
0AED118424E2D8CBFD0197FDC795EE6B7C3A544B413BA74A2DDA808D365A74684372376779B2
ED46815D4D4B37E6E5221E367570CCB79E4D3ABBA70A32F1068B29B81A980C9F58B591B3D1FF
D9EC1ABD9C3B609518EB3415D11159D5DB0B61842667ED5EC12E38CE3F625C57BC2FC8E51521
32578B6AC7266FEF823912CCDD4D46AAA7AE961D0414A79D68D0F3D9B06511CEC905A466540F
38E107A2ED70930DC43D002B9869CBC1774EA3ADCA7DC9B6224AD99C6B52980A9B6B0ECA59FD
AE1A015F1402E25F97C785F780D6A39820F9E92DEFA661DEFF7268111258D137E8ED210D4C1A
043406D18E93FF65E3A3BF3737757C1AB0F52D9145F1A193C6E5216A02356254B65C725E3CFB
3810CFB2000C93C181A53BC4B16901233D51BD214B178FD3B1A32FE6E5D07400061A4A73A4D8
3CD3E59A98D1DA1E4EC8986B0AD3F995525252D4441AF9D0D47D82E65259CA587F1D3C76691E
5F0459EE3F6613B7459FEC2B8D6768D0594A1222D6CA47CDA2EE591279B6013E718BD3815899
F7A6E4D572C996F8F626DF2A9C9BB8FB1B2B9685573BDA329D9D4D6BB70222414F010261D131
B4D2A5E6A005980CC28FFFF04050CCF16619AF0785E90C2940B7FDE68C185058561D1B33F89E
773F50BACEEA3A651C67B0C90D00BDCB65E3BC14F45F72458B00510FA674C4D3723EED99E367
BBF3212D8390EDB58EA45CEC2AFBB2DDB59C782FBDB6CBD8454AFCAA1D05D91BD4B395C5DB08
66A7042B5348341E98ABD65073FD822CB20E364DC5522C7CAA10D0DB38599B7EAB8F78FA878E
DD874932DCBF72B58F3C56FB86924FED02BD1C760F4285417039B77CD2723C1F66488A5ABE39
BE1F868F816BD4F012380BE167B3D26259F4EC35C6157F1B0D972B5921AB5709858044B76783
E8010B5438B6CEC81D781E95683F976BD5FD50FAD3FBBD2E6461CC7AD6CA2DDE98861DF3CE5E
5169E44C0CB4E75DA587521CD9C906D681D43639C98072B43F9F5E9E55170AF12805929508DE
D34537CE2D959E3A57FCDD55C3ECC1B8B7230C66B517E34CDF3D431A698BB831CA240B2FF10F
8707177AF767B83F21C3732258064B3E173C14293AF9D15CB2317A103CA0EBD0BCA4F7AF2EF9
ED5AC30A07BB8593276D52A8BAF39883AE2613612990EE631AEE29A9FD878D6C98AA781F9B5F
6742E60D5FB024CAA4BFEED2BE0EC6D19893171D29961F254F07755A43BE1EB36903D8020CD2
63D0C43363A68D40FCD6D9B32185DB9ABFE154F357BA3C1943B874CFB7DE71074BE8F1469993
7EC5E60F6199F6AB0CB812C74A27A3734B08B2AB5A2EC0934604DF879148064504605A048163
F42C1B867D2D10C9D2E6A3E2938F9A1AB0507D2420257742777F621FAD9B48EC9C012CEF743B
E11DD70324B2AE26624AF819EB30CF399532ED778BA9EA1C3741ED5B196B5E133786151FD06B
44E9D4473785CA75AA15DF79CD15C7479BD6ABC6D1A031863C3B35046F2BD459BF77A22E9781
D0E7B328DC2D1EFB260939145A230196E82BD5A4A3389E0F1E3C1CA2A2F0533DD793478A9B16
7790D04047266206D52D7484CF4249EDCAB4B923D2D95285846FA98EFB9BBF86B62029875492
04ACA04113EDB9EC511D2259015508AD2A31290142C192F82DD9484CDA0AB26FC8966A295E69
A4ADF76ED06C85C5B804DDADD811DB5441905AC8B36A50A2FF75D5E164B4517A93E97773F7A4
56070A2C5AD34B7F7A36163C6DB0868E2420C25A0752D72896AAC7B9E338AAB44E1D8280A572
562F0C9B1B0E0CAD794ECC260490AC60C0AC7135C0EE205EB0DEB4493D2BEEDAE620A4532BBB
0FDE9646FB43ECF754547B193283CF9792CD7E430D7B8502372E37A03D3FE02663355E219946
BA76DA4D0F3D78C160D39058CACC0A1186EA4BA595BA53D5456572CE60F28D5ADE1C4B837957
2C44BEBBEC40B5C00413105568834E1B4F5494FC8F01BAD10D9DE571B5E71F57DE29A400DAD6
A9794333EE2324C2AC1A3D392DDDEF7B460B3CCFE60314C813377A30E0782CD53474B9DD81E9
61661D95263BCE6E0C5F985802FAAE7DDC9B47F057056C44F75334B2345F847C58D124563771
4EDB1243064107CD218337D63E434B24B5982D6537653103444DADA774C6463477073A2240FC
CFA6434BE5EEA17F24FC2F80268B835D3C976E64C24E8B2BB1C6F516F10B5D8575997D6B8AE1
0462221E1A872DDEE2FA9E45CB8723D4D6706CCC05401D35B2F319D733D37296CEE11103A36B
D12C181A8EEBC677D6C3FCDF0035EEA5E01D53F6893F3C54A4A5A823A88D5F1348947C21A4B7
71175DD6C3C2E456F818BD729B7D9C9EF135164675216C6DF39E82A623C08A6FEA7D0184749A
A5763566D3D745FE0C50CBB9540E40400FD8E626299F35236DF40EEF5E0AA601E3673A2809BF
CF9C01C02EABB1F9CDD78A9FBC31F94A17B0AA94D6AD6914667E0C9B6E21F1FEF13352A1F229
176D6E5B0E5B8BD5AB85161D65B30B94829CBC5447C9652B428DEFC7D14426F25E256C95680B
10CA18962094159E0EEFAD7791977D01B1747BD524717F4D5CF699A36AA9B2DA8306FF4D8FD8
1650AF70AAB831F5C39D8E9EB59D6E268A701EE5404C79D5F8E8C02C5A353BD7EC2ACC17F21A
B8528DDC7BB7790C74783345147F456517EDB169679D88B20DBBD1969EF39D33342978D99464
D46FF936A078D6AE24C15111AEE83AF4EFA48BBD58927C997A18311EF146281BAFD836A5923D
3E6DA44AF7E43F43AFBDC3C6DA722ECF7DB14CD44DDC2AFA37BB54C4AFB0862BE1BD9CBEA960
5CB9B576F4A07C9637D3A49A165E36B84F04B7CC18FB7963E04CBB75E122474E745F1670EC9F
D442BD602CF82B4F5729539F4A6196B09CB7FE4AD114076E79FD9BA37485B09CA69EA7DFAF4F
0245FD2C31060F13C929CFADEB193709370D73416491068203CB0839D8F884C97818E42CBDCF
3196B98833DFC21C525451BC0DDEA56E50E5EB87491AFC80B61C63D16374027559A8B3843F45
72E9D7B154D285113D1A122E55F70604748506547D57B9EEB3ABCB38C07044C83A32A712343A
A577DB5C440168224EC43597C827D1CE641C8300C594FD7E063FAA688BB258CF46775A23F739
C0EF93687B524A396829F1FD015B5CA29A7E732AECB42D0690F99917A1902F53E4A1889B54DC
C9AB1D2A4A24276A2C9A2BC169F92A89067875B3594CECCF71B8A44CCB06B704FE47D4A22175
F1A0A38F345F7E6EB57D05098C3A042CCCA2643FD07D8F6E3727DC134720E0BC62D9A2B0D4F3
F594E3632C77BDC7925847334818BC0D8E16FF9DA8443D96158321A8C2A0DB7BD37CAAAEDB55
2B5C0EFCA944A22D424751E1515B67504CD95DD5C68F4D21BF436A8640E8ED240E8ECFCB4376
9DB2010C7DE7957277AFC6375B14C153AEA9ECD10F3078D02AA98D1EAF8EEB635EBB071892E9
C34C46BE6F2B1E9877D715480BDC09BA727F96BC84B3E90FEA605DC6AEC13AF387D0F210B9D7
B1B7E0041EF67A55ED4D1F223666FBBBABE941C4F2C46D178863FA2F026D67785CB1D2DFF8C2
32D15395C85DC68CFA27FD54258939D0C34A9DCC4616152743F40C78BCF05F02BAF147BF9B87
216BCFD644568C501821AF805778694CD2EF00FA4CCD7D2FB15FA379C2C3426562CF11A6AC71
3C7462EC6790938E9142F39297FAA4EEAB303882774A1266685149BC5AD0083A61B82AA46ECC
09B5CCC93EB0DB7F998FE54081C637A7E82FFBAE30E8C0AD4CB05FC5B92100E55FAE9C252523
A7B2A79ABE9A288ECC6FF0AF3D4FEAEA7A09930FB881103C83CCADBD72A38C74708544955958
C4F01FF92992A293CFACFC3C8765C3442EB8CAB0F872DDEF7202627F3328D1561EEF396F36AF
1500002E746348D9DB2244220A093F27AD276C7EBE9BCEE67E6867E39C0E1A56B6CC8188C08F
7DAEAA39A25C601EAF81EF6581C6A856757C5F8E4AE8A2F23BD06ECB013803AF79A9DE3B5FB0
03CEFDB12AB959E9C94651E2CF14AC2BE886D9D9022750E38547604976B42A4426F41EB38EF3
A1DD23AA94D46C9AED977923FCA3E98419982D72900701B8FBF99C025349A868C4FFC45845D6
466BF424232FF2983C3FFA0E90B99EC48350B56D6801E5C9956D9772CD260AFC21419CE9D313
5CAF4338F26891285BD280E1509141582EA70F164C0E4820107B7EEA1B1193FE19268D72C479
CE5FF198BAB029EEF2540432AB833DD31DA9D3B37570964168625849EED2054A7869F56F6A23
5C744086503FDF38A20966BA6EA105696E341E4B533C8DB7A48F652EF1C3AFCBEA6FCE3F92E0
3072C214A0BC50B317F350760C01A3F0B7FA898ED5735FEFF5D80267A3BAF032951F69E7155C
875F1F7E8C8D94E99EDE98DE732CA99ED28432F07A8DDB76928BEB2B6E600534E81E9DDF1F8F
99B54AD573C038FDBCBB1346BC62986CBEFADF03543F5812081B1B71D233D8548DE72CF59C39
9DAD0E3BE8834BFB2B8632C5A26B6F4FE32698D2CD86398814A5B0DFB2153ECA501FFF53CA02
FE2C91246C2236B4F20FB4BFBC61887624DC2378D84D1FC5D37973E2FC844C87C58BE559D060
B6F04DCD3CD71195F1693BB5CDC95F3F1AB86B8C18656192592FD045BBFD20B7AAD69139E1AD
A037A575032E5AD019527A955C5840E7CF2048C6509001F9E7A014902134AFF756FF26457594
C66F2EB9E41EB0182C67EE05B6CA0175B6A937DC86436FA1244E63D6A628BCD9D5C2833E2DF6
DDEA07A6F06D5E262C50EFD34C4EF05B41B1484694921512F7DE93337FC1B77623061E16D047
2F3780DC9AF3F83948821E40D1608FB9FDD538F65883D5717EE6278F4736A0C0C66260458277
F2B285535F8D8C67E5DF522BC97CB489F83B3CAD0059962C4824240650E109EBF1C45036DB87
86704D2F749380ED6FD8D2FFE9D9775DDD587DDC8CF21CB7A119097AC2662B9BF8B3FF721C8A
2BFC379A48A2CAB1E0A4C790854DD806FF8CF827FE2CCF04FDB39B9EB357A06CD67E25F3014E
AE9D07CEED888552651973BAE2072D951ED11A1CC5DC3D1017501C4931E1BD72FE3F3C4F4896
8E02EE54C4DB86334A535C5A6DADBE950E00062D256D9D1A435C79BA92C88E025AB27925E215
6387ED859C60E143FEF758C818B026DB97925E1974E0F1FC52AB932E8505934C912020F3984D
164319055DF4B8127200FC55E428C1379F4378A629032CA064D4D5A6E7A43F995920915765C8
B584177E6C23C85BE7D3C192EB08143C224A4EE7DDB8B0752F4BCD376B93DDC2B699867EB100
78A55162E4B9957F62A653018E98204B5FFBACB99A960EAC2E1D1BF7838F2A9A504B2A0A92D4
EB157BAEADA78B27ED20C2D7A3BCF48E8F0604DAC482BCD931B96223B29C0B8D4D3415222939
54CFC9CCF9C45C403EF93DB5F7A94806D763978A2930A6E3CD2ACE5FEA045629580339952DF7
2159D86BEE849BE3D596432A0E31ED7E8AB636448427489D01E446771A3374FD4E519062C2CF
B27CDBB243090FB70F94025CAADB048E62A36C879FE0B52D0F1B3B617E06110DE51061CCCE9F
FBE37B6495723BC93C38808D0C1DA6CB516F82CF23C2A91AAB97CBA97418103D847E43C5045A
537C367504CE1AC6138FEAE19A615989E3AE2B74255D9DECEE6F9E9FCD65139B82FEC3C36287
440EF3944BBB4E0D24549BCEDCE5B088430FAEDF970635771EFF726D4CFD2A9B64E56BB1730B
9E3B0398AFD90DD9C1EA285BC3EEF918602DD666F33F3FD15816E0E9DBE6713116C8B9784CFB
B39F2B3BBD8E9E3A3F84CEEEC397F62274540B5E208C6891EF2A7E3DEB535661EBDF9A7A98F3
5D6B99F23D28AA3879CA5B9A4E0A50A5974D2D0E142FF00EE359EA6416D91CEC8AB2CA52031E
B32982CE16582E7C6A6B4CB7B429AD57AF9DCF94E33B6F1A27CB0D07E0634D699E6CA7F4EA74
689B2E13C3DF41916277648C4E88DCF08F2838AC08244234E4C6B0EA56507C3D9D43097AEDBF
CD6A03D5E0B950A20DE54D18F8E1B350E13CAFE3323A0F86A72F587BA9A11A4D4C5765C4AD10
BCB4C38B971BFBF32B061E78C54C718B2B37F7402A68778686E7CA0CCD805BAD2542D0ED94DB
EE1AA64EF97A7743696F82350C126222F217C1FA5AE053A92B95B4803C1C4015BE752B591D5F
543AB9C388B521A301510EC7FAD646EC17D0CE83D92EAEEAC83CF88F4569F1860B2B907D0A06
31E385F29397AA880A146CC516ACD809E58F5FE6FE89F24B224695DE81FD5FE3A2CC640BF2B2
FAAE50E908A436207DA9169218D70EF87FD2B9530982324E37079E6B44A50641D5B3DF0508C4
D35D879D748910614AFE4B810FBEF817DCE1BA41E510F1B1C11451CCEEEE8D687D7E23EBD242
7F97F584A2109DC1251FA8EDFCF137339DE3518FDAE49D71676C776B26A6D83C99F72C4696DE
3A57494CABA0632334BB5437F756719129DCD58D1760C711A40FE7FE507C9ADF2A5A659C918E
13AA5C1D7454F77C98D7F48AED17DBEBAC4547CED62D0B1804227B1F17E96E13CD59288FB2F3
172200DF3F14ED7BA85AA03022A8611BB4AC0BC79B34B4893068E07716D1635A78A3F5E583C6
E859B2A64659B83978699B881FFA93F53FF5590D700BE85D67605160778330EF14CF1589933C
69EBEA1D93863918184FEB64AB0950715A334D1238F6CFEB55341D3FCD917B1C8A9BA6A14BFD
D6348D681A34B086D801E54EC5ECEBBA2E8137736DBABDC86EE288A3171308DFBAAA08E3AF7C
7102796855E211E675143502D36736FE4AB2C6596ABA6FCEE9A2509F1CA6898EC096F24ABA44
0C9EA96A227EB50E62666F6490FC84B57D78D30CB62763F54165C98CFA24E52F6042A578F58E
A8D525ED12F334A8BD3F121C8D281DBF33426DAF6F608D105E1292DEC2EA771A3852812CD6B5
6CD08CEF6F2606541EE7C378E17345AD788D25DCAC0369D7DD257890A6B6D9CDBCC914568CA1
53B6B477C24A622EBD8ABA6BB5C2F5B5A6EB6D3A2FDA2E47AADCB3286B3FF2D16E15121DCF5B
07166195C65B2182A023D5D8D6B6803E9032ADCDB7C3931096D416E0B70885B7806DFAD1307E
218B27DDFC0A8C32105AAA5B62EF815C6CA4DE4EFB936C7ECF2AE7710F5F10BEF20738615C59
7B08DEC72668FCF26DBB9ACD565918F9ED22231A8038738D7B55560DB1D261236A64CD0E3B60
CFB41578DBA1AA241CE74A54DECF38B5F6874548E822D40E4F34EA6C8C692D18E4D1922E48AD
34ABA04879FC48EB3B0A808C884F0E073866ABABBFC25B334CFAF4EF43F7C7DCCEC4D9874E46
30195AA65F4ECFCAF1C3215B3637455635941B7944260036DD3A636A1CBFA002D98F15B88512
46CE002AEB78B1262F7FF64AA7BC0B3EEBC2D463A4619E3D729125DEBF0C29742053CF94FE70
7C377244AE0C6870CE71FD95C0ECA73BD13919BA719C14D88A5E8A2BCACE8C961716AE76163A
2765C35E6977332CCC696B1C30259637176FFBCBE1C6CB2EEF9331995AF70280CCE01857B0D9
207840D6DD0F833C60D7D0DDB69D012360110F4C96E6DD5CBE77CED63883513416DDDFB979AC
25F37A4E4D1D9011DFEEAA27AD91C44C28F1D5F698606364FDF8193B0A04B367D8A20C9FE85A
835D46A69D1C4D102502A45DA8BB96DA9DB53869D43DAD4647E63126F2C838C705709759AEBE
A33FBFEE44F7A1982DA6C81FC7C1E5331E5EA9771A61E4E2D01342A38FE68032B72C34ED3B56
6A9B6B538B4F5CB6DA9FA376184CFB5DA542ED2305DCED2FCB21B0345A1F33F12FE8049011AD
4C5F22986E52A8B3AC44650077B668FBCECE86D88E8CCE771C1DC72354153521F52C9C678DD8
3D9FA4F69A1D57EC1B0C91F20F30A6A174BEB44068BDD70EBA2919E9AE0619B1DE7B3CC92280
F5A74BD643A561DC7EACB2091D122ABB1E3895716B18D146975993E68DA3E1EC61236ECBBB6D
9A1B5B0FE37EEABC612988BC67E9F2D3BC8D252111E859AF552EB20407BCFB5BDCE3DFEC1964
C5A9E76DF633A58C0089CDBCF97F69173716493E1C55BBA48E5A23CBA3C53ADCC0AA090E9550
C7013551CAD0A27106459E27B31255A1550F8ACC4BE04CDFC0C82F1758D1786AD39AE1E3DBED
B97ACE47C41EEA7CD01EFFC8DF9C2D5213C97A16DC06A9C1AC42B75BFC767E6276757C044BC7
31D32AF7CB6AF35D2AA9116E2B5582D7B3253C4D08382BD6D9DB40BEA9BD57FAD3C4BEE02D87
D6BEE02E18BD1D8CC22C714D8CBE776E9612509AE46F5116042C8E64D6719E864A74877AB523
80EF177DED7F12FF891AAC70CD89DE424583167E75B35980CA0DFFAF62D9DF3353F64F093EEB
86ED4836767BA48D8FBF5F1BFAF84313A89EC4A4622C1A1AF1C6429E7B9BB5B264399D901F1D
F3288822EEA3E7192DAA0D6F9E1E9F0E9F9D7B9A2E4D6310D438D74B617B48155977C0959232
198D1F49252CA54DD5BFE8B01C6B3DBE65B7A6A0DCB6EC4EF97D7880D9033E8A7B5EE7ACAD96
8FB4FD6E42D82C460F5521C971982519A3A628D302697B41D5484CE83622F80BBF6E4426CB70
AAE0C164B5C309A8FCA6EECA0A809F8EF09DACCCC674821C90A6175956C54E62362B85698576
49C0D81CC38652EA69D88A340C8365AF4E4C89055DC154769FDEB9633D33F6F4C1976975AD7A
C904E77E0D40B7DED2ECB0955921F6DDE799AB8516752731510BACE6C6C043C47CEB610E17C9
6920583DC5933957FA1B35CA5F0FD0E850B1508355BCFDFC40550BD56A9947DC9406DE86D904
D29221FF0924DB8D24A2B198654B0CB8B5EADD6293ABB2BA2632A526CA38BAF2C8E9D2977B1F
73B2213F47B15AB45FFF99447F5448092DECCB9EC7E35030F1E1E9809CE9BEF6434C5CB58239
D1E4E404CCAA91FEA4EFBE8B712EA446C4AD12C31467458DF6B6F69DA1318CBE124D00B4AF87
71AF415CCA0170E014FE8F31A50EEFCA7617B8CEB9AA4D099A0AA9E7FEC21B4E9EFE23FD6534
5A3FE61B5BA1369D3204D66EB0FE9A3C201B2F1BFC54630A45D2BEE293F0C47ADD1137492ABA
CB90A87376E5BB49719D4A027E4067BF305C0D4403E13B82E6B093D58C17846DE1D6705B7404
8E5DA26AC7D0ABD2F7999E8BE6F294B3F26F9E7D5102EE96E161B7C6CDA4B8D57609851B622E
AE5EC481D8E9EF87B2545BC1DE8DAEA21902BED714B47F3B51750C4CC513803690B0096FDD1C
1DFEBDD93BEC88D1118E30CEA0F5B5087B196258E2BD2B2A21BA498A48BE593D39DE76B169FB
07FF6A7DDA846752FE315D3AF8DD342F6BD1F4DA6293A581F0C590D7FB9E51E0EFD14B8901D5
713A59929B2EDAFFF6F30313C1B0710E48E1EF3B3EBFDA6538EEA25BB7C0D502F52E703EB6F3
F277230D34376F35B775D2179794310D61745763FCEFB593E2DEADC74A7B20414AF22D3DC043
23F9BAE278404C5EDE4FD5CC47CD0D56A154F2F5D7BC62244131CC9468AE4E29E75C5BFAEB19
0BD6E1EB8BBEEC39DC6D4F4CA355EC20FAD5F81A912216ADE68A9840A6AC0921B528FC49AB61
9F66F0EE35FD7CFF4AE7BFBB34EABA4F71ADB1D8A253BDAC2DA72A5E74E25712E436F25C4BC7
321FCF2123C4637F4627D5EA773800FC50E406FDA3930533FFBFA7D387AEA9E5C024DB8E329F
4076202CEE3C7AB77297D6EB72946033CD30C124DFFE0C03FACAE420BBE3D97ABC50991686FC
1EBE669803615CA2E1DACCF91238CF323530EA5F5DAE0BDFB457007C17B4D4D1EE29CD494FCA
66BA88C2D570EFC9BCFACAC774C5351A830ED733DE7DE4EA658FABD0C8FC22C4A6A8BEEE6A8D
0DD38AD8AACAB446B96D520060F0DE62721E2D21245267F2E1D7915F6367E0236CA906F5BED5
521D3034740B91D32CEF208F9338A58F8A83C0499B6D01C909CD734BC7062C12BDC17D179DDF
EA71DE6A9C96C6540C70F6F22F46215FACAE87A4302F008F78DACE5A54C0708FB4D7264C8BFD
D8A86AFA7608594A152D04596BC2791DAC2624B79DBE53F17B725C0867E4F5AD6D5013DD95CD
E96BC9DB1AAE2A6CD061FB8AC6C1B259F39A4AD8CE9EE48FA6BCB501CFCE96E5EBB0CC1A5BAD
65E63588E2E1E8C5027DF18CF4C0F0A720F11F218C97FB22908DC1BD5B3C1EE8345DE1194CA9
83002C29BB19C211FDCE599F4AC1624825D9D0E5FEB31AD831275095DD89B456C5ECC63087AE
009817C1F74D67F35C775A63BFEB55B5D49E23EC0368E35C246A89890D1F0822F0C769A09AD7
BE90D95F50E132E349B3CEB4F970A7D45C4F616B24C057A645A94AA5DE4483AA24FFDBF959B2
BAB60A87D29BCC5558883F8B2C17E391620601AE1D8C13BB3E11D01C372B3FD50F25208B39F8
19238E80A568F592E6BD7762A86B3A9C5035AC016DAC780F33AE5D6B4A0428D7F3A676B74009
D1E4D6223E2FC32A972F92B7611E130E52A13836C4738B6A52FF0E536E48FDF9DE9E55EB8407
C70F2E20699DF9C58AD61C3651E2AEE0CB6180D5D4E2C2AAEB9FA0F176CD04230896847EEDD1
0A734C52FEC0589D727CA2BD6EDA120F1EAB0321D24482415D948CFF6024111A1FE6105C2390
B5B2FA66CCF1FF0249991F5F57939D5D05E540124D192FE40F94B0AB86B00AA712CFA5847F44
8193A307280A1DF1B09377C328C652E7326C400DCE97D3384A6AEF322A8A948797531121DD45
9D8CDBC5A5CC97BDDAEBF5DBC3460B9A4A67F78A8F58C2E35656CC9F8DBC66BE57945A5DF13F
52329D75B4F6DF2716D16576A48CA66B510CE635376487080B18956FE7C820D6CF43BEA64487
1B11BE4446AD456E455B032CC420CF40FB9D50EB183A9E4F15732B20F3B3C66E6E80CCAEAB95
8B06D9774D944B8F07E704B8515FA0C6754606AC4871C41CD9E7EFFF4D0B9117D06AEF7ECD40
AD6B3EDC433925CB0DA909245DE5FC9388B242CF9B5B93CCF21D96A2F0D5B232396A45C96C85
CFDD0A1D4CFE92CBD248E41CCF4FA973134372970AA993582C7F26E1CC99C430EFF149AE3E66
AE6DE48484DAABA836F46183A671215193FE23F868C5092BE089745D94070847F76C2B8DA34C
1B10B61EB3B90091DA43819E9F8CC8F0DCFD449C9A1CFD463F6EBB9C7DEB8602373C3815A66A
0C69EFF518984E4F2BFEE0E90274816F1F78DD934D6C1EF65CA1B039A384EC95847063FB992B
97AEE0511789D1885C6903FAEFAD786A2E7C4F2D776BC06B5DB604C7BD1D3CFC2F7D5396FF50
677328B086F5FA2241D09A417E54D6116D51112DCC34359A5BD0081D2248687FBD56A889CAFF
523617C718ED828EF9DEB5614C6D718E4C874932F0F0BDC029ECFAC5E1CA37CFD6C882202555
959E5BAAE6F31720B6AC528293978A1A1477050FDA8CCF8BC2F3B24068143575A3FC9E80104F
CEE05D3FCBBCC15DDFE91EA70FAFB312986143729BDADB42D2AA123944101C6700207A704E52
0619A8CB313140D57E2082E1043733D69EFC40B7715639020AE28ECC0057AA353E9112BFFC7B
1221645AEC20D3B3CF63077D9E9DA9632E0B1C2B801C0F406B25333D3062CDF03FC6A4C2FE8C
87D6ADF80C755BB8F00039FE1CF8FBCE119C59E857F13D01891E3AFAC323393B700DB3365A59
275D118CCF9BC2AAFD705B75092B304880691FF588F3F2C2DBC63C8993D1AE865412CEB8FD00
C82D3AA6D20B12E6F64D164206B35C10F881AE48C23321053EB9245B1C38DB9AA74BC7198690
F432DE85D9007A650F8C4243E04E0974C50CF4542E4E34AF53C238C0B03D0EC2C91CAFA18AF5
6E7AF797D861185FDF4B909AAA4B85F6C08F22B01C07428555CC7E59F7B1D4909F15040EC17D
B26331EB66CDE8B0A839180D1384D5FD2AE1B8ED3F84E86EA7E13C7D56B7702B04CF75EB63C6
2F572586067325ACEFDF8730C400A1262724F59B94B56DE99E9A5175A11CF9322F86A2F31187
90F9886C1D94CB612C629E7BB81EB8FD5E2BD946E99C0F28418B2C298DAB681099B93CB7C3CF
98349691CFE01E6C40B17D40DD96067AE715B1100D0F6D0CA67EDFA64334E3EDA223B4FB7B82
B0FE06EEC230CE4C822B41F188E0CF738283CE2C626A4A6E59F2AB4D5559AD87CF4D8F354F9F
6F408CAE1EDD9D3CF890022773ED247E079FBE9F20451F67CE9CDAA2B3EC9CD80C465BD34F8F
DD306B66B9355EC561E89FF45349F0309EA8A5F0A7AE83CB7C8948F823C324635379630DFE8B
D92217C2D9ABDFCD14CEB8E52B273B7B00D0680B40EF0212A3EBFBE882ACA25FB6F667241C1F
473735263B0D1BFBEA59D951415BC2399C41DF4CF997B9D2FC1051E592D423B74B1477E76D38
6017CEDFDC9CCBD3F3A92736820B5BBCA6E863FE4DFBC58567D8B3624F4EEBC57C46DC137C6A
BBB5F90C5FB317FA34AF30EA6AC305D9827FF1C110D761EB52103C3B3364365F2D7EC427E6C5
6FEB21EED5C4C9149946D1C1423B0CB3E5E9A6C13B3B69D51FD1A4DCD5853256308C6CC6349E
6D09199BA18E24B9DD877F279FF3C93327320EB74CE8BEDE97A1C184E10410F6614D90E72BA4
351AE9570354CA799CC2F1459719B2D35B7579A895A905D07A02BBDEB7659D710AD6B8E28E8B
05DCC71326CB4D3BB694A3DA64A4A4BAB35FA3ED57BE14CBF304B1B02D7A6B411E752127061C
C300F58E02F333CA671720664A6EB6627ED3AD067A8CE5BD7B6F49124F8F6ACD6955760CBD96
93E100B0E0914D57DE84323C2B06B189CB7CB8D76EE3A33C94A3B9DB6DD7E823534EB6B86A71
2A5198D8AD45A2A1E4E462BE4D4293CD8E0C3C38CF5BCE1920090E44BE480F257C511C80FB39
A99EEC4C7E41D2C030DEAD28EFD5182968C138C8595774895C8FC40944E8D80D5BD9063DF88E
60ECE3A72B0312166AE890C5D1756C9C1B64E6AFACAF9BE99A74047ABC75B0475726AC0DB92E
CAA2CE81185AF8067F0C6C53F689A959179E03EBA0EA6749ED4D55AF20B7E21C286AB0F78E66
0E8485AF5DD484B2F7AA3229FC6F318D3ACEA43F6B6BA222C1965F57F4095468D533575CCBB8
E24242C59F32288F236B7FBDCBA46D3E0E41FDCACA6282E1804FDB04DB6B7D2466E7FC38D94A
C8034C1DD9C8DF679AE5BAA569262D5537FD9659C43D0200582673CA0E9A686F7A58D727BBEC
CA32280DB5270FD917C7E92FE79284F25A7E5CDA21E7D78585C2564E04A514D5D8DBBEEA1D03
82639C736A12F17CE938F00AAA35E1E222FAA4D2287F231607C7DCD9A90ABCE96A9D9CE9CD0B
005142399D5D34134F0C58BC6A3690EB8688007FD7E84E4391FBB920A3B082395DE5EB16EF78
D45F420F37B88229A756191DF8C0BD57F4F771336D985C9ECF3DE9B6F43FA61E90A2B7DE7928
DE6B7A78340759474F8532D36B329A394D9258FE5E4EED1B87F8A43FE53F100DE329F20B9140
8C9A5E6E296185D6710528B833E411FFB54C319C14F7080398E188B9FD7841B74ACA861AAABD
E18A5AF813FBEDEB4A7EE2AA1743B2DBCFDC26225C7203227FC773B147202949566BA7C81F5A
D32DFE3CE783D1708C7B9B8C9B4373042C7C8FD0DE02F9CF42F238E4B51A917E4B63D8C31AC6
E18FDC0EA1249F3175E659649AA0F2D307DF86FDA42D80A3BD4697DA5B1B05D346B3FAEED2C8
D21FC7AA47BA3E2AEDDE00559C948648E9D1B7BB16E61BA87B4E08CAE59E83917900EF4180E4
D733D0E01C54EAAFDFB5514F33848AEBD09720F6F7476C430F0EDAF6C62D83149B03B5132E24
1C7273A2F32233C212C6FAE8973EC98F87B7E329A9EB6736AD05E6E305F7D3841355BFF69FBD
F2CDFC41C942BC297ABD3F37BACB53109D638947D28DB97773B6FD0D1BD3B11246A38A21DB04
406E0F9587745B9A2BE9EBCCF1054A505CAB2705882090D5382F6F99648F3B019E624714B5FB
B1F9E0C8D15D47E5854CAB0935CD1AF213B208B6AC25117A214C6A91F6401A26EDB3D73C9375
11EE785F444B8FFECEEB8B8A0357B309DFC0E9BC186314CE7CFB9BEF2639A2D3C212D7D66668
06D7AF8BA50223E3E0B251BC96CADD4878A29D55D141B76578ED375AA5175ABAE675D96F03C4
DE61CCB198CEE37AC4D1F9DE70D53B0D49313DCEEF64A9B52D6E7C74E75A6F28F82FA25902AE
B49F81B84E4D303952C3AB7DBD5837EECA211F1B823479E76BE374138CE6CEE44BA9941CCA39
DDA6D6C9B4019A5B3DAFE54546491E12D9D439D455AD21FDD504A3E53F753BB35F3ECD0A2B3C
EA4FA60C4F8C74FB5E55B107B719DB7E22CC007F07C6863B57DCDBCAA2716A7278DA0E933F79
780E5086982EB02756DB47250B897F436FD207E988882628EC7F29E672173CE7BE072F6B0AE5
9DE0DD1B08D084ACAD1AB777B87BF3008301955BA71918D6DC67D6E80DD138A076E7C5324A1D
1B02A77321BBB320E7D47C785183C5E1EEB19C6C9C9246F8DFFA1A09500D9B58AF8D1BA891D9
DD0375788F394975C92806F8B4F4B2C2B0B15DF8CBB214CC0D7FB17D8C3F2EF537EDE0C8ED5E
842029524618C506AA21C1BB97EAB019E8FADE46888153A0732DC8C35CB086714320941BA5AB
1C82C65F8CA7C0E4F041552DFFB3CF61DBFBA6BC07DC6DFF0421BBB002A432C1667B650E5C96
F77C6D6A88CB11B200C8993708213528AA078DC8AAB00146F355D525EDC43871B76E77B5BE3B
EBA764676DBFFDC601D6FA215BE533D6FE918A06D0C6BF2FDBD28F8AB4E5C53E3F838D676394
6166B30A6EACB97CF3EB6C9F4C2A1D095E23AA28E07B444D079078A2273B8DF6B3A47A135B8A
BC8137DABA913A5E578090E4C263266755B07C1E96C45887F1AB883482A892AC5C5E7EB612AF
8D71DDB6A25623048979C5F8D1D5FA97E14BC38F85334AA77C91345D491DF96764BB14F2671A
5C2119222F8388A6DBA26752F421AEEBFBD6C473149B6F21599D16A247ED41AE690573115F38
54F8ABDEBA55223C56908D00190C4718DB9206B6C415688B064B183692F80E2D2A36A545E61F
2C8AB09F928274D4BEFCAE450CDDEB06079ABC2A39FE970ED2529C5E08D04B01392F47769752
600C5DB1E34FFB3045F19D7D6EB3C4C2C25559531FAE3859858C312EB58E51338E213494A850
18A22C3F6C9607B7E519BB14C0CBF4127377696E4B673796F3961D7F071DDAF0DE5E59E41F36
C61FBDCD1AB9379DB193877948CA4CF92F1B2B5D9087981F6BE9437C9A28913ACB8A21295436
507E70D3EB88B1B0B6CEC500FF9F76C6863F0DE62631035A2B1CD89056F21FE1843AAFA6F854
258DDDB9D7B65E8552E1F7E0E6494EB76834074989DDE213639678EA90FBFD1876176E6DFA37
D4628C0B16F650771BB18E0290445F66ACB3FF84DD73D16E2566C45AB5711CA884B1C7AF7AB2
9EEC53A815A026EF3A4A5EBC6F5B297F34EB113A737364B5CEF8F7551B366E323CC73458EE60
ED15B59ACD4040DCEC2B18FC849A9DAC4490AEB6B3D26C3BE813EEC167B02EA27571CFA64C33
B0C93129FD61253437A5E4C916D7E388AB6BB8913A752A3B95DC45D2C2F7FF2FC245360AFE0A
716341A5EA89C6601F504084AD96FF89A05B6154FF47C69A628E7B2E44F68C52D3BD87C83AAA
F308EDDB1B5DEA54A99D386F51ABB624FE78F7C6C8BB6A9D7C57C1DE21992F63029DCC00EAE4
C96AC10463F7222134B2CB06583A51F8FACFE9D03B9851FC3441C520DE013F978772F70CC1A4
5212C4D0B43FD36B52800BD4FBA745D0E32AAC2A367321B5B12E86D9482DAB615591C8E824CF
8F8C48B78A8038E17A151568E5D4EB45BC3F0F446FA61CA9336A52C6911F981CA945093D477E
B1F5370DD1D2D5743F15176861CD63EA561B19E694E7E162FAC094517D3287EA85A4884C4555
9A4D29937E188ADA64581718ADF5FB6C901B69D1EF82DD7EFD8298C5BF693F3612F1ABA89D94
7F1172332F13F00EFF77E2C01C238D48A7D8F35004E7BBF5D14982624FBFA0AF18EB2B7C9CB9
4D284FE1A2425329E33BC9929E65CA864AFB7FDA0D6451BE80C95000A4CF2C0A3D17491D1950
E3282DF9AAD61D9CC472023991D2866956CAF067316A9800815C397547C4DED0BD2C4A2AE2FD
EB81C4F141F5465BB67CFDD4077DA39D165444E9A89F291B3F4F9CD6F4A5467397B517D6495F
6BD6AA7408184C1269E45D6E59916586B4DF9B1A7A34F95C14A7DC84A8BE68B8C5A73B6A88CB
F355BB69EAF3DD435DA50F2B2AEAA8E0712EF9EA9DAD4EF5B86122CD060ED5F89365AB68F036
6DCB02AFE8A5673C5FE3C800F0BAA3940612AF0FEFC299CFA3ADB9DF1A8A31228F3DCE3AA583
5700279457FC6F8AB4327A9350D60BBCE173C41C2635EA2FC24425BF796A8A3E3730E36D9CD4
12CA409E2A7DBB78BFD85C57240C300D8610901321BAFE2B00508D25E212394979FD04CC1AF1
64072B928FA24381630E4C93426B162DEDFD6AC85E9B09A0777BEFAB24FD951954F01AC80A44
85A47D4DE63D5593A9A8375809C5B8D923B14013F5554FCBBD4E2E38ACC7A1B3D79D547D76FE
DEEFB10074D330F4FD2E9FEC23D1AEC2DDCCC24DECD495494FC1F80CCF8DBDDF74F500279969
1A91ACB26F6B25684913C42E1FEEA29DB8331C613CBF9E9D4A13015F467B44DB28A941F8DAF0
C8D12C43E8C6F9665D7E69FED97209D5A676DE03462160EE42A3BE1A214167B0B19A8FA36A9A
8CB43B0DE9DE6F6D83706B617A8A5A28CE8DFEAECF282FF42340AE1622BE6C99FB2B8218805A
FD7F0F378378E779C84A75BFE953705768C8283AC9C762F84392EEB6D57B9958826E10A3E37D
71104202FB3F677DC45CF9C7091E4C4E36684AC785049849ED59AA4013720907E8D64C99E9CA
4EB8CDD1DA0D6DF040723F1EE775497EE0559C01123E9753FA4057EE587CC6BABFF881CF3B0D
D4BBFF40A3B80A0C46A15608B913F6E1EBA3E9DEE6FB656241B847FF505FE91E1433A56A4BB3
1CB36898F6A4FF43001CD38ACA5781AE254CEF32A471EB15213053591A281284C096DA4B8FA1
5FECF155AF9F2FBF4B6B73608413B83693CA0ABC1574D7A9BD598F36F37B199443C862466F86
32FE9986BEEB83F646AD74858A90D2C8584EF7A7E87D10ED094F00C582E7D0918A74F09EAC09
3149F82CC7A2DEE0BC7CFB62C74B5095145DB267D3AA1F5E718CC5A1F0ADB68C7C69B2E030D0
E8D105A169AC0997004B1A7492F62C1CCD56B5CBD968907925E42B07CFAB6516BFF1271EF8EF
5763310E5B1CDB15E8D0C0F7D8416730AFE42C93E51FD69989610C25144825FA36BC373462D1
8586EC4D872F828F5928ED0A291928EEF59A7040CB91AA7EEC566E9C4172D0E1DF7D342E81A4
16BAEF22A1975474A1117FB2976622D1B8CCB1BE17A8DF2E1D812B40B75BC26CE8BBCB6D2922
92226D58102F6A764C04D0DACFA9A9FC988992B98EDB14A4DA1A69F1565C7F50538D39EF62A8
A0F0C1A3147DE4DE3C6C9820B48B707BF2F2BDB6FA32C4A30C7F38A1C33C543F9997F7869CDF
B404531EB1EC420A711AA2C790914F209B9E899230AC556FB49899253DACD5819E45F5B07BA6
772279BEEF5929C919FC01CFE1BA26934DEA2AAFB83D4373691772A120BE7ADA4309BF8567A0
84887CB0BEF23AA5AB6C8592545D7C2D611F8322A8EF2454F6B35BE71BC358E6BDD724BDADFF
050F8D0AD37479D3D2139C7B0CBDEC5902172BA2DFBE05F8B1E56D5878AF6679357F313A5ECD
BF1574BBD9A5B6DE09355FFE63D5C2408DE6AE099E5C21BF7B130B7D09DAB3965EAB652B000C
EB4C8BF382A97FB071EFC5AAE7F0E10CA506279AAA3076CC34FF6C70508B9ED225D9D69B6511
E8229E1380C8A865A4D3FA183955B37EFED9832934117842AD2F2B1FCC96D6F2D15C7EB1FB16
28846297487872585C17344C4CDD6CE70AC7D0B7EDBB11ADCC33F06353345B9E5C36D95FBDD1
0FDF56BB6C986C3C2896F9EA2196238568724A94BA50A9EAB29F4DB60DD0BAA9212464DCBD1E
813349D5B407573115078A745C66E0B2E885339A803EB644A15F025BDEC3834D69FDC5B7204F
57F3C9AEA8F723C245BF18DEBC7DE13354B86AFD2AEB3E7C7F8D42C074E8860035B6C0CCD7BC
C8AB933D28F73C44F2F90B498DCE6D10D5FEBCF8AAD4AF785F97AA8B0C468319BA29739EA239
1CA354542E579ED44B325E7F3DCCC672ACFECA480660B514E2903EBBBAF70F7A77D728F6108C
1045445DAB806A811B9BB938B3712AB65B3EA6B1714697D3B96DCB67C22C89795638B9D3EEB5
AFABE69FF4B9B2755355668AE302293042FBC192B7D49F5CE52A72A962894ABA2BBBB9B567EA
D45BAC2E24C6960BF7EEB485117A8AEEC1909FDC3388F5AF85465B67D834A02F96E153EF5BED
E85AEC137DAF7669AB0F3514B4ACEA7CCBB3F9DADB8D10B9A807E5A6CED7955DAE29649A3A8C
770FCCD4CAB201E9289757406BB245159CF3A33537835B7B7C371F386D381C39D68B3B0BA0C4
5795337D8A456AF50284E79D10863C5736AEA7AF92CC6959A24C82A70E9B87D2E1E4C356CA05
C2F740C62D4F7F515E80D49575D8D5208E0F04BE51BFFACE569372567CD37F91F4707E6436CC
83C2D532D262505463B2B003EE489B845A18B58A28A4FF0EF93501BB2992ED6171B0E25FC749
6E989440901C0CD96998D2BC975FBE75AA00953CDC3C55598C9DAAF64E3FB89153898E7497E2
26F02A2A131CCFA722266A13DE895D6F6AC674CB92D69D7B1C01364DDCEB3E61E4644052F666
B652B73C8E03DF06C39ECA69F987FD283741E7102381706F0C54E3A670B9C2B0CE8D9016A8C0
9E64338475E8E16C81B859C790A2C71C6F3D274597FB36654DB804257515D57AF8275F1908B0
453B07176954EF2D0E4B7F9A45B7308B94185FEB67A88EA99E66BED9420C4C73EBE3A39AE804
49E212DF2F0F90F7E13FF8928C4AA20FC2263A7A8E9157219F7AD010D05A896D1D7E82930D1F
DE197F80FF2D2A7EE4F7AE08D8A25CD80562F614837B8B67165F8B3E7827666A8DE5559C819F
00494660ED214AC48CB8935891E419EC17099D6D008A7D71D66B0A193CC892FE2A5680E38180
4DAD9045B9C0DA272517598EEA55B254479271B9F13DD0A8069EF965A8FFA6CC4B77EAD9FCFA
C2A65B0E75A774ABA9855CD6FB9FAF4660A2C81AE79DF8CA51E9DBE296498F5389B0D9E45CED
B6015EE34C9EC09FF5DC258E214474C7ECE7334F03730313D11867BB4FA4F8AAC235BC863688
B43EFC2ADE7F8E98F00895FC4B3384246D637239468C518B4B752AD32818AC17E19B96C1BA00
B916F7DC998161C52A14D69A6AD2E4E746199640FEB1B333738FA0660AA244E4C4738C11FD38
649A717705A6C566CAEDDB35E6B94114EE7AB7361013F1AB2E2A4860B760FEEA5EFAE639C3CE
A7D883F721C52D6A631C2852820B807C20EAB7E6D6CB9971EDC7B9853351B3567648489CADFD
DDEC7ECC635B9C40C0D223FF10FE0E225C8819A6D9EC7BFA1B1102BFB2B75F9B5117BD6D7E08
6CA77E366B2BD67946CACBE95088B019C82187930CC9FF2B43EF65E290442FFA305AEC950F72
1FB034E81220EDD7F1071D546DAF91A7184E10F5FA08A934A23DA0BF06646AAC4EB2F8A9F5FC
A39BEDD431184486CC8C52A63EE0E45CEA6A28CEECD551D569541F02EDB47BEC1833D92DD774
E11DBAF9003C6CD3CCA66D761487D4BA1AD17E75A13EEE172A64010C55E14843EA66029010CB
9D644308348680C3087709FFF64CA55C846EB3EA15D6A0D4E3FC0CF88114DF2A5EA6EEBBA036
1F59415899AAEF7E53AFD5CE30C2BE93F2DCF23556A69DEAF29FB0D2974F204E35277F255BF2
00EDB1DDE156EF2A6F4F7E3DF922B9466BEDCA9A35792A211AB121F7B7F50C9C1F056D2AFF16
5A11283D9C60D8B38F9A618BF44DC840ECB81749BFCCB9A7837647A5B7B6EC4AD830805823B7
A7837862C2D88650A3D38BF9C12E37376F3E044060F2D095E1F21B9492EF80720EE258DCD169
6241DA355F2C91A8525079B97D00760D4BB234F95E5175205182546C12A5F66B65B3FD95DF30
7588D0A50008612C61A4AD5E294A6F3D98EBBD8B2A042FABFF48A7059E97FC7E7AAB20F1FA9F
9C7F724A77DF7FC53E52513CF1D9DC95CA7BC258F150A7F094E7DB91E991084502F1715EB5B7
85D2AB6863AA8997022BF816524F0081061680C23D83079A75BCC6AD9BAC578F26EA9A4BD44E
9FCDD0FF820A42440BF2F22969804D5A88D38C0C23D145385D896383B49506FA57B5EAA58064
AE23E567FC6B3CFD76973EC027DF1248768573EBBED1087400CD5F4C59102333C67F1ADE0B67
E030BBD21036370996AEA300BAB90E24D196658A763A8EC428CEE0B947D2E5069AD4FCA2C075
3939CDE60E2A962930D3D0C3AABC75AC1C62C05DC059224D9E55977BDC8812F6767F323FCCC0
18FECD761D210D2C7E5084C5D87FAA6CD3C27F51C40339BBD717BA38D53AA0321714299BBE1E
3B9F14F86667077D175FED73EFFAFD261766E785E16E8784F099DD517003EDEF62AA43911EEB
E1513C864A622A52C64408F4DC33051CD55E50508FA2CF568D3D6631A772D011E10154C73D79
7011B5E827210D1B31B457C71DA764DB623D1E0AF437B8405976F644D63C23DDDA83FA4D14D6
E18392597FE5A145DCD812FDAD35BD6F71CF11921A001F68B04377E9DAD8E9BEC3DF1B92C2F1
E7EFD1ACEA25C2ACB92199D9B1209151836368D1A2215A72EB0CD98B6CAAC02870636958FC8A
AE7CAC03A9125A3B90CE131DA8A2243D9DCB67D3BB43DF16921DC8B20053D645211AE82EFD78
2051C629A88522195424A8BA5CB44E2860E5F640CBF31DC72E407853D11167D45DF63F6442A1
D0A4F689DD6EA7D1DE978D08F85C57DE765CD6B2F340302F1A5DA25A1AE5431D1D8DC31F9C82
6DD1B4D5A1D9FF023BB1521E39D8D2DBC86D24566F2A0BA6EBA63C991FFD3E82A66CF9E0E8C4
33C60F2FBFF869B0840BE2101333C0E343BB16449961833BA2923D0E02AAE25810E46B22CF80
797569AAF423C3E3A9FE1852EE6AC244CB68F69455966F8B58AF7E4AC473D65358F2E03C0E03
DE15B8C036F652A6AB0BC298300418FD2E28E2F36EE8C8F6EC311C10017080E07F60C4C94F5B
3C5AA2BD1FDBC54E3A555C08C120FBA3400FD2B5757B57A7F5491E5D7936403AB23E1B54CD17
E24E344DDFF72FBB888E9DED5C5D492A8438EFC0A0010137D4067A26C233A35D0C0530607892
12ED925C55E4B0DF0ECECA6091C02FDC00696A85A93048C10DACD7F25485C0779B193E61FD8F
794DA299455F2CC4E48742C16E5DE6FFDBD8D709095930150D0AB4682BB5A45F98A8FF709F41
3DF130CD4D53B47F913508FFA7A3FC7EF91CC3574EB5C9A48364F481CFB49BFBCCF942BF71A5
8D5AD92CAE65BFFE573CD6669E2669D210368DAAFFF5666AD0B6F71005309AFCC032F5962D49
7013B1849B1D4F350BC23761FE83CC85C90552258D0593ED7C9E2AB4B083E0A404A0E1FE35BE
C0974D22DD79AEDB537B136AC4D37F8D982EC01D5EAA68CC889DCB72595E193597E11E7B09FC
5019810C4A10FD95B8E17E8369F9310184102D164D5EAEAFA822AD00443040327656B0D2DC6A
4D248598971CC475116F51879CB1937A5B2306053AB76C0B64C907AFB3DC5D913ADDB1BC3490
9806803991E1791DF09B4A17AEFFDB09416602BBC3A8775179A4A7070B9A7CCBF1DFAF95244B
0C7DBEE11F2A903EBC3820F68E89446CFD3FA8EF73A535C7B98251E4B7BEFA105F6A85F74E0C
1947CC8947EC414B9F28177010B2F5CDF73307BA15D52001C565F254F4882F30B3573E613D5D
E4CF8F483BCF7995750B80DDCF8197E69082B871CBEE0B9F2F97356CF3FCE8393A0918039980
E601E659D5F3A343CAE05FEAC35180B7A733228B04FE2AFAB5E9F03DCF0A613EDC1081F73B9B
FA4EE4F8A603F416B69EAF9F46187A82F2C5D2185A002D31646150AA9BF8866318B97EFD0E4A
DD1D974400A8C2D1F9D75F65090558CDD4B537353A986FE3BE5A77E57A79648632C02B482E36
50D9206FB54C11ED5B05D822D22700BA5FFC59F769D06731C1011D1FBE6793B07B7E1E789FE7
C35B58858AF09CB63C65AFE006886974F52E77FDDE38D2B4F7DB6F55C92321176C816A156C48
0F3A55717818DB5B5FDA5028D6EAAF83614BA82FE5EC9CB3D123370C6FB60203353BFCEC94AD
7E4E7CB805D14BB7CA7AFBA40B1AD37CE87FE666D300F8EBDFC9E0E807CD07DAF7317AC31710
82EB978DA0217141D4722204F43D1EACD21C7F17DCD0E1382439C91EAC03B990AA1BDB3B888B
4265E7720A2609795EE9A6179FC32E5248E1411C909004876599B270FB5D25AB835B4E0510AD
EF8E428A63E89E653F77B478161C03F4B038229A92DEDCF609B06B735EA3AF215ACC8D2B084A
E60D57AC06881DED636317A9B1632BC553AF2245C384DB00A2B6089A597FDE44D208D1AB0BC3
883BD79F6C3DF49D307CAE69DC6462C398D0E68AE018473EC5843B87491558374F2E3A7E872A
E81E168A07763C9AB9CE66FABF5154457299416D74EDD62A7F77197FD30C70EA809EB3B797B2
5CF8F3E37A15C7479907F2DAE8D925985EB7CDB7A78ED3EEEEAAF21D9AAE75907C397012D613
F75D47BEEE3C63CF2FD72A8BE6AAE95C65D7B63B7AF8144F29974E37922FE535F8EA10C899E3
A97C7577C5E1C2198FF17E755189A75A740AC7A449384CF6A957C2FF6D45365D856A8C34BC6B
1DFB0B9753D6A9D9EAF9E6F85E2BAFABFBB7854C063145EC91E9087962438D5227321AD3025F
7F9270933D8B167D25E4F3C70091C357C3B4873BEAC54D4F9B651AB6C4A123A5D28216384F61
DB9B978823715D7AAB2D4DBB3217A9CAB717BDE45A7CAD56B3E3055FF00C705FFC77F21485AB
C19BB04027B8424883D72A979C73FA77B1B1289B99E622C97188CCFED3B75DBA77FE6E65CE79
3E505D4DA08720796A3E09F5D20708D39170CE7E533CFAA7F8486E04F392167EA0A093FE99B8
297C2B1398C6215D4B50925338BA59578C9901655E922E18B4EFC4B426DB28C507333CE4F609
C3B8890F6776CD8686B954F03C08E1FF996800EF0E8F3A6D969B2833FF156F481DBE415FB345
B63FFCECD86C86BCB3A4DF0305D317644F49FF1F55670B5EFBDE62C0D30FC3A98E121F9D594D
BA137AB4D6FEAF7AC8EE0ADFB2B7206EF286D4D7097461726543FF20D3ADCA46221799D9CACE
688F4A5A0EC260031A34114EADA87F99CF414CA88406E758B47600839AEBE4412DDFEF9FF01B
B0A1B8C24D293C6E283FAAA13E291B8B22CB28C70C4BBC384A8536BE3EE208F51617657B854D
070896A2A6866C0C5AF6EE226C9C0BCD5D85BB6EC3A1A3000B32E0EAE0B56FA35628B6D4B684
90B6C7186B34FAADA48272533DE405A733ADACD490C5EAADC73290A257428C5C7AE16E19F815
5B55109FB0A0E970E8F16991202E5E1842FCAEDD711DCA361EBF3D1449C0DC1DF0C2A8C0CA5B
0269AE314FB0B402C291A218B229493B35F6193AE25DBB665927F97B1928524D666EC33E7F03
4BA8BFACDA7050D23D9454DAD85AD711B16A0CC14C2F351BEDAE8E94733FE7EB241E22424F3E
6BD8838B9568705C61DEC5DE3748D918E8821FF03345CA86AAC452C857065725AA2510DF8A06
00CAA6C0C98CDA6DD5F523B26F17DB8DA82A00E49D376A504D86F7088FF2901299CB6390E8ED
62C9A49D021F25D8DB8EC0C8944004642195EE1D1100EECDFF7378E6E9896F391A6A5BAFB888
098610901321BAFE2B31B60A608760094A918195A530E97CECA114A65A7E3DA53595072EF81A
952592136700078ACE186903FD672A67CB7A88335FB557D229FFD038C697A1AEE6F6006266E6
BFD3E49A33BF0BE5081502E8275B74FB5A9C6EB3923DD82734D447A5DF73FCE03697159D8E8E
D143E25C62FCCE0FC3F01D4005B7C1DF9ADBC81A3F255D85276E5E47F7841778ED94396473C2
543604ABB28C7DD64F1252D10711BB4C7633EEFE7DE3DB9A8327E8FC7419C96D6C096EE542DD
6C89EBA3941E8A86A42A8ACAEC9B11E824D115227982C3E127084D19CB560E713EDE4DED7C90
99E10AF27730CA63AC1D8D75588710B7E6A22539AB706880CF38F36A2C529839F5A5DAC486B5
E7FCA8748E85CD4FE72B9206782BDAF7B7E1D91F51996EA6A34943CD9F904AFEC7130DE52A49
91934C511FA689364D2DFF066E5BEE375B7E0101A80B02C5AA368E0EA4FCA434D181EEA3439E
A6398A72602027F415CAC1CFB84731A1095FA1135CB75C4FAEE714843F6117AB1E3E688477D8
CF9D231844A3B0005E620F9FBA3DBC938C6EB5E1F06BEDAEEC978DE801FC94B0257C6AC5CD53
E064C1913C14DD1CDF90EB78C216B0E3C024CF35206E9B5F7B71E1741028EF6A592F833E0DF3
AFE04E474A02367606ACADDE30DAE4E6470D05EB3358FEA023B0ABF864CAC75E4BDC38DBF764
58A459BF38AEFBC3C4C7C2C8B82449BB1576AFCACE81194089B9A683BEC462623126071B1C44
C33644F5B05DF59BB059DC31BE6FD5217584ED9B17657FA329C08F340DF9B60C5BE4EA5F2552
A8EC029CFB9863498F4E0987A7259DF50D8727A55DC5384BE16845474A5FC4E098D506A7A804
75DA85836FE4D63AF6868EFEDA1DDF88AD2CC383BB5999631881307C71108606C8CDC9F8B626
961570C232D5760842655FED46D4952A4F1CD68A2002C32FE639C56634C83D9DE7E46403EBA4
01589D741455DF6CC61BF4B599930ECC63475BBB8C46D476DD085DBD1402D3D9633835B1E104
4DB52DC4A31379FDA9F7BFA8605504DB016A0D4851A6D55A861342F5E639577981E7322DE791
3C696053CE877DC4FCEF5AC1169A82F5F6FCB6B0A191F89F73C5716EFBD51FBDAFE1850EB007
CAB5326293CCCBBC3531E22EC24D9F36D2F5F0257A53249617F3F44907B70042BD72E7BB36FD
9206A0C9E7FA35D01F4D1653C16298FB2EA00472578737A9EC5352AD1574AA8107A67054FC08
F1503127DF54EDF74E27A725BA17F5F9C9FA8B15D83E9767C9259C53537E97A143DF8457AAA0
84A7F1EFB372D9CEE21DCFDE598067652F40114557DB8950F999B6DC831412CBDFFFA08FFA60
86A10AF54BEBE10DCD481FC9414E4042DFB5A093EF543AE14E2AB4FDFD40C30ED1B40A3468EC
C8E194F2284E1DF49A7351D4D8A7FCB0764DC7D3E780E50544B0D2C13625C2B93803F63AA28D
A81C7EA92212FA96CAC2F64763E46666EC006F8B0FDBCC6F19C123CB7C913B754062FD84122A
221338891908E457A1F70AD7920392B60BC28B3C65155DD356B1070090C49340BF6EFEAE03C9
2E1FB5674866AEB3297EC0220C91F8BB04BF837077F490FB3E9297F8B60B5BE4AC0F42787463
B553F2EB0359DBBEE5E317735E3BBFA55B73C6C5E165866FDC13842BD25535D1861DF4F7130E
571DFA358601E6A6F870B323F4DF9FAB195BA9DF7E0F8CEDEBBC3450EB972DDF293DCBB8DFDE
3307810EF09C3053A60114D0FA747853FA6D422E0DC2758F34492E39B8F1450B698E6133CCE3
D263BBC2A87B58E42F4087D588BAFA35FFF56DB4AD47EF207D946270196F649A6E9B657ACAC1
E9029AB51D96EDBA156D16F847845EFF4DEB668F9CDB7AB724698C51A9EFF4BDC3C42348E96D
5689DC5DEAF638C0B240184D666A820F09EC2EB0D5A8A56C30514E16795668329F2B14381B3F
B7E42E849BA3DA19688E475B0EE6CEFA43A9BCD2FFB5F3E3AADD6C477AC39EFEF1D211DBC339
49F7FBC9F28BBEEEB7648552F438C7CC63E4013D54A90C8139EB5B157865BB72C0B9E91ACFE2
E1C2CC9674A5C339F88C1AECEEAA78DC83C282022A917015832C9ACE7F207C001D80379BF992
0503DE588890B6A017E5DA8AF3E9E79A7FB0AC4378F4FDA46D0E7D339B7C6521B3BC4EBE41EF
5F93673F8714EE43BC5B5DE91B6E3D609AD334727A8005BF075149061A1854D1F193F1BB9523
E3A61D147AF4F8869CAD028B9358F19BFE36E6E71FF44C1ABD63CB466071BF799D61349B24A7
3CD24929A975A301328CEB254AD51963A81F30990743E00580126C5C91043E5ECDB76A4B8EA6
284184DC8D7B3E5208CD7B6957872D152AA67C55054D63CA8089498C834F0C6055A183387CFC
AC534DAADFD0586E9312B0B3937ED1C9A61C96CF576AA41B2C1F3289651FB8CE3CA3F5D01776
6A0CD3D9DEAF8DF675A69EC77165D62087556F60FB17912927377C4C7F69AD0D13B7C2D22A3E
3187BF1948FB7D06BA541126966DEA8401292861D2E45C703C3D38D2A06F8890E64CBBE17602
4AA68D9FC431165911ECD2DE108CECE49818ECF89FFD32C76FE711EA3FD834350D568F4CCB6E
A396FBD70B617A882F25C1B5F4137849A3748955E0E825AEDA6011155F3B8B4036096C2694DB
BAF882F8DEB040944F0334EDD6EF0FDE989538A7D7A06209D209F79CEB09BE51424CD0B38B9E
EAFF2C4962DD6AF3FBE890C7F46F977D7A7A0801D2127CD03D0476E56A231D9D40727121DD5F
AC6FAD2B71AD34F0EE44C088F5E1D7EC3F620F2F52517A8B223E083F97A6C80B6FF7424473BB
FEA5548E17062F26425EDFDB5EB327A16E6048FCA43FA6A3B57F6281B2A12EFEDFBE4E94F4C8
D8B17BF0C37A6BFBE13250260DC8ABFA80B0749A09F2EE7F660717E05D7ACF6969007D8C9F53
B074611A94109249EFC986D556C5E31E48E7011EA34A52872DFC66D585AE313C630A2A84B932
93F69FF3FF06980743E9A32E6A3B3F11127E2996EC6BB90E5D6F00464083BE85E5393B576C16
ABBAD4978B5FE9CB0CD796E886345B25012A0415983AB0DE7FB0265EDD8FDAB66B9FA072B45A
E1992CD12C1DB5E3D6A68E548227CFC5056AA4A26FF09F63277BFB37A4BFFA826D18B6A0FFC2
1DB55786766737BA99E20B916D37E810B2C4A52E280FDB9CE27348B9460926F59D8F5BD9C4F0
24E726510970DADDED8B4B8C4A8BB18F34EC8F4D7433E6C6AECADDD4C23126DF0D8341A54DEA
E9F3322A582DF6A0425F3CF416AB104F8D3F764923C78B7CEC0BFDDEDBC86ED3AB022034B4E8
799E769367DD6B44B81382B01F765B725475A97EE58E3BC6F00D546D63FD390406764A7FAA82
02401ABE74D85AE635982AD00477D490C59B264876312003A1C61857BBB9CD6AB149EBAF718B
40360E47A4A0ECD6CA564835A8F572FAC37CAFA870D394D635CB0E5A264E6A4D3B38558C621B
254BDF33AB748213B21FECC099E583260CCBFBAED4B7F00E2A883431FDA8CF0781C036F99826
3DD3D9770E517D75C61EBB1ED4FCB1904369F31423BB4E5DCD010DD5A1C8CD4354686F921CE8
45B98F903E8035A95E6A200B262ECA94CC61A5264FA5BDA951A8AA5AB7448E363C37A0FE1A14
81DC983F3392B83650BBF50BD8E96F7E1FC6E39B91E4E35C17C23A0FFAA5F9B8D22B5C77994D
9202F94A84A92B6AA1D63ABF40FB62DC6BC225425386007516B95D8CF2B6C99CB80086380D49
1B49393BF06E809B6B8A57EC8B226D4C07EE0BF34CBAA35CE394060E833DBD3E7B8932DCCB28
DA486A59EB9B7915E6561D4256E0B0887B0375971422A7B4808E2FB859BE6EDB7CBBD35CAD5D
98FFE517D05F6A25B92661816FCF6CDC988E514803A43634D3B2B1835F12465F18BE2E38B26C
28D3D8C5F828493C50F0448E29CC82C2E58989526D7AE5D2DE1A12AE2E64693D1487E0135DEB
93E41CE26D5CB89B4241E34D6B2BD3B72CE9A3691E9BBCFED93B8625FEFB32152F02F7727C9C
9338CCE74A830DBB837113B21FA6EF1C61E4D18D969B4770DC01A50009217270C888FF3CCAA9
4BD29A9087626C40D17399BE568EED4311DA10282B875B5334BE9CBA953160EAE68996726958
3B69055A3320172DC627587034675721A7BF546427BB8C0C787BBDE892B4F179D1514F49D54A
45AE6D37AB05E7F35FCC4AC84D9100F9396FF28260AD68D8965FBD5198B78545A1AA4E33EFAB
3EEA196DE3B61AE48D1A3232B163B0465611307A7EDDB355A46E3FC2D25C98310446944A6A7E
E4D358F3E38646FE8B3A640DB737D0248C564CC75C0E4D7EC1C723B330643EE9CB29729A08A9
B33694954941C9FEAF4BEF97F88206BC6B7DD808C538960FE6B98AE9CF5AB32C9BDA1A12DABE
705EC1D4515FA048047C0B264479109ABA515993C73ED30E00154A4D1503EB7237F78CCD3E3E
57052444394ED9AE98F4B1E391DF36941E563D5D492495F8C7249A24C2429F7DB1C4A431B4A2
B1E8DCBE28457CE7B414245E3A177A170C87AE12ADCF96F4757D115B16CB0FD788C77A1F9FB3
686BDBC927051C4678F83E8DC3B96468C5A8CA83A46C7BE62663BBAD179DBDC55BA0BE6DC1DE
5735A0D026103094BA57C155019E3B86A260FC7B3FC2A0ADADA5B9FB56029A282357F5CFD4CE
E02B31AC601B573C457F4768C182E7688A66A8A0BA05EDAC2DBDF4FCC88FD61F95ACA333683D
CB9DF793B80D5AE280820C42C6309B239BE4D877335140130BC6C72DB0C3E6DE3C94F462D1CF
7D9D2F1DF28B93D4FE7A92E14BA3429BDF0E8A4338A6582DD26522AA5C729B52E686A720F3A2
880B5671C626BD0EA0AEE1C117EA3E3764DD05FEB40234C7F2B95EC801CFB63AA35B6551421D
E7713B1AEF4706D246521007EE358199E77F3FD39238F81FE6880F3544D1C8A7973B43DC220D
1952A290AED70FF330007889A222A8308575C502A2A229B0692B69B2F6B1785CBCA28F1BAB88
F89660C1C466ABA3EC761FF61DE205E095C6444EE95D02F445E09657991AD181D1325B248E0C
3C69CCD3A89FB16420F6F968B2F6AEB82994277B95ABF09791FBA8CC559DE2FB78FEAE6401CE
3D03C9683B22C4837A580F06B1F35BE1A2C3B9802E36907BFDCCC2D9A8CFF3C8FE48B040D71A
5500DBD3F48215950B434EB91AF8ED0440C28561AA8E39CAE6CC1C23761820B1514299B0E018
4E943C606AAE3D6C66D3306FC8CE658B446123C7599409907369DB32021E6713FA887D8F94DD
50A86FA74ADAC8B5D3AF085093C7D416277BC9068B448DC19107CF83892618CA5455DA9C0FD0
4027E299E5CCB93C56D7B2D5D951626C621A8400038890FB211939DA3DFD20A42761F5FC4429
A3F801534D3553FCD2673626872C1BDFCED9B6B1DF486DCBA6638707D6E5F1308A6385541EA5
3E2CF40BF259EE36249F3A32B864964479A2AA2792B55B81B70506422E847E5063660FF5B15B
C19E64274967508AB5353B6428AB17BAC7FEE212D321C9C6DE3FE8A34749018E5F57F19503CD
D1E0E54E7D0AA3C8F8FE235F473E343828ED33514FF11B6D6E5FD84CAE88E168D0C1126DAD64
09C098AD4B106289CB5E3968F5D3DA4B13285B749B812A1B5724A43337B9F6CDFC7D1A9881FE
70DCDBCBB1CDED41AA15248A9C373E2C22BF57006ED558BFE985D533F45E58ED1884F347F4C3
B24D159C49CF8A491353AAE81D00F94EC899F2C6390352831F84B52606FFDF14A2301832FDB1
17CCDDA22AF5288EF1CF9295BB77FF54F014CC8107CAC278BACD1ED4A984ECB96F0230C533FC
487415BD3B8A50B6299AFECF242A747A92081B7FAEDCEC3EB384789CA10DFF04BA9934B6F87E
4F06905B1341A6AE0281A3A64598448F7A1DC7DDF6308653F6497AB133E3AA8510005513CD9B
B5AD5C5C1708D4A2F484375B60303A9F284A4337C2EFAA037660B5F2BD61A5AB20C82BB582CE
902AFC34577EB882BB91DBFAD6FDBCE51275AA63569526B53BD2FF81BBFED338E74848F6144A
6A471491542A69F48D70FB98C3ED8342F0EA7FEE57FCEA6C646CAD118811E3E27245CA83AA92
ADA506B9DE4D054F3B078793997D5B8041A9995D0D8A2A636018618B9F06F57E80956D013FB0
402EF2691759ACCBFDB17EA584BA57C550F78B9C308137876D461B36569CD507130E8F0F94FE
32B0E4E122920C1EAF7964BC3106A316E24E0F1108543773EE3373B473767A4A90EC313502C5
3B4C199019B13507BFE4BA32B4A854AEBF84C87AEBA8C81D21A36FA3E311F969F9AD09431D7A
B84F535AED674A1CF05C477475AACD43AC1AB7EA13C48A3B247B18E2F8D82CA297E13F1B6341
A8B9FAABFBDC68C6EB5DA22D72387CEBE06165C63ABE0FD9CC92B76ACBB7787FA3EC0F7641B8
78BD76EBD2782C93EBAB525148D83EE93B1C734BC2B94B5137EB1F595E6A4EA5129E519A4954
31260D42ACBC62510FE05BDDFA9AD5DFB3606301AE6D7FCB2B572B8E567E246FFF658ABCE1C2
859C1AE56C4224FB535FB1756C71C9B5EF77E9825FCC7E8315F5CF21F11E38A520A02240F9BA
2C3549027E56F553A8767217BEF204910742C7C7C4C75F95EFA3780FBACAFB41C09B02110541
03EEDACBDC40EBB942B3AE2BD3D9260F1DDBAB916E638FD108E286A053B3C463A4E459552447
458D9219E0987937A940200315DD90DD1FD3A988F2E08CC1412835D3D462A71FDEF54A4FDA08
207A596897853696284CF90D1EA794B65618C3A4C510FE954590A06ED515BB7E70AE6C4D1AED
393CF1744E2BC149CDAEBD9C4B3A13D67A66AF0DD0536465F06775704C73ADC9FB2D3B88DEBF
44E4028B867FF55D532ADF33DD5767B4EEB68901C4AA471269A218A1CB03FCB9456E9A507E57
60982892E452D4A623AE7C8BDC081E46E8C666ED8073F0AC827968A25D1A5A8FB6AE064BE1E2
B8FD88BE2540651521D4E60C3CE240EEF192FAEA9E3852296669F977D092D74E6EBF219321C9
0BC4B497BE458D2F9ABA039573F37261DF4C9EE8FCD9BA471305A2A9CEDAE67374BEF91F5D94
8E2BD1BF675876F78A6B998F32E906240EC3AE236F0B621AD622119DDA900AB4E7DBD96A6D0C
BAA1E5653FC695AC3356573F3CC7D44AFE2BB6C3C8A4834B79E44391413F42FF0F39BF1E0CF3
9299B5DD80203E4F8513934BEA6FFC8106F65E7B7828303D3ED9351353643777520C6A20FEF5
8E18BFE544D06131D34BB1D0B85EB75965CEB71EFB8BF1034FCD47D90F238AE1DD889BE84233
CC53FF48B827D57FA0D2AD3383C1CD52A0D971C47E80267447ED241CCB346E8A48466D60AEB8
62303353D30BD63CE965753D5DCD0207F16A224F65805580F4EBFF87B988FCECE20D411B2318
CE87BA7AE74AE7466270BB544F86F1070637CD45FD30A27031CE42575A8E58FF7BE95D6F44D7
0BB76F49156F1CDA09123A1559CFC4C5CE0DC69704185ED756596D8B26DED83A3E18A414A132
A75A251A58C62F30226A7A64C9BF30AD7E7201587D17E43D5C6E6640C5C7968D3CAB013035F0
F3551E8067BAB561667CE8CD280B84B7D607FF0E50046AFBFE9846EBA6C118972CC3C1B92D50
11F6B11EF0D1E85BAEB6371E623DD8DD85E65C6A456DEE6F48F085EF2927A8B3C4304E3AE8BE
2D32C2329F9A50D8B589E95759675FBBA884184782A0F73BA0CF85D4E0F9204C1E9D9BB337AB
EC344DEEACC8ED51D93A855B631B0DF3D0F07789AC0B0DC439418B8EF30C58364A99F764420C
7E317E8C0827CB301B4B4D9225D0704ED13FF4AA816949F84552309EB21923F726F6EA2D28C1
76600CD6EF24C42996E30B6D9EB33D1E774B673ED8C596998E9792FA6C531E5A9CB2CBF8A5FC
3B09B4DF271D62FE8C1ECE1AC0A1D5B10CB19D203D21B5C993592F2828AD8A4B199EC6D8916B
FB6BB517B593AE02C2F75FD4F3D76C0D9B86A70095F2907B020CD828075EF8869033FC9DCF14
3AF0F5FD21377377D9E3E361043E6F4B2D6ACFDD405C41D9BDC26B450303F4A4FE7900EAC633
9253086B474CD849288236B1FEB6EF4D970573AD69C9C82D97150768B008EC3940F696AC6507
CFF8A8A59FDBCE82F4D4697B05E72B817BD5669FA8BF01EC9F7506265469E57BD0A454A54E7B
3774E28BAB595D81C32C048E660E744A5BDBF4000F6DDB0AEB76785CC35F36189466DEC0CF01
C68E1D5835D0B7B7FB5E02E4DFE5D62D3D4A9391E919A6B753C3D90AE71D4A7EFE66CAB6FFFD
CA92F7C422AE38DAE2C9312FE2FC74123AA9E42FD7021E940F4AABA9D15FFAA386243F3B9A02
22FF1486F98C9CE305B4A839943C92A631CBC5F47F939E320968E711F2E8B62B682A03E6F088
29800A3B1722A1F95C2425DF8142A89C76AFD7592D7E7547BC5B6D77B2B3CA9CD17F671575FB
3390677540DD767BCD343B302E452DF556902364E7CCC7C8039B70791BA2B0DAAF3E66EDCD2D
5B2B10686599B0B2AAFA9E5B8AB706A3123C2B0CD41BD20072BD8D7ECF9D5FF0C9F8C887A79C
02DCDDDA0BB1A25F53D588014BCFF4A793A6A2F83918B22C57548EAA967D3C2984A37ADF52BF
DB496B2A98BD3806682409E628480AD31E45BA8810ACC6977700771DD0729A56A9A7F9A82997
4772C34B246C62E2D361B22829DCAB0484756A115725A057793FB36B05BC15235638E06EEAC9
258C3559F404C3092C30644374BC2E0EF109B6A89629C7AF6D5BB4D5F73B2F578A629C5B9585
4D7B942D779C1C251B6728739B8A82424B0B4ECE2353938E8EEA1E459EE8CC549E5E3244A345
30A98820259A0D356D48357C358EDAC1A36C05D057A596A6712CD45B200715135955FD37AE52
A6F8BC86AA95D93088B8A3D34D223DF6E882F42F9E2B631B59B11C4DDE8A6DF5AC06E6802DDF
904D846A1F5BCB9663F7D7D6C1F37814D1903D5C500975B7E4B469CA8196B034BAE22DFAC47A
FD28AD8A0FF3FE1D6924E6A44884DAC899E030324D0B58082E938BB7EA1F5BC2869B8F125793
3C4A46374A49A2A37D6FEFAD4D554869E63858132D6543A8C74F13C819898FFEFCCF0B490901
81CDF72B1DA575AC41218AE9F7FBE6CD8F374EB7E723BC16D8A1A6B5FC4F83A13569233B7E73
5477BDAF216950CCA8BFF03AB6C766AADAB26DD1B2814A02476AF5CF4817F187B084D8BB43DE
F8A78D211E1C8FF663A509FB5C184CCBE1791E553C5814D2A62113048579624D3A1FA84DAA2B
06CB45B888554ADB01F522BA04E519CA31B1A9F6C80B13569CA4F32C5D52B15F96211925E1B2
11E90D829965D75274BB512B2BCCAB53B3835BF7D0C0812ADD921B019B6F9A7386ECB44E360C
D501DB77472CABDCD7617CE292683EE7A267077AB09D41E012B0F0F6B0D88BF7A998EE3CE358
AF3FBAF34F6E268CE4E1221DA756234D4BC7FEAC281F7E47B852369D84109A5868B21E2A8693
B9CF27151A1916116053E12807E5B72A7BDD123735FD52CAA482610A6045D8F82472891F2635
33C656A05BBD26D41CCF5BB9648085222F8569F5AAE053FB4738DFC03C26E46E3C9A8BA78ED0
E309F88F4B55CE50CE875E13C97D62AA2CEF6D46B8C8C56E02B14AC38B4EAB34BC8BAC5F1F7C
963CFC17167F4EB7C680CF51D3A5FBF0A0E1B0BF5C723016272D7EA3BF9F91A2EF6BE6227652
B2F7C9E932BCD66D59D431839063D99DD0870D93CB7D685B6F470D26BEE9CECE2FE498694621
375E95F3488EA724AB2F3D895D21238C5C06E6E8D308B9FB0F145C1A66AFEF7BCC00BF38D33D
4EA302EF25AE8C4A0BE2CD99DA8A88BADC55FB9B4A0115A3069DDF1E72C1089363D916102AD2
C09ED31D13EC9DC54BBD25EEF884FF08B5596EABF1B94B505E2ACFE3BE4A4A473CD31EBE4DF8
9C303AC79D83E6D3EA045CB3827BC0DCE0B3B84E21B6CA6327B10338D8BFAC7D2D433C255CE6
D12D6DF15F6EF5EF8BA1ADF43D4D6CA7DC9892040B7770D93B672AE7002F3291A4F83A56D38B
BAC6AE69E43A3F40A36290D585E3D5E3769242C171C686484D50E389CABBD88CBE4DFFD787D1
27B1674DD40B46CC7251BA7A76344BBEFEE80BB9A0D28AE8369F9DBFB3A78024238DF6795118
EF4D10B5B28C084EBE41E697D6D6B183F1752C923114B845CB9AD5623346A244EFBED38E4B89
67A0B25A9D29C95E507BD27BFB5AE62D9A4406816FCC0E94F9263789A4A98195BE810765C358
E26C2277016EE6C32C9D7CBA0AF08EB5BC84AF151069200F1E6EC29A5A6F3A515FE7242767D1
ED8355DFB466F0FF440F892FD2D120D8DABFF46FC395979E34EBC110816C6326ED7C14E1CD8E
80280A4F1F935E55B978E266D00EA507797EE5F33C863621CB66A2DEDF7648C1A59260E82EE7
76C3F85594FAB5C3E280938872203F35F12E27B94E66BD20E25603929B0C21AC7C2FAB2B0382
F429613BD0CCC48015F16FFE8AF8CA10EF54A247E7DC86A6577311AEFA0A1FE350E7ADAE7E21
94FA1305358BBEDD351F2E6406E8DEC90CDB41F084A54B0140B4135E3D128FE5A9C4B3F0666F
B5F02EF014A53912C29D4D0C215765EA27F3B4063FCB1094CCAB9F99B20D9EA0DCEC7DFAAAD7
81C65AA6066A2E4E2705362A60D83CEFF05FEEFABC0BFDF7B7842A752B8761BFF3CE914D544C
B826DADE7FFBFD90AA263517BCE0D247248D039A35FE30FACE0C07E55FE095064DE92D56547E
6D45C83F29F55C8940E5D4801B1B5D33CBE59159C37E69D4330668F68B87B80AEB9BCF0DB3CA
CD8F96BE53EC6D0042607DA924FFBA123079FC7C0DEEBAC56D38AE8C1E5E7B9F93EA7955D581
F60E931E7E0183741E56498CA3B3EF988C0E5ABAD734773980408A6EE7A9E828776472D17395
D417FD75A6287F36F7FBFC4708A992C87F050CA2C7842FCAED2E37E3553FEDBB0BBE867F6EA2
7ACB63103C4947CEADC086CDD7998F38924F1BE731FAC3667ACF3D8455D1BC4ABD711D8B6271
4A4453F511870B2CF5BBA31C74780ED44D117E1C942F9E7A4CA9784EC2BFDEF29F123239FFAD
DE751EF339835358EE009893E453958F5036492970994BD9B7ABCC24CF0D3BACB902AD4C56B2
22402986CC9DB4B9A486502910DEA3D30D62B560A20818C58A1AE41F88FA357A2E48CD70D331
C89F4D1CFB5CE825BE467B550048756730A510968920D4EEA719CA4CBFEE1800D2C5F6829CB3
CF180684A9F66A687D55934CF43FFBDFB76D633144929903594CB54D58739F0C7896CF6DFD79
A2DF31F44B216B0A7C6B892CCFEF37C12C1F21EBCE6D38BA7168B894BF1706A8E6A3C09DF624
F74CB17E075C7ABDBEED94485DABAAA96DFC096BFB110BE9567D097FC482C5AD8F059F072290
9A3A64EDF462F34EF8740028B95F7EDD45C13F41060FEC44E3FA4953E731A401C8F081997804
2EBB09E9F8303BD3553373C3128B064EE2BF2F13F7E08B901C1FBAE09A38C0A660A0E705AB88
1B3CCC257DBC590B699F4A05407D5AA1B6E52138FB7CB3D42BC8C38D00DBCF8236A835AC0B34
7641F11C0EA705F6C0D5E0DD05FD75725BEDF77176AC31CA827DF5822344DD329FF4AABE8219
E2CEA447CF8E811199EBA7FB390113A43C917EC1FCC321F6733F7D9CD1650FE8C00090AE553E
3C9A50218AD8A1267896A4831E69B3041CFECCC76858179EF8D24386F6FDF355853486C99CE0
6B221ACF7CE8507767E2F9AC5D0F508865413AB4069C3BB1112333734F6BEFEB7D50689070B5
D05448EEC27A3CDFCB3B9897D206FA88A5355F305721E1C3F3A772456F745FE6E55719872E87
00BCB39951E6835C77352E08F531C7135F59839DBE7B7CECA65A8680BBA243A9A0B72D12914B
9B443CA1C0650098CD2B8F13FAEAF33727BFD86D3D0145E1E2F5E278C1B8CDC102A94856E60A
1966DF388E219F054B5D11B11163D9F2BB715E6E5E72C8CDE6D571B43D15DC45ABEE9A4EE0E5
A52CC070D26A84EA59AD45B2A73DBF3F3EEDCBABC0E12071FF081CFFEA66C65E1AB7A2729DF3
2B76DF44459AE0989E9C36FC6F0F734BC85A4383F380C770ADA26EDD7517541ED04697D37F4D
8591E5F78510C5E0E298A419E44CFED0C1F0D635D925ED2EDC4E12816FAEAB87998FFCA04F85
B85C08D06D27C36CB939A14455871393D9057D67A34001671C74796AF289DB1A6CD90B129A5A
A3CD6870ED3D88922BC463B38FC9580AB56F33E6B5890B75C983BAAEF6E8923C2586678DFD41
C9D8664101B822236F93A04BD5CC3B320EE360657A5884E15F07CB9B268C967477803823F967
66893C2C2A5BB87BF11CB4769D6658D45CDBA299D4A6039BBF027E6CB0A3489AD3474552E5A2
FD20DA2DDAFDE55927DDB087ABD1D727E51178014C9836962AE22D0AB234305196F2102B7E1E
1C4A5E8E382777D5BC42E9770EC24FCA8E5FCD4BC747525F7FA391DE53B294376ED3D26DC7D4
1A4ABB12DD70E049F995F612C240C8F017E671B47A859D395F402932898ECF8BE33C4B58F81C
2BC5FD7E0C6AADFC300BC68002B7F1D00322A28F3C68BD346E6C5DEA709B36D7F8635921CBEA
C0402EEBB36A92FD29066F35065A82CB95FD46180C5199165B88D48E1E77B97FC8946EFA9933
3A3909C8AFEB2681F6C50B781A4C845788B9ACEBF45DE8C334B651D429CE7C740B924DF54A45
7D40ECE8B2A4BE096D4EB35A42B720761EB0D5233C3B096B181ECAAB751415C028137637DA11
FA3C5D732FD312DA4E2EDCAE33E9FB9C3F026151C536672F11B220A19A03DF800F34D3ABC7BB
2835733E8CD214B0089A204E2313E13135BF6C0BC2A256FF89C8C27090565DE65FE7093BE798
9E53112C03280BC275507666527C387A5BED501F1FA769CD44443E35505581C9A3C08D2F8DAF
4FA3F4CFBA1357D8E49FF82314EF3ABAD4D97775D91EB48CEF51C14CA31ED946D96C4A3EAA39
C5C7A3FCD0914D9B3B5C1275BD724FA32C1708C21F5DB2BA7B312D6FA2F33D7090D33196BD94
75C58B4A73DB13DFE24654A1F1C7B35EB5E1E3A370461A979C0AD56276AB2E5470F0658839FE
0CEC3366956EE9E0B5726CB68DB2399CE16E2D57F8DFDB4A6F5E49EBE28BD363B97A086309B4
964A5033B6D78235700B1AC4FB8B210E64737A6CEA4D58D4CBA287EB65DB38F78C5ADA00EBAA
35B40E92FCA825EED5635216CD72E90324606873D0AE48ECC22068468AEC18D647A6DA9DE18F
D07C0920982CD3014FA44687A5AE3605864E2BFE23E3561ECA3D97564381B84546B0ADD840DB
4F92C68F66F53329FD55BD9AA76A0BBDB290F4D6D270406EDB56494E4632BA4D70180B210EDF
5936C987200AFD7C7DCBC036539B8EA2461336C0312764B0557DCD4B56159131A2DD352D3664
A4ED34036E0BC4CFC0FFDBF28C0BD8C2468F3BEC5A4A2179B89CE011C69C451F80C3BFB70F63
1D7E24DE7CABD7824B668C76863794C44AB7CC9D224D2B27787A3451D04CD1D761A20205E725
588FF3F133616EFD3F8543C731CD671831D88D8C3F730A2FEE3A29DD04774D80BC4BA885D360
F79DA220F97103DA0C2302F7E2F38CA2DB9FAEA4885A3974B3C65DD918FC1E6812E56B83FE8B
DB1CBBC88BFD76CA382F1041168253BDB7F062352540E1D8388A2CD727450E8D583825FD3D18
70F1DA04302FD0C24FF024142D289F5C8883086DD4134D5F2287947D80DE20534F625972F318
40B5A53AF4E0F7E7D4660DF8D050D5A7D076995E6474B9849CB3AAC240D0B54A2568BB58CBC8
E07843D35540F387F88B4836EAF8288FB03474DEAC4ADB7FF6B7C3F1A714A5053A84354854E5
C00B9AFE095FDF5CCDF91431645B3A9CF01393723A77C02B070ECCD28D897B9D75D0C322A992
4B1B6F8A21FEC38774B5F194AAD07D81C6F368A8ABC12CCE9AB060C656B527AA9799B363F032
521D10BBE3DA1D811E300F5232A7EF228DD09D956E304096B603B678DC241A12DD6868226FE4
AD9771689AB97851E7ACC5A2CF3D412327D8F52B698D539C111DE0E25658D2FB86A45BE9EB2B
AD85E0689294A615856E2205FA2F949672DDC387132EB85413617B5269314CE3C0F3A18E5481
7F7B0AB4B6253BFBAA4A1671693C220A6FF2ECBFFC9D5C4B048CCDF4957541643234A86D5664
8C02B9BF2B64382385BF43D089ABF1AEAA5CFD9BD946C3E1619C7F57DE41659F88212FB3095B
94F2D6D6C5BA13C560519DF69555C9B7126C6FF45C61BA467C29CDF3CEA6E910AA5E161A4AFA
F60D3925D01DE96AF09694FD5970375891D35ABF6429089B9D81693B70E98C18015AE9CD03FD
467BDEA6BC09DCE22161ED976B3DA2A80CF04A83C50360D6A2200022C06D99989ADA2E2705BE
9DC5A6CE3201E2D226A0EDAE502EF272EDDB88CF7FB3F29116C559EEF8405E77056455450285
2745D3D48B1AD7C34DEBF5F190FD02BCAC796C2BE38017726920604B1984ECB320442818797F
A14003118DF21F99ABC9DE4FFDFD3FA6BACC4558CE63E189CDB805775BF24C8F6FE5B62C13DE
BC8D08ECC64E0459D854DA7DE0FB3C6479E9681B141B94E48C3C8603FAAFEC08C9C6B3997ED0
43250C4D8019EFAD1A676F1EC5CE942AC813AEEF3795C69DE57714F72A90DA22E3DBF1F7311A
DC48BD1AE8DC3D37AEB5652093CABEFEDC166C1D27B1DC0DD24E73EE08DE04B5C9BA8030CFD2
94833314DCEFAB3343B33EE74FE72673BC921254F9E1D8B1396E8298891A23E3D475CF4AAB97
ED794558789C544E849B01A3A174E78F21F37ECC1DE241AD327B5BCDCAC1EA995B9F08DE78A2
82CCCB2CBFCA7C0098265EDD8DCF56035AC0646E771138B95318A5EFDC202C90683A9361BCAB
AC02871F1E6760888E1460BFEC1A8E9C9D63BA765274D4F5026A8B0B3DAD68BDF9115BA8BB22
D048FE8BAA60E986F77C262C92290DE8E466F8B19A501D4B5AEE1AB37B28E4D277E12829BC46
4649758262885045B209B1FEE74AAFE143F02CE5F37F4FBA6FE6B1342327E88FBC1BC0B493B4
E1A326549C948B6FB8C43E80BD8C1060509BF570799CD603209A4CB3420E807F7B2762E21D98
AAB1BD63E88152180F0DB9E4FDE5C3659614A13C09B5E13CDB782CDD5E32A0DDF309482C7827
1C6297EE797C6E19A58E3E50E01C9F4A1849BF0CEEEAE91F648BB0607C4B7D10A12937EAE49C
2299DF39BB1092C6DDDCDEA4A585256BA5739BC177B411EB236AF3EB6C3012837DC9EF2D83ED
27F6BED06697508FC3ADD6A46E97461AFF7592666D91304A4A525F2094A7832400A87B21B129
62F063A92A6C8CFE5D7A22AB680DFCAF3A6E4C2211CFE271FD532C50D20F2479C5F0E47173EC
8C72DA8EAA963E6B59B0EBB49C4D1F572C6F431965B9E2217AC1C24CD2BFD8140AE17DE96263
A679900B6D8B222C6EBB93D102AB3543C5C503D1367723C1E03E818F615B5066B582765B0603
86BFC322E1D7CE397A405B5013E347CB1342D138E65CD5A9033974D03EC3755F7AC092C59F32
CA3E6BCF4D2CA9DA21009C905B6FD2D2D1E89BC840AB025D0350512E03CFB0E93822A49B38C0
82AFC534100B70BA2097FF128E0FA5B25D6769F162EDA8AE80A42822AA025B6AD36D1A63B952
EEDAD08DFA536DBAB176B8B7D4DCD0CEB87DA4691664E373B5C24BC2B222E7E9CAE2BBC4D231
EB5E7DD87A12632C5B6F8ED031372C52D22FFAF2C5FE17CAEDE01B652C860924EC856144EFA8
D194ED13D22ED02F21E36213DFDAF0509FBC9667121BE4530C9F681A1CA5E74BE0B6C4C0C863
966F9F2D7534744B6B9558078DBE76729D6943714BF86D8B9D4C11F94AA6F8F1A36605286D62
957FF1EB7EC532F381AAE16C9A1B2F8EAAC328B2C5E4F8A9528A8F24C77726B8C20C7B2E4DAA
4DC0A6CD901B558B070A57618490EDEAAD367483373BF897C3460D4BDA4D884003C562738736
AB1BF914F2CBB58922F050F65A0DED96D342819CACE6195F4C93250176B51451BE03DEF3FA53
18DBDEBF5DB5E11016F0B271A006467526DC688ECDDA88211134488B251723A642ED73D6A910
6A7750BEEB0308E10D4ABC218BE2308E6089B05A1127F81CC304962336F38BA173F805E848C9
40736E16FA82AC0A69AC37FC0BE24D39AED4DBF9C7B08FB942D96B8CCB3961F426761F41DE2C
A4E8EBE039EC641C9D2C19C7739AF1A34F1F2AC15880886AE65A10F482DE121A580DC8305B3B
8DDBB834F1BA6D0136445CF7670EE01B6901E3DA11DDA675B31C09962F178345D225D01C9106
99D6FDF07C30B76E7E3A7EEC658332283E058CCA83CC74E2AF6CD1B55BB3EB889C3BEC30ED0B
989A29924A5222B9B1099EAB1F75DA7FF5C6A9BC54CD625CE0A4B16E962897497D0E24C00B58
024F263A7E9748ED1E4D3F27030595A4EA3AF3B7D3A706D5817CA8FBBD200B90A3F035060E49
ADB80C35592D419F4BA33B01A22F873D19EA22742E8D1C7F73592AC142C78EDE657AA58C1F8E
76CEEA5A038AE383B8EAF9905CF57FE321DA19052AF965F2F20934CA0699C4FCDF1F650D75B2
15F5A44C1E05F2698B55E5D0C7923869CE9B68C8A264B5ADC138DEAF45C2A27C73EA4C06C32D
B39F39E44EB4B7EFB76B90C4191949CC11E1959ABBF21756C21765470D58618AEDF343393D71
3204DE9270536F100944681FC03A844B2ED84F1685F67F81394A35A2C65D76814B0F352CAEE1
2680E32F0B86DE6524501FC5BB4A110EAA49ADD692CBA0A1D4F64B6861F8E88AE14E133C58D7
16D29E8F69E86A77897B208BC55A2894F70D245E0746642A4C68CBD1E81DED4BC4AA729A8D74
930B4230CFCBB08A80812C2AD09AA2F9F7A71F47A495004FFAC7580463227D53FF9757B5B9CF
E2A3F20859D97ED690BDA43C15D59DAD9FC8DF7F2B4151630C5EBF40020C5124D31D4B2FE4A9
078130EF57E1372B16C6A7FF21B688A6909BBC1FB1CC0E555094438FA4B84EC53A5F7C9A7815
3C215EB672D7D17FCFA5B49CD7842B4BD5FFA49E880687857E3591A9A189D1F6C1D0A3004E3D
EE09613DF2D7EF26AD4640B57A1755886D3960762130233093AAFA54FFA5BA8C81EA2207F64D
4F070D2055590CDA7D2AFDD5BD1773BC54DE2E56474EC7AD1CEA263756D275DB7F2ACFC39EA8
496931DC5A2C687579959DFA8C3E9A7BCEDD4C883E32D35B056D4476DB5990BCD8E673FE737D
A6E1CEFE2B9E6F67C15141213AA3D81C1303FC4C4315770C14E9A12C0520B52AB24CD315BC35
1E05F170F52C8F347FF9CB7D2EDD77F0F4CF50CFFB84632A73627AFB04CFDDC11B74492F29CA
6141866F9C08741B589EA02C5504077EE2C6EFD0B5A0814A853FA956DF10D1BE66772743E1ED
8D60220D48826B2CFB65BF35FEBAD3954F3078EF06F3691D07C56184BE07FA192952F322CC45
5711C09DCD5C3FAB7E2EE21A21704F739CA1A44AB7FA83606F43CCB618CA72A185108B916B4E
69B949900A654A8C311D3B3C8FE030FFBF11ABCE1B8A86BC379832CA18A36A0DC961361DCF61
A596375C264A8B37F069C08A50FA879AD2FE472ABFC9CCE57E9B14E315703AF3094914F0BD76
BA2AB44694E474A927D3FD9BBF5B2EA28F34EBB366A50E0531E9285AC3DAC97B0A7B40BD3B51
1A5589F8E2F2B38451F65A2D26AA4EA24BE633BB96D8FA0E198FA27CEC778BA68EF2B39D8068
9C25BD44CD3DA6FDD58C7A8B2205379BA584AB116A7E18D709B55EECCFA5DD004A725D9EECB5
7AF121E4695E8EF6B5C6F115D787ADDAFD643C9AFED6747BEFBC4BF6EB975472E90A88DAD99C
610FF4A29E9F10BB3E31FE51722AAC41B5ABF2DC3222B1B4740222323B0A175A5B4BA0A50464
FB9700307D6DDC5F898F5BF30DBCEEC0EF18A11CA79599030728B32FFCCB03DD7296C27C18CC
04077225C5E7AA0F15DFB83B2034049614F424F3FB483599D8A80A0107767BE7A0EA37FE84AB
38F5864B176AE297116D7BFF350EF087BB19EA66B31D2A82781818AB68B3467A50C051A3FD14
3801E4684431F325F0E2AE40C39612F7AD911A35ADECCE0654389D3BCD2997FF95A34762411A
72165C094415358CA9BAFB2F338407BE1D791E6B71757556A44D744BB53A265F187D5156DA61
D5428A53996453B8CDF3392A7E89A301D1C037389755E7D89A80E29AD7A00C83D4A24BFD2286
5B0695EBF75387380995474498CBAA0E68438F41EEA95D77F6614E28C64CB040096BCA3C4487
21DBFE68CEDDE09A8A9B38609EDC28DDB6C33AF42234D9EF580464F150E29F833EABADFD9A9B
64A17000F20E1AAD16CF0DFBCBF50483C28E13130CE2F4E8797777001F02A3DF54BE0AFC9476
2E8E3193B884A3ED95CEDAA22D8032B98A80E2759686835CEF28E525104D1AA7E7D085040117
6CB693426E40369D392A7140C0A4740F5C58D7E5098FB21EC5612536321EF05751A513EB07DE
7C8B9A668E4AD2B34039B847CB2593C5C866C719A1184BF30F979E317E62FB4BD6E6F335F2F2
7C4B8DFDE99F4C90EF8B75E29E4052DB0FCD5CC7B64C9854C9246340B5DE6FD9B6D7CD1C8B08
2E81EE08E8093C14DFD45C470BF7875A7452B25F6D86A806EF453D606CB46FA63D9456F99A17
AB6D98A4C32B07B3B96F10FEAFC997A1271B54AB49430BDAB5871BAC734F45D3CCA51F52429E
53934A76F3C41609DA9C466D89351BA8F8B6786D6375E320DA2997D6C9518A702105DB6D91E2
BC095E572C9D670CF19F0888CF1C242ED225E3653B2A4E07820B8105127BF04E2197A57FECB4
62810D0EF4153893C6FF92ECDAB47CD91BDB064E1AA06DB6D203F2C89A09153E0D8F81294A89
BB8355E0154EB6D8C873B049D2EC998C2320DBA62A476AA42305A837EE4775710FAA436009CD
E48954FC088FB897E565A5DF28B57330DDEB1497138DA753A2088AFA90F16C690EAAB2B71EE5
F95490E5C45D2E2FF34CC0ECCD94ED09190095C0F226272561D349ADF2A1F5EBE3EC23FB6D43
432E0ACB38C3948596B4BCFE665C341CE006A1979E8927346405BC791F083FA4A4A014A70829
AF99F54ADB742D24A1BF81A6D62986DC68F1F229F6F6D1BF18B4529A545B20A8E654BF4117B4
08B6B86F0F8A5EE93F21215EE69EBB98CB783A8784EE3BEF4B339D8439A35EDCFE989A0F4727
6B7723134087C44C444DD0D4A41C62C108E0D95EAD8FA30D90A8D87F9A1086F31183E47A544A
A9C6B7C631BC23B3E4DE6BD0523148926F18FCE8A7841C73B476FAC1F67D2394F465E1DF25A2
EC145DFF15B8319530251AF18153AFFC1551D7B381CD4D19ABA0B497779B4202B82BF4ACBF4C
D24C9E12F6050DC845AED80BEDF0B0B22802CE89357706406FD5F26A31B56C36881652AA34D0
A31F60E84450D49299260D70C978689CECAB196F33D220279142FF393D30AC8F8F95A2281317
F64CFD402A68AF573172CC5C6BACC54DFE25F42606CC6FF77F15E2DD42E7CA9FEFE40A59E9FE
990B2DDE50743CC20A16A056F80022BC6D32C6C9F39599B669796FF4EF8C0A292C158DFF8727
44EA1E2ED24BC5F80E4F2A39E45D2FCAD1D9F3AAED2A3A223B994C55DBD87CE8C7086E88A1F1
12744734B33A707DF7ACF05F74D745455AC8D83393870A2EFC21193FF4E3104B89B67F757259
A5D32A90763052731B549FC917974AF25EC33366ADEA1809B6A27569EBD06738FB891EE7178C
45AA46C397140B7AE472855D8370FB696C48E3D8D1F7C3BDAD4E00BDD09702BC3C9A2D756C34
4B28616BA349FB9E79D8B1A128160481C503E9F8885FBB6FFA798FBF5DD1809B04C85646E66F
0C346FD7D466B83E65A487DC3E4B15BFD204B573A9F1C6C949D373483A1520EBC70DFEE0A1E3
83F061D94751AA148FDB79F1AEF212F7DEFDC6F41F3348703558F16C45FD0B4392B417CFC1B2
1D5C4ED17C477096CECF8EE78688D7074E309BE9B5CA681A1098158E5CDC1654759BAA0582C7
C362ECAA00E50191136CFBACFC10472CE34C325D759B2BF26D7E0697AF0A752477B29B0D09EC
319508FFE690F846FCA29D7F7F265666D7579B7E8F1ACE09868CFDC7AD92E71A9B273E029B7C
278164F42B067F49C7C8BA3AC4D705DE83E85CA21177F38F5F1E9ACA6F90BF38D85FAE324E1A
2EB3758DE43E0A910DB6CD3A7946C4FE5FABA6F2F211F42F10A8D3E1F7A6BC6CB9297BA33B04
76376182B78B5CF588FDC37574CB6FE660A6D0C54FB49086FB54864AC008A47F672633295D60
CED2FF9A76F8AABCC4C4057D115C0EE9474E7CE6AF8E5C9ACF30CAF8D26CFDA16A5E9AB7EBB4
0A9EA934AAEBCC1D02D15E5FEA050BF3DBE0A309A6BB387396251E36271556C503F9D1998ECD
9C9AB8B6E88C7E1F32596CE183C3E6C8719BCC0494A57230E7FA5EF9B7852290138F6022F6D3
004E28AE51EAB113C099EDE4AB6D73AA1F8DD5A4FFBB88D692B017E3134B55CB416C71013E3A
7F0492A779CF2CD03082EE643D2538E093EC92AD71CC99A0C6B27AE5023D970DC1A99925E5EB
4CA8D5D83EB13D2EF87D6613C44D60D29F8C2EA6B0C0B24E786E0AEAD6B645CBB6E11C96E2D4
6C73DE38786235D56DB6BC2B786D9DD8E1DC3C8B2C2E828EE011A1F816DAE78CE7FCCDEE2102
570FA986E85E5581B1A8B8ED8D6BD98A0FE48C98B0EF14F1D24D4C82BF8A47B24C7CABC1D37D
26EC537AAB6B3751DD8F0181AC081BA0B1FE273AC1E19B508C65D407B9C661D46E6401A573C7
ADE9A6F6485D55DA2787E79FE08C143FD9D2A746024FA4273CEAFF40E9B6C8A01051F482885B
B8CE46E4D23AEB88B1662FA36DBF41FE7096827239F427BEEFC4C44E14E546EF52BD4D685AB4
E6040014F1A52A5E71A25506F5A2163301FA5F6619D2654DB03A90C684FFA97BBCAD46775E0D
EBEA0FB908F08846C59B9514E15B8C49B953E643F451D24B0F15BB9310D672E3D85C5D7ECB04
398CF1778A6C25C64C13470932C8511D7742771FA40E5EBDB4385438064C9DFBB795A8E05584
39D97094864EF08C829A94C4978397A9011B0CCCA9D42A29E43B77118AEC948491BCB9D47632
8FADFE05823AF4894A77EAEB584323BF2530FBB5A00D30772FBF97081982C15A312852770DAB
7D9BC19AB74A4D6B76537AEF6AC86826CEBCC3A77FAAF4238DFB04A02F288A63C4F3905C084E
4CD0FF350D1CEFACE92BE195918EC332C869A9CDA08D3B73A221CE99AAD75ADBF1959F7C106F
DD981425DF9CC0AA3C153C2DA679EF348F1350C46AB74F105537991F00E68E0464915E4F5370
0752C00B724110B2616D477206EFC417EC230F7B5F158F5B706E27318CDB01570896DCDFFEF0
73FB9BCACB23D4BAEE95397F0E98E39861DF47A5CB0121ACC227D5D2AB8CFE04A5DE20A172E1
14ECA69A3DFDF386F0A63F7E6A8924874DE68FD4D2E05417A548C754ECD59542D35D45ADFCD2
96F88DCC52A09EB9E7743F88EB731866ACDD4FD2F2EE04136142E57EC2934C5F6FCDA67D271A
033FA1D88EB79449216FCD3D2DE71A312EDCFFFF9C056045A0369FF73387143FF57E306D99AC
DDB6DC308FF9A5B38A90BD8B6D9C7A802B6E110AC392AED8D8BCAFA6315CFDE8CA0736DEA337
AB569101B70985C13FD59815B3D227D804012417CD4BDA9B34F8F10AC9DEDF4D8ADB30EEAF03
0956D747F58B36251DF277ACBB19E5D43634983A5A165E538271AE3523C24B5F758ADDA56305
FFFB7AB06215E1CE041B087BB3F678F823ACE8E2B1D0BB906F5F4040801E676BE1DAC36AC67B
B9F0A45C6638216D30834C016FBF63731AF93C60A14692BFC3EF8EF75EED3CACDC863F619A7B
BDCE4401CB1E5F4CC8301EAF26199FD3171D977C37DADE2726B7F18C768DED89520FDF293409
D2091071B9CCCB400A6C76542235CD40F9E935BBAADAC04243BB423430E3CC04259794D6507F
DC78D234928029786A698228AD2C79716CB2B0A20974B3696A78E996566FF8E8BCD47CD70CAC
9B80B6F5ADCAFE083CF29A41A7B76164AC417FDB660CF2E604267D3321AB531F9CB4345CC545
BC36DC34E476A98453DBCECA98F7756B58168F9FFB57537ED8371E1BEFA7B537E91C1D1145AF
4160E5691A32A21FA0115A9EF751B16358B6486760012ADF24ED30F66103B18A2F7051C01CD1
A2E04E5ABC79C09958B08B314C6A978ACB1B880507577D02D94F7753B7A1F221C7E3F3B2A5AA
96D5F18EBFF2771A55ED3A292D089D85616C35F0B80A2F7B499D88F200DF44B2DA72E7995D31
FE38AC2240EEDAD4059414372E659BCA7517C4CCFF7D8AF92F890342F10319156FF9B33C8FDC
F6F754DEFBC58B7435D719226C7BF9BDE4C647BDD3B1F14261379B4328FD1BFAAF2F7A8034BF
BF450F5C5F75450BC1A399244E8F0EFFB154710B85046F197B347A5D47EA97D01C6B80B8E147
159CC2B96F6317D8C3F4654E5928328FB844C6AEBBC487257FABC2CF76D35F7C77B7EE7BA035
888DC8A11571210BA2B46CC20365642E3F7423BDFCE297D083AA3F327D9701F14FA649F87693
1F16344CE8C840D4E381EDF3B815348887FD607C4373D187EB862CD4BD150B6489A3718C0ACB
DB3C5DCCE929A3C8D073B74C82DCFDD7AC313C5DC3A0F8043F8EBCEBA434E379558EE88CF9CE
1D91CA598F4CDAA2943FE76D9AAE39087F86769732B0151C2AECCF1D5A72896249ADD52D3C94
D316EAC121D1235DD660F642767C148B4011BC2D8B57D3A3BB654D23C76460C9A7823E67CC06
58D9A51E4FD4FE31F037D375039011AD4C5F22986E5CB63D023631B83DF8009246A588193EE2
B562FFE2EA2C2713946D2F479FBEDCEA97E1A980671B3A2BFC8E2875552B3EB771EA0F76DF4F
CA150F21E2D982BB1F3E85C77AE3076C736F4E20DDF920B7D0D09196D5F7268B83B4F6576D08
2590C629A374E6E9358870907477DA2DB81FAD82A4487A5CCF5AC1862ABBC98519113574A5B0
68BDBC13878233378AD4EDC021C19EE3A13BBB09248EB431045EEDD08B95EE05D51106B0FFC5
8BFF9CA77CD26308C4D03F4018809E8680BCD90DF5823321D6AD773DC1F063F37B82FC27BE50
5D124B75E59241ED0CFF5EA1D81D45E9E0345C2E6D9915B63305B133AC7A370F8B6DD371D507
1EB722CC32CC2DA3E08BB217B14761CAE8016BBBF565F026955EEB3D342439C7F4072C04E86B
7115C524CF8022ED01E6489603FF0D934CBB59FBF32C89CCB2DFF32B525AB2B1D3C81E84BCC3
7E324EFE5EF580DFE9FB4D629177C78205E3FAF040D6A30CB50C2D88A0790BB62D555F356418
F4C75DFE6AF64EC58BC9054253F0CBC17BE66C3D2D5B5059753111BD68B23C51BF9DACE2FB8B
89683E828E761861084C0DBB0AFB1D29928B910C10311791747231C4A887ECD3B9920D453DEE
2650346E3C517D6564C2CCBEF21B3B1063D1F6FF5C90450C0B4B00D07D1BDAC2F64729BB64C3
C01C3DF3FFB76CE7311946A4EBAC49797E0E52ED164E268C92DC4BE5169BC2937AF2B1EEA588
93599EDC8570E35C2A7F25AEF8CCA011B4C3953E51007EE9C268FE70DF6E0EB8F412A1E07478
77F6235B516D7AB68B029F8F4369ECE86A771B89E98BBEF2B43CF69945C01EF60E2E34092FC5
FB2B146D8C1DBA83B872BBDA95842D11ACC70A551D8E9551CEA018DAF8BF3292785A9BFF606C
1F735CF43ABD0F6419CF75929EFE45AB6652A63145770920F739814C06B96B1591FA647E92C5
6303AE5A82A172FC9D4EB936EBA624D016580CC98C40A9A7BAA9DEE4946715ABFDD7999356B8
CC39EADC00F42AADC0B16E178C2E663DA2F464C1809644AB1796EB8290F70684A6176B0814E6
890DA69467A63F74DC687E0DD0F9A7A18485D1A685097C32848122C7A211C2DA72845200C1BE
63FD0AF2DC8A10B5C880704D33975DCCFCA050F0D45AAD987FB7FA629CC27DFE90ECE1F552EA
E546CA8B2EE47D9E349DA32E0E0B1453E63CEFE7022234993F82E3056E045FAED95712261D33
297BCFA9CF11768D8116D143E653C64FE89827908647C7B194402ECB48A732E74024F74AAC33
CFF6EC9C97DFABAAF735AD5645B5223028688C5BF8BADF9CF6519B6F080763FCC4AAAB8D4A62
95E1E7F73A06A6DB3FD286EC633928A2BDD3317839DAB98A851DDF2D8C5E735C8D0EFF04623A
9CB2679B5CF8462EEDFBA9C372F64AF9A4C8003B66A815F14FD7CCFF14AD1A9CDDD1AF8005C5
20DDE0A8EDA007A44AAADB82EC52B4DB31C3D7B1252D2E7F80461AA9479E9DF2DD371FF1CA90
B0239454BCD1D5CB4B60B27621E774219B5E540E06D8631355B7DD2620BB1CB643D387D8804D
54F8F7AF3CDADCE2FE6DAB3CEDA674D3AF0435D29796D0A45F0D9C18CBE6414B9CD5E36CAE3E
BC37CE15AD5CAA9C68CA6B1E26E5CD2A92C3F42F4101AC4B690DFEC290B0C8699B03AE919F8E
535AD07EB609C8A7AC12C640E72C7273CF2BFF6A59735D3B11AE906E83DBEA270C6B11EA8307
8F810FA04603A6B0D97276E7AD7728FD4E99EB3912073B0676491160018B008AFC806DBD6C98
9215F46E7D04A96156F259A04A4D44B1E9295F471E0921DFC61A631E2D708C3187175803F804
F6FB119733A85AC350693E34FAEACC4BBC5D091C38FAB446E9139F627C38522DAB9164533FAF
CE83F811185F268E30EC43FF46E56B0043958F52F1440356B449C780DB796C2695BEFDFEBE92
8690CCE1B6A530B0427B4E3389100DC861A50E1D9E04BF71B49D901B0B9D3BECBECC33EF3C83
EE7966387C64008299ACDEB2F10D3C72F5417D1B54104F98E9A85A2E693F77B02E676EDA4861
FA830697CC37CF10EBB617CF36C36AA9F76FDD45FCC5C195EA8555A373C335A41698E74F00B7
B6B5CA8E16F936BF0CDFBEBA2CF46B16FA3713D791391F38E5B19A52AE58384775CCA3D2D1FC
CB86740616FC34CC8D83E9813291335747457032E8F989BB125B0775BB50160B3BA0041F6712
E2277219733257B3E9787E462EE84DFB6B085BED216864556F47B63D5AB10C46DAC073BB8FC2
255DC2B9902C0FD82A36DBBD35C10565129CEF728EFC1E60734A6EDFC558DD3CE680D3477358
0CEBAD927B9A84969E51E63D67D41B431F034C51763BCC458F437F56984F1D48A094BA57933E
819F0037C506BEF9EE3533AF880614339DE22C88D416575D5405E3FE1F392CA3A188CF6F2118
4515124DEDC6F22FB50303809F118B7DF338485A4BC80773713F4C316B22BE1B8C1CB4A28119
398EF2DD29E8097AF9F83415A8C94B281D5F8125ECB656FA9DC4AF3FBFBAF6F224E7241B1D62
E842D9CF1B60D277BA794541309C26A447E95FE9C4A9E54A6C81F8DD2019484633DD98CBA028
BB6C6AE3561D03EBADC6FB78732E1CA817E12B6ACF46E2142AAE2F88C9C9C35CF6641EBAFF70
944D587B3A84A89FC8D6AF6B60DC9627D1AF24E56D53198F71BCE353D3DBD26E5473D60CA525
4B32756000AF032C0496810D9BB7EF8E835DE8F1A2D679A4EC5DD863A5A3B5D009DDDB0964A5
13885570023133A994B0047101917CBADE926E91DF34B05CEE043CC58553CFCFCD20E3838317
4A7CE27BE337161541F11BFF6BA9C5E760F645EF33963D94DCC913DF00AE32705CFBF7A1B395
354CEBB075E7767CF34F8852E7C19990407A8E96EEF59D221FD33DCC71554DA8AA472ED369D8
685CF5780075DF40F454444A79EB4E758784A914AD53BB4FE9559A1C7A89773A9CA18257FE68
CE91CFCBB82B4ED5766CB4652BB3C6457C7FF69DAB764D5299614BC0404409D506088E12A5CE
3E9C7F4AA56A4EC7EBE6A7867A0C146665531E58CDCD3666FA9654FA9E4535B5CF60016E161F
55E8B14AB9B2A83A57ACDDE98EF2B2CF20C275ACBFCF4475A0BCCCA31443FE3277A240D33D14
A453B21432C7973CA2419109D386BA72349F4A641844E18F2107ECBDD2BE6371CF5479B02158
657F91006BAEAB5CE40298F0703116906EDABD18D1AD67DD820CCF322B27D10148F5AE316ED6
CE21AA50CA06A8F09FE0D3E9ABD915AD014C7B237FA220BC179708C70BADCB7FEC850F51F7E9
70520ADC4C3DE7914BD5BEBCA7C2840925B97D36590A7933A44325B168999E31EBDFE198394C
8652739D9F9A6E5414C4E20D63B967237637555F2933E6B204A3412CC196180CE5814B0147C2
880569C85FEE35D75D58BB28DBF2D3D90393E136AA8E39FDE11969229202BA615823E2DBB7B4
89129747ABCBB11A1DF0C46D1B62C6CE8209C642720A7F45E9B36ED8C62FC2357EE3F47CC295
3DBDADB5A31C48FDB101C844459417896193020E58964E11776E58E0797501A5CA6D822B68D4
1334170DA1F572FA7904E279ADCFB8EC9BCFAAA5602A9BFBDEDDBDADDDED5D25DBBB28988FB1
4EC3AAA1CAECBB0DFC2047430677CB3519D90B623200BA3F4371FB63E1D448E861C535ABB586
821F0243FAE9773B1C5FC0C3E66B076E777CE24C0C3BB646B12ADC15BFC6295316499E38FD94
DF2CC16C40B2D9E7F63198D5675EB0CAB69D7EE92B1BFB9F6A8733978CF68C6BC3E9D4F96891
818B8D08E42CADA1DAE7AE58ED10AC52A1F742BCBE66AC21A27BCCD7D24B4547CBA227CD0D99
9D8838D162ED050208B9B12518CC2AAAB3F1734732AE144D6713AC1020FC67226BD0EC23B0C2
7BAB908F3275D8EA27FAA4E6D959A68B153E0688B5C7A8D155886E6D468EF2BACB8109A69AD2
D6D14E955AE4B5D4C32FDF6E4A39B53C0C5726E986D461101AB1C8FB92BC505689744ED35EC2
BA67E8D9E8166CEA7DC0DDF61066FCBBF06CDF1FC981319249F9A5ECC3854CBCA3124001324C
5C43464D994C1D3B2D011E817645BE4C4148131916BC4D1850F19D854B318B75A6A6EA2EF84C
2FF178490105CF80C618C1814F112EB8BF06AECF9206997F4D61F4C909119DB64438C3077A24
28BEB3FAE6F07732F7358279FE0CF71EE480CFE4208425C92367264559A5848760BCB8CCF6CA
712F6ACA4D7724BAE43D6BE2CB94C023E6186A42046019771C88A5AF8EB1596C13E02804C4FE
1B1F5655786BB6EFDB705A02FF2F018A1E0E355631EB8467F5601BF62817DFD657B68C5A3982
347BF6E58850CF965A21EF8683E7E4461F10B85A68CA1573699559F2D8A89E0D8F3C99F61999
78D859FCED9E614298C97FF66E1741566EC5D65B9F0C38F6305BBD8C44A39A7B020699005F6C
0D10759826DD8FEFD7A9C72A6F45675F800CD66C5185FD77B4CF9F92658C7013346B03641524
9A6201358EECEA44F0FC4EFC5101158362C9D2D2937DEA087EE00EB1155E84F8FC1621F7243B
5A07AF02D6FB6D960E9B99067E54235C241E365662F6447C26EB6DE90D077B0B52FE184F45B1
23F01D51B1CAA74AE2958D9AE497A89D3FFBB5C8C75E442B6FA7C0F989F31B3FC7A1EA9BA483
416C0A07D23B8206E08BFFBE3DD3FE30995FA30CDC8A0469AB14BC835BC5FA6B79B96DCB8057
37FE3BEE4D32EE04F90ABB299A343FAC41FD240A52726417893DC197D6B6C97B46B9734FEE5B
8E2A21406EC58689924E2A651A02C6D7558D9C872FAAB74290223362A771FD2B893F60740D35
D1590368D32CA7EA746A7A3C4C726BC352D118351C93BC7A25043EA297D696194115FAE92A5A
F36F26A3A73BC41348FC7AB309D35388D675EC6118F8B89F2D935F4F6655B42785FCEC234A29
EE2FC01C259197C21E42789B292D4800F6EC96F5082B8D4633B428A76E7283964ED493B876FB
D9C83B37ABC5F8C43414CA2A0693605D13EE3D6137EDA02BD6A907ADD165A0C1E2C56EA5C8F8
22C53392DAA65F0C85DD70006B460F706EC5678B439628B4AE5CB5A0A3F295B9E8F6E28ECC67
69D988894557AF3485EF0367151184DB5FA0B27EEEB06B98A1B995BAB5C4C1439EFEC6E3A714
7177EC34568433F54F579A06D831499A8422CB917686BD58C743D655D6F1607F281DFA157A97
165FBA9F66E50FBDE8219B410CA27334198AE5AF2011E3E80B4B0FC2843773CBB52CC206BD94
D77477B6BC3C344AF2DBB26F098398FF147B30BAA62AEF99FCF78FFD93DAB2FCA22356E61D03
2F1C28E0A69E3DE08428CBF9158FB0206073A8F68F92FF19FB5B7A8898F7B609E01A8CB5820C
1E166CE318668B046714C095E5D2DEB3717D13CCBBB80F3A4EA7E5491DE9E18AF6A4F26F3972
F5F5B778A566F7D0774FB48DB63CE6FE819FD96C5898E7B1EAD32A524B70D503A34118352C77
E260597DC59FDBB1BFFC5C79D5E8F847ADA5E186970F0680E73E7F911C7F3CC4CFBB0B9B7434
86E0A3EB7984DA9149983E01CEE019C2BCA3EAD0691EE643203EAECDA99C0B90DA25E2DA4CCA
5E6B4AB209D541CE1F48B488D9E2DC2158BC1898BB63A70222E366AD379F725B96EDDB2B90E0
F01203F6D3B442DC567A9F3AA3470E44D36B93DF8911267BA87CECE176E0CA07CDF75D305DB4
0C1EC9E5651A68FCA845A547CB50656B50882CF3FB5702317E92EE09708E69F5AFAF360E5B9B
B16377A11E54B6A3B9958E52F01604B6D904E0FF2C7E86583F78DE4C66C860A55DD3931EF24C
15C8695DB88116CE053BBF4ABA9010CA14616F9BC7190004D7FFDEB77BA46362D205FA6B4780
AF6E53AE5AB657FD336171AD9E1AB3AFC497AC3F14C2D40F64F6C19DF7FF0EE3C854597910AD
5E45554C2C5E468A3327DB55373E57AB392D070F2A4DF5A666E35179C11F366CA31DC0E2D755
D654286D5C2C2D8ECEC32DD88E321CB24592D34CBDB87D3597599196B3D43814F9A3034FBDD3
1F29BB5B22E5DF1B74453723E27D2B0E10878025912FD4FC5A7A2E3F109CCA1BF9F3799DAA42
3CEC6E029523D74D15EC5DBD958659B504AA92B83214CAF2F8B8994FF9FD1CB15D3AA5C1B45A
C980017A1CBC08CDFC308C242A92DA45DE68FCE03B9BA3F631566CF3526B604EF5F3230501CC
474A5E366733A15924B12504F5AC463759333B27DFF603992452C8BB318F564C92CE3A2AFCFC
C52C1833BE00F49F92C2D06F4818AEE233A53BB65090479B79F5F6EF5B5ECF056F8EC5986C17
0228308D28AD056D437D6DED7BB686F7A1C5C019DE58B78FB0A86F8A106B8AECA8875DA6E173
FC4B2A134A2D2123EE4C1A1B04F7320000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont
%%BeginFont: NimbusRomNo9L-ReguItal
%!PS-AdobeFont-1.0: NimbusRomNo9L-ReguItal 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular Italic) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -15.5 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-ReguItal def
/PaintType 0 def
/WMode 0 def
/FontBBox {-169 -270 1010 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
/UniqueID 5020937 def
currentdict end
currentfile eexec
E98D09D760A3C22CF119F9DC699A22C35B5B35ED6AA23593C76D54CABB5E942BF7D6DD84F166
4B89699C74B472DE9F8E6DF925F6C4F204E9F1C639B4DBA988ED2AC419FF2B2BDE605B8EE326
4EDD66412D4F21C64AC522BDFC7C5502F9C3F3E5592B3B2093D33C9BFAEDD2D49E89AABAA832
E23F062E91A25032519D1868816E44B4E0747795003D7930299D6E1E2A5BFE0D595DC97E1409
89CE81D8D7F852FF9CDC7A1B1B598C69131DEE005B415805A16D8A123E6DB5B99C8D5FABB606
6DE5990492CDEE63626B0FAF2475D8B58FC403FDCF43C0348075D66CBA692295AA62638FAABB
428F7C9CC22A2F3FB81F3BC2669D02DBF7D22DB2A9DFA34934DE038E82DF426B4733D3FFD3EF
B008C3F60A2B5FA2763DADD86064C3DEB881FA33E082F278FEE68B46F610B25654AE96207D81
48E0F54EF9BB782963FEEB6CBD36641842195B4B1E421739727261E57F4A50F6296987DE8F66
5F58233888AF1FFB3DBD577C9770533BAC06A0E3CB91DFB6E0310E8DF1DA1FDB5C325BBA6124
04B398E392CDEC45A457D1E2B72F4DADCE4D48C43955D4C194DEF0C1D5F3B40BC53CCF660877
ACCAEC25CDE63B33C38CF4E727D84C5418BBED72AF5111EAA1537BCB698310451DB0EC512861
AEDECE7E48F2E48B528123E0545DBAC961F68F4602CD0D94D47578878E51C06A2B43C9EDEF29
19A68F789D21CD07E9A3DDE43B761D33882FFD73CBD2A644EBE9C1EAF6FD5CEE48B22B417D7D
B7F30D8FF9E7D7B18A21AD859A1F04EEA0FB3B508729A5FE2D6382F2B0F8E078803A9D245355
DA02D3016AB2C8B2583B4D77D3ACFBC34A559D35BBD037E9C5705CE727C2649420777B2043DC
95E32684E59E30009545CE008E5891890F30E59B0985C16AB218D4374B99E81447040AC678BB
0AA5843F206885479CCE7CDB533FAA80D625F159C27F8641BDC765F7080D35BDBC9C2D15A31C
66870829A70E7FCF61488935E535B672EC5728C67DE8CEA921B493D08DD33B9024A6A257ACBC
FF3D9A0D6227DF1E8C8CF1B2149A9EAFA162F18B5AE849C7A9696D4C71AF9B462C7C0DA5471B
18BB99F2AE765516FA03B98756B7DF760AC4D0B9F8852BBC678696FF9C957C64B2939ECD6DDC
18855DE06747B2F5F5C4FC0451F69FA610EC68BF0E923DCF36B57D3292F291F44D33C5A6B5BE
7F5065E41C6CAFB0657C2CF8ECF8C642A3B1E11E9A7F0D44B65A678B1DE0EB0519A231AE5E96
6D8E84C66E20F2DF9900F7DC83859820E8F6D0D7FA8A242EBDFF0A69D770C6CA0E358E076E35
E0630B4B9E93B649ABD98FE29E46A3635D2A635E286CB732E4E03247DA024575164E1697AAFC
CF124AF3C06828FA7AEF0464F80A95552B4F2B9552C806AF8680CE1EAC41A1A559E5D0E27B52
300EFDB9918C6D4846B602E7940BADE081B99605A1F4AD4E6F66F0327E8D5A4687EE5FDC0657
1FBC736FD8CA50CFFB6E2E8B871B96FD4E0F3CDF59AC880826A8988E1F237A39EF3ECD2D2B56
BD0F2FC2D4F911675DEB0974193C7FD62A8396479DADF9DD5006AF2867AE6C287D16F96007AF
A65AF4FB64EA49D485368169D55005A0244AE35B4523785DA7AFF8145444A2C612DADDBB09F2
5A5B1D963F485828963774D226C9B3FBBFE9DF3DD37D59FD4DBA1940AC1F53A8EF48B84D001F
5C97B6581DBBE3195F06C3587717C29FEE0A4E3F64A995C6D077E0DF80AEBB5CA9B4C497ADEE
9ADEC8CB817C4AD526603AE51FF4426632F2F6FBB680BB0FB087E059C17278B43013DA06FF41
18EC9651C47060C70FA58A0CE12CF22F8D02BE07ADCC9C5623E7DA53453EE1E6728C071FC3FA
6574E2CA1C359295C7D2962074334A8440885F2C8528C88376C6F93D578B47FABB11F5F0538F
FF547163299A0821E42C97CCA2CCD7B129E427FD7ABAFE5A74A5A1DF48BBD172CCE6CD2B60EC
21265FAF50ECA186ABA6CE6FB63D700743231D3033BE611C8AD16FA9A2F524F11D3FC367E461
ABF565BDDEABAF385BB0FFB6345B783695300E4961E43F3E7435B795579EE351D997DA5811CD
456AC416551912A89D32739D03E8E2430C77CE97AC77B38AE5BB03E3A67EEF8FB207ACB0E1DD
1147476262043A642D66A4FDACFB0E9ABFDA1218DD625B64FCE5D4B24C2504050A881CA07ECE
A13B67C3822772B678E7FD5223B956D945808F9B97C735A3AB88DB31A8B14C2AC67DA0C5174F
C49FE41B612FCC052D08C17604AB43DBE2063E39E2799DB1E76B603B08F34A21FE4300AA0D7A
911CFAE6CE35291645AFBED9CD00204E7EB0343B6547FCCE9C3E73DCE418DCBA81D1A03FCE87
32DE5440FF98356C0634A125C64881DC0549E29A82C82EB4AF99987F6FFD515FBE57D3908677
2753239F9236A2B6AABBDBC419EFE2BDAA0C2BDE84C433F4D753F6CC0F03E79F5A59210082CB
BD6D84AC4CAA22EA30F3DF4D6BB4207CBC1B67E40986CD4F213504B0CC32FE842D8965A9E3B5
F238BFE2FA4F587283EE75B0C6F18FECC1CE3734872CDBA530E9795CBED2C7CAA8E2922117AB
0157A1D97A8AD9ED4C845B477A52F0BE7D2214E91DDF9801006CF6FD7E4EF8BA4AC311B5750F
3CEA17E6F6EB068E9AD2CB30D4A4E0AFDC3AA7AAB249F706DE2168108804A4DC1BF522B86092
E5C99098345EB21237689C914CDACD8E52A807417D43415FC06B0EC169281F6FCA7941D7CC38
B09DFE5E3CD9EE8412902CB88D44319FBA9047E903C3467E51D901EE474FC8AE5CC9FC7B4A29
FFB9E50326442C14948F7980665A358233C65BDA5D6F0654D9B875E95CA816A915718068FEB3
5BA118BEB45603A398E058050763750247AA49A18F12305879E230E5AA5AC17423A7C17BBE83
AF56902823CD38FDF53C8156DDD196596D0D5281C2984218BC4E5201E588D573297FE1E34B27
7EB41146CCBDA370828086FFB683078393894E9E2937267938388528C52B67E78DCD0D60AF90
C8F19534CA691720430E0DE1278CD568A9AA711E31C5767879AA6DDABCFB2984BE7EF3D89A20
1062384D0B6BCA5C7763B28359186518D1017D0EF0F497D69C28E043C0BDB38834A8FCE1729B
582FF527734514542F01E4857F59DBA86060E9F099FA715DECE26B0EFAC454C540E1AEB8531D
A9E87C2F0D7A036FE448D261AF1ADEBBC6E77A74AAD646FA533BEE10914B3D3B2B71FFDFF664
75E9FAEAC89A6443959FAEF43337EE1687E2171333081B920096A06093296FD3C466E270B015
6F725A68F40C472416B3130584C9632319B253DBB32940BE1617B011A11D2BAD11620244340A
EAC1870145504A622A658FCF9F2578A330601BED127C7018C598EB3799CEDD132C551ABBDDEB
38A67ECC57C584231A822804975C496325E5496F54EF7A0051FF6A11E738D45EDECE8A9243E3
D16697C5FFBCEBC4C4BDAAEDFD2EBF7D48DBBED951BE96EC19E862A1C38033999C989DC0CDAA
30A087C58E7640EA8B3244AAE13776A9B86438345ED1C4EB709D05AA5EC0D36AA6DC6C20B35A
3F2BA95BC253CC230CDC7418E8D63836515B8D0E14A206F4ACD6787F9D4C4DC9431532D75B0C
B458962CAE3F3FCE4A2E44856DDAD0847EFE44C702B0DE3D937218B87A6781DD38B1A4ACE4B1
24110BEAD6FE772CF269047B3FE1143CC184C9760ABA9CBEABDE34716DD5BAC483300D650BBD
1E19B5C738F9B1B04BEDA4502ABD12E6B30297624C5113014DCCE47A8ABAE0F4661FD2CFDF35
AD4422B28CF287A1523C5735AB621C8ECE6F56E4CBF37D63824F810895DD57380D2E2C383A62
07F7F13477A446A70821BA6B908524F6641BDD9CCB9EC2529EFF72C8662A6949F31CB82F4DBE
708825C7BA991FC6477AF591D430EDB85117673812E01CB8317ADBB429D008468C8329BBC076
3DBA53D02803DDF1EAC2EDE077C75D5BC1DC52C234447142409DC834C644C5F2295C6534898B
5144E33AF266D6A2019486768FE0B16662C5D7417178BEA626EC1ACC4486C4FEE1726335AD03
612D394DA6DE7A3C89496634459E0B3EC764139419373923D56AD25DD4A8058E91E45069BCB0
A337E54C03D56CED11115AF77DB53F805A873FFD60F5A383D3DEC58B0C4FD93AAC08FBDBFCB9
252FCCDA3CD2A9C193CB0E2CBA2C6EB20A0E0036FC3CD9E2FDE3840AA42D119754DAEB4C88C6
06D751E954C8188D1DE4E9613951AACF66C8093B0A916A041DB544F6D202E9816F86D9E12374
254308F659D2704470F23F1CC45EE5B729EE502A8624FC6C0C94202BA46032A8168901EC7E2B
B13915745C7F21F12BF83B0E54ADA573FF3D409C86FCAF5FABAAEAE9980806E40379F41806B7
C3D7320A6E6B02537543C6E39E8254EDFBACC5E3E949720731DCE4F70A221EECD425FF9CD995
DEAFE9E00B01FAD7705D8DFAE1A46C550BAE09979CB4C13FDD7715EDDE1AD0B260D25730F879
CF67A7F4AB46DCAD0A0688E058AB32E21B718FCB38C849B8278A81F054BC8C3F69930B65CFB7
BB935B1A117BFF50584363EDB20E745B26CD2FA9D7C44EA4BE12BD86FE4CD039BB4580394DDB
B064BB5E6F16A2C51D968E0CD8DCA043DB4019BC8122654F03F9BFF9C51BA366D42A861894BB
91797F680AFB037BB627E0FB3DE8CA3704086FA4178145DC1AC8C0D948FB905A29621D12F2D9
F85FDBEE9826DA01DD0FE1B05C8EAD9F9EA9DC1F2F27941C58E4F50B906D8E5E7EF91AC1AC38
0F35CB7D4E382E2A48159DDD4F4DFCBC72B82BC4E4EDDDD35CC4DD387786809ABCA2129F5EC2
4894FFECDAB2D422AADA50611FC0F25B04713D5F1C87794F4256020BF23C575CC008C1A23351
14436ECEEF9EAEBED9EB9CBE9F32C0EBAC9E3D59E8527D06FAC91D318228F3030032FB297DC9
9F2B26F8411756565563D16C615B77449B5E608C6B63701C3ADD500BC6E321A55CB96FC2BF57
C5F64CB95368A12024C04910999120470EAFAF209F7F80CC9309CA2BA555E27DA08AB9DEB0F3
292A8AD108D8460A373A2B77E650707358C4388A9D238B4E1F92BC16E39F3B32B66BAE2F8ADD
3F32E0E9348153FB077B469D61A3888E39A9141CC83DC9049B8DD9FAE040E979CFFA8444786A
A4742639D3C2CD4BC7C546DBAE97761BF7E78587AC7EF9152EE747223DF56CA4B6CB6B7A1F5F
8BC5A74D8E4ED3CE14B5388CE25FAF9331DE6304F2FEEB9099E44C14BBA537938B87694374E5
8A660D3462075132E73DF7B9F235484C9DBE8FE0AD9E35B296A4DE3E192B959462736704852C
8C9A134B5B43DF5CE8D39D618F4F7661739221853DFDFA07FE94011A0B876529A1750E1DF3FC
94548D3739B260CCEAD202AABA714EEAF60B11B3C118C2BC7B3A45D6FF0A6A203271B9586211
31D0F119DF86B62F46E3848B7367DF68C3DE2065A77273B362026D4DEADDBA6923FD8C6E26CF
9FB0039DA5F622F9314AFE4285C73135133A1C8436D711790155E107A43EF479058EC320ECBD
7C9793C9A568C402E5B64ED316D8E1AF73B8B829859639FEF4EBFFFFBB7464003A1BE4E678AF
68FFDB416935BFD2B3B74CF6FA8D0F19A6C891C4D8973379D1448D9ADD63FFCCE9ADF1169C1F
28CFC48932999C66CFC07B594F1A911F391538E068ABA684AC5E85317F48F27038684E1B4609
2FBEEF78144F371F16A47E871F3A89B413FC97CC45EA81BC6D2C1AF8F72103F1A7412D2145EF
4DB3F9B37E139800831FD25A9A7CCF0716C4E0AC33B369EBFA1BABC13A4BED15F25BEAE9AF30
3ADFA555F1A0E6C5E3171B41936A66AF8D1F298F6B8BE4C4DB5C986CADD0D06FE74A703E3E8F
3EFDBB956D2D74780B2AC2932D11A21774E80246D6269DD5B9FE30B4FEB6D7A4AA90B2723A40
7158C768F795C68919FBC1663C75D78916BA9834F74C1674202B46061E5411EF37D4FA20250A
5D2F30BD0F9FBC32A5BB70B29A73ADC2F97F87C592940C6C133A5179BA96D4C42B00E36521FE
B945A806EDDE41FBF8349AAEF5FB687D68E9470F037FDD15E6D9FD2E7205FDD53D48F4F01209
A423664CBF2912D6851E226022CF03D569738C38354E93C16A7E2E35CFC24C280E8E5CFCDFAC
E98710D73170A77CF1B30BBCE9EC43065C7C610AF11AB675C1CF653D3AE02A7D7C13ED17EB13
890A038262C3690A85A9B859811165C2C193A89399AC37B4C9B40B1020A8E627418EC906431A
BC2D0BDD0E56A0321DE0CF39A32316087B4CAFADEFB379456632E7FD1A24E655696615E875B5
37976E514621DE2901E007EFF0280DC344D432F6974342AA55F6927D6953F3F01D02C6DDBB79
0DC83232834E08F9518545BBFB802752B608D66A0403EA8DFF3E2F65C94E63231D22B87E6185
2277408931DC7485E70E8C8047E8507EF8D68D5724704531253BFAD3180D4F242DF751E705E9
DAE32D3C3D177EADF9BB1AE6F5715FDCC377B141964717A10F7792DDBF4FCB46D727A663CA5E
FB5C8CCA320F1449D3E011298420D151C7B11ED3D58484E55E33E186C11FBF27D20658D5A23F
784D2FE10C3E3A09FF2296A41005122C3B92BB9600C99683C0BE7180B2E3DFE4DA23982FBAC3
72177585F9B7FAFA7189521C78AEF47DE1694B408603A034FD3DE55D970DF79BC4D1AF63AA20
0DD685DE7016C087612B34880A967421A508D17D0A4763F1D491D888691E4552A6A7C43F552D
AE340F4BCA146032124287AF5E3B967AC56372F17974A60B542ADBD631AE13434B4DCE4482E9
BAD1CE4CB6AD281919FFB80EE166CC4C4D11A98CBB6359170D2E2B3E3B67190BF6FDA39FEF53
EC495CB9B98D0E31289873820D464C433AAD8DBD44F6F2E02F8BF025EC90AA68B9A56D1D114A
0963E5910A062D99517A35BC451816D0433AF5DE899AA43E91980C466B3EC220C719B63A9740
AC31CE60D218A8996ECDDCEB98C24966A8E2D0B7CB989518B5493D7E35073C97BD2A39A813FC
4891B49EFCA34ABE7E913ACFC797EB01A877C8242EEEDF74C1B8A528D59D8CD75108CDD5B317
38FA5D97371F514FFE00C1AA1BE341898D78FBFB091F44AB56F534982DEF61189A72126F5B23
2B0005A55C671750254503BB0CAF4DF44152E610AF7EA15CA32450810706729AB4C9BAFEEABB
A1321EDE0BFE5D54A61F1F6B7E608E060463D2342A00E6025C1C47714DB0919B66C5F92695FA
A335DDCEDFAA27AE6BBC628D6DD9ED2C6D26DA3AC275EE39F427BFF7BA5D861CD42BEDB3B9B1
21323E2388E2622B8166EACE5F1891E5410C7856D540B61473D521261E05B1D7688E09F529E3
B69B892AA43F56FE5F85BC040258DB2E60DBA907B50B15E56D1F8F02D7892E18E918B6E50DEB
CF3D40B0039DE5820950AEB0D89E7B1D0A1D88EE21125F794FBC44D41BD71F804A791705BCD9
E873051C73FCB1535A06C53F9C312498ACFEF6FAAC6DE941C9AD6125A562914F7903255B3974
2CEA99ED044724C2C86D6CEC57FFE84C98363EA4B83116D297C7612B2AFCEF84E03C60BE7013
76C87B2A9919B97882E8F13AB34835CC4F393E530139BE17DBCBE7EB1F9E4FA5120104D5F482
7069912C58D59C1B379F79741E4DF1D6D5064271899310B937A850C722AF53D42EEC27E6E85B
B8930FAA87A50C937B508695F13C778A1A810DCD86CC3CE70EC9643466BD585C4B0575065588
C73CD0AEEC3E466AE803B11062229D8B601DB8C3A3A58E15E2C908B95602F465D1AD4B202FAA
B043CC272FA607C489D65554795F38FE2FD8B5C7D408179BC98936DB13A93A8416DEF7479E06
708B2EF4FD61571677488B5E44873EFDA293380B5A04A493F637FFBB682DF46C8A208FC31440
53D4CA6A2D6812D4676F3B1A60DCF27E87B2186D931D9120910E2155AD4FFD646A4EA0E4242C
63886DA7006EB5C004B54F366E18B496AC776043184F9780B67D11924AAF00565EB0E70F93AA
D979D9536774D682C6CD1123CBA53E92CBDF7486AC8AD384B47BCCE8A5BF312BA43459BB4F65
88FC33A468747F56796A8F4342517FD755A08DCE6713F65248ABAF07920176A676195C669E79
2C0DFE5C3C5126FD07CA410186F4CB4EFA669EBCC51623EE0252768805131F575F5BBDD27585
50AE675F41EFED99CFC4E44ED5B37688A0E24F14A9E44E6C4BADB3B04F25A0C718281D4379E5
92DE7B72EEC6306A7CB17029A576877EBC5D15D540BF416A86F976DD99810A9C8251112452C1
8F8D0C621457DCA1A67F1A289DB48DFF26F3B2C66E9A0DB67B0F3DD5ABF55CBD8942C6AB92BD
3F909EE664AAE37D292F2255FE35B8F883FFC6BBB366C7058037AD15947ECC1DCFA6067B1904
14B5F7627C19C5925BFE66128DA72C914FD1EF0B798CE9F1787AB743D7E91FF0046D4D88C5D9
2FB9E03556B28480D266CF5C2E8349B79DA14810706D14484BD5931E4BB382401FBD211C8193
749505604FD2945DCDC5F03905A10D198900BAA90F3BF0022E6657EE69EAD327DFA3C487FBAE
B5D4FBF2EE58850E6C6CF9E5CA44EC10CABF5758B99E4C91ADE9BE3019FA326AD992F8753156
C33F877CD724EF19539813DF686FDF8891A7B1A98402DAEB5B13E1CC298D9A77FD6B341C7BA0
43979E1C46E86FE01EB1934B8463140C6A70AA047AF017F693DE407D800751C3F4C27340B373
D41701689C1490A16BA415B317FF3A708FAAD8D28FA0A6F52E8DCCD48DD8DB0DF3D49E3EB95A
7A1A13B70D6E8202B9D1465A23E00B1013D4AABC7C56C278AC81F838334725F385E636F82C6B
497E6E3082D39E712D8CAF5400D4D5405F0EF0EEC7B125C06C576A74D4D6DDEEF36D6B2CBACB
4C6C628D6321925F7B9913D195A15EAD6CDF49DC8604360A79271E136A82F7E225114216DDB4
6ABE9207B0B8D54B3F83A230C40CDB982539BDF435A4D0D820348FB4E583B80EC6A6C9E16DC5
AB2162CE97229115BD6E9BDFCE2464D64368288211749E5A5B5853AA7B9B74AABD7E59EC6730
A1D2E5B15B0525D2D4AA8E19D8D68BA661840C485805252C44082DB818C174A70370D8D3C366
66EF6167DB36536854C1D344205B564133D4F0F521857FA3FCB767BEFC65B243F4D528F1772C
9C9632A5178C68ADA74D20F317204F821E4A5B72971C253B5A055B9E90F52B197AB30CE15391
4AF96CED96BFCC647B0A7AE103714B11313DE19952F42780A606875139DBBD8D209131EFD3AE
979B799CD918367925B112FD2F8C34F7515373FF6B40DBE66AF06759DFAAE44EAE1E4AEA5208
180B59B8289A8491ECA67E58ED91925ED77A3B65651CDF7F7AE9594C688025BA4F6EABB46865
A4AE4168AC9FC7EA55E4097C82083AF9FDF9A01B3B94C8F4D2EECAB688DF3864BF8A14AB6E55
B0B8A1F6FD942FB25F199C07B365AFB83A5A78E68CB0DEA65668085D7ED7E5B7D4980F2C258D
CD0AF2990562BC36359936F0AEDAEC6C2B3EC9786BE1F6CCA1ECC80632BE5307E9797836CA0B
1D52A4A286F4BC36324E1AE948C65C3631D44E81A06E49D7813C8515E085DF143D359663EFE2
8C234FA2E075B9FEEA555EACA4D78DAC108CA1FF94F0888B1A92EF94AEA9DADAF2FF708AFF68
A83CFCF748BE47A6C4D0D57B09EF8FF4C6AE6E0CCB3267B2BE5B8178E6F20A17A97D3569731F
E4AB8933F9BA889BBF7E29DF5782DE2259C14F16A0E2EB06FCEFAC8AB58DCB2448EB997AEE6F
829CCE987B2AB44E9422618C8CB64DCF396D73F50CFCF90CBD29E62193581E39587CEFECB6EF
CC51B53C00DE8F823F424973663B6E6EF6FB64C2BFBE15E51433CDF1A3ED82613DAD26C6852B
9993F2D99244A5EF5CBE62F5041E6E17532123A3A7A8D0357A5BD54399541A4C709B9AD3B776
FB0086E2CE1CB74B466AFDC4207D4921C40D0A9EAFB60A90FAAF51BE3C1FEEDAE7CE14627EFB
E3BEFD3CEBC66FCD0073AFFA32648D816A10B0A35124964778296D06CD41AA187DEEC0CCCF6E
0F27E1B56C45110CAAF143CAC6D16F84091F71BB36D94E529FA60793E822A39E107C77DBDBFE
E4FA1E22C450761BCA9287CA88D8197B11E1B0AAD10D63E92F095815DC0751A926104671E848
144E4C96EE702B63831C4FCB8FFFA566CBD10F4F7B2093D836879D67F94DFC9B0E7C8127BE4C
D66CA31CC766F2AE36EBB69B05A244DB7F0ED126C854BD086FA4698E1CA316CAE9B68253309A
09BE1B8A6132884958F2026F7776889F27EA5A327BDE58D9343209C70F69CB94D1693328B952
5CA4F55776440B9864E745C8CB2E43D3EC6EAC821F837228423A0341AEFD2A2388FAFEFA1D42
241E8BBEC335DA34E109699EBBCFDADDF381F3372017033A600ED4CA6DA725728428BA45FEB5
E7C4A1264EE649E0F00EF3BC70855C0DFDD023E9216B616A01E37ADFE665BD13D51A13A05710
BCE38063798F7A6D4B808EF4024EAD5CBF3F5E3D893ADEA05CC2A9642871FBD41DD7156C5ED8
4AF8ADC4DED1331A8ACFD51DD8F9D928249FE18150314ECAA4E291EB13E7BB5FDB2A259178E5
F1371FE7807F8382AD1491F86958DB2A0FC1D7028125F94FB7236008E70B16BB3B6715CE73F6
320E7FBCE98F23A1D71B56561311D10933961CE1224D0201B95BC7F862A23B28DCB747BE5FE3
7D6B426676AE9AF48747283E1DF09AFDE4A269D63295C7C15F3A45F56B27E7D2CD63AFB0AC8A
2563A4B6CCE4FF3306A28B307A0D4BD5071FB1C65B94F5DE32A5859CCB826F8C894737BFE6A3
32C384C21F6ED7A3AFCB0FCEE237868C9529634F6AA9152B168B3B05EE7A768DB38BC4EFCD36
E4F381C2725E3333FA6D055225E1DEAFFB9FCF46D124BE0F86647526B3B011366F1A19DEBA97
26F75E78B3765D421C915D74DF1E3B464BE5016B74116233E831BD68A9D04CB4BA468A19C2F1
C7EDB35F5DEF54E7C1E78B8D8327398188F50A85B4C0D42C697F52CF1EAB42C6F244F6B09B2D
F36C7AD418DC113F53EC50C6B1C92C97E9D328A680212761A27BD3BE976D4963BF18D6D3044F
358E7E6CEC1C9416B6C1C49C9609F4EA1E06811BC69ADEA3D300AD997B92DD4FF82FFC2F5557
D8575F70CC34A7F99167C03491999AA972845DB3773D98D2542C9E8C1D354D1C6C5986E6FAB3
8FE948557D2CB6C5C0B8183D649D9266BEB9644731BDA580BD4729516520C72152058048A207
6432D65DE113755AA32928A75ED4880821CC7D3BC051BBBF44036500E7A662A76914AB2892CE
C27F195072B789585F11F24AB09867214440F3CA15DB2280108B1B25482916AF8D3959699ED4
43D867D3930796CE5ED4B7317F9F80C3205A4250BD7A32B439A8FB5600CAEBE2ED3F227CFB61
B5FCF0D15E0F233A7910E361770F7112D357412C0D6BFDC83F65B0E6BF7A628E75DE2DEDA664
20C2CB7FEBF7C1E0D8431440BBB85E9492FD6A9182A687B43DD2E1DDFC2159B8B0734B0BDC36
EE8FECE6D95A2B7A44BC1716C14CC06F047FF6BCA7D2B3F8CBFEA4A5D4F40FAC671BC4E38E09
D1CFA5C8267CDD6EBFBE9C6FB2B8487C2466C2F5DBD4983D889B5DB9683FAF29C86D876536B5
5707F5D0256EC290DD5745C61429907F123A9C133AE213A9AB2BCA0A3911B8D993621CA0093B
88522B831795E90852A49805A22DC41B66FF6953784C8E97BCB549EFA7C42A477AA559A6B88D
8BDCDB606AB8B305E5AA6955A33DA79A752A3CC5FA05B218E1F44344C3841AFADF7F783529BB
13C13C8E7570DA9803CC1136C8C9BFC5AD9DAAF1829A133E54803CABB64351B46BEC60C27D22
FC1AA2EE5830DE10AFB77E5B81FD2B536C53C1E351CE8E7AB5847AB1053F4DCD133E02D6123B
3674769F467503835FFD047A921FD567782D57552888E0942AE759005F0794346BA937CD4FFE
26D2A5AFF34E7189A304B577BD767381341CD3AB1918A4B0DE4F61A3E58CC805DEE6641EB7CF
4231D316ED13DF03C997676540C52E5014E504EDBD3984B475C0442B4D65DD3EAAA87AD37C4F
7BFC090DA7BB42C8AA744E9878CD5AB9321C7847A360592C6E6302547BE4AA12EE7717FBB84D
8EBC66F4C4090CC41413DBD28F31EF37AF7CC1540A773F571A74FD3E6A444E5F19B5084324E2
15A4114C700FBB29DF2FB18227619408B137772858D1A89A5B1278D0BB570F85C80F63ACBFE0
7003034093C367EE0F0D572D861C7A2D64046083828B8EDF6B6D15CF088783B8D79DC3B99D7E
681A9B31D07103ECF70AC43BB1D4751FDE1851D798912FDD5D1F886AC858EA44141E00FAF487
D17629B7064EAAE94F0FEC4657D69F1D886B71D5C8426F880F8C0921D7D115C24CA054D45E77
CE24B554A675D3F7955C92DE6E2162269DD84E8FD2208E93F9EB3243ECFF53941DC04BF384F5
35F58EDA336205077347F703B3A630F4AF8B84ECE7F1DC84E9AA71E2113453514E0EBE04185D
531FA596718CE3EA7F67E65F93F286F930DA0ACAF831C91F3F60763A05D182A938DDFB529078
E2A3B6C8A37AD076E9A419F08A8348389D305234496E430A1A2957D3FFA255A16D3FF608334B
B3B1A5C6BC7AACE9AE959F7E51BB51334E4A7572F11F702BC27E3A6698EA5AE5405D617722F9
99AA465F81686DF16B28D497315E10B8DA21B43AEF4CF33B3F3E08E07D3A7406866FA38BC8B3
3CC13B889EFED6A6CD2EBCAB42D1B7944DC1054A0E6548C613ECF1A481CDF9B0C41ECD303648
3DEC3B44374AC2F72594F6A5532CDA3A3E3516B949B461A711F467BF82321F35F9B242CC2B57
5F40FB939B428B112F1A12BBDCB60DCA81C06D1AA400AE5B9837A5EFB1F189DEF4F8A058BB8A
F601F0F0DBD591A617EC7403733C89D2700816EDCA68FFFBBDD683DA66E8EAA12D2FB818A2C6
B7C0039ABDAD8789152867003F57061AD356845F819C1D73DCE4C72C13AC5E8C97D02F832D79
8B05C0403F858582A754772EAB6CC8486485ECB62EAD8973AE77B32B2E81B3F42013CDBC288F
B1579A856A142EBAC05040997ED259F92DBF49504FCEDDEE84E1CDDCAA222B4BC677FB9181A0
9E90C408032993EF569B96A74F966FD3535C4C4DFE68B612731772DB996AD71090D7FFFD6ACA
B9BFD4CFD27E683DB1531CCE1A08A96FC42B961540D45D3F9B39005F176A71729F09BA38A0C3
20169FF2224282BA19E9B52F29C4A4A9F8EFEB14CB82660B7E8622AD531A9573CC39E8A6AC03
BC49DD482B26C72BCFB727F0D299CF9C02B4C1C5203C5C6E58D3E84CF762927CFCCCD8010FC8
49CF95C41E8D65CA6E9920516DEB3B72B532478E0A6CDD28BA5744D55B6B4B8D468F6910FCCF
022C46BB70FDBE71A2AD3B0A68A1F88D15E44E4B37C71D8AB718DDC71FF14F58F2211F8F5017
7B3CDA57D42EBC5621DCF60E20B2D3B85FE5EBE126D8C0CB04A40E5DD4C21EBF668D15837BDD
095605A37A3039EB167DF9F5EBFD7CB5850108125AFE10B68ABD7295F452FA4EF3FBF24BD39E
743817606025B3A0EC8F0A6E4D26953C11AC109D19658BD278E67696156F041FDA5B3B1BA1CC
3F5AC379087A73D2F7ABEAAD4379CC9ACAD20192271D10FCE1045F52315738C8EF1666CA8B3E
E1411D81CDAED30FF6321AE30043352F6D6C0517DBAFCB55BF98316730F6CFB9EAAE7981DC88
46D9328D92F22F6586A9F338BAFA812AF571FC497C352B7A2826CEA8A8555E50E3B3FCC7524E
E55393019E1E0407DD13435C05F81420F3CC7A74643FEDA358171EAE1348D1FD78328A7625AA
FA39C60EE153A08BCE1CDB0249C126BE081E74ED7464CECF04955C25CB0C5EC175431CB1B672
98A8964FDE98E13FA11927389F1E876DE3D06CC2CEE5CF740BE6D85F8F6F76F737D8978AAB6D
40B6A5027B1F5992FBC17D2C074997ACF48A8D443BCCB38C704FBA1E229F0E8EFF1B44D7A592
E8A522B6E07E1EA889E06E4F7ADDAE54156B9E7CC8C0418D82F545A0D14EC1AC1C5B617F5EF8
7796178C43762E81FBAD438217097F8582534E57DF995F8733BC4430D1A1BBDB91912EC5CD77
8C286374763E171832DA0943D254FE64BE0E05559D9FCA77184640F61C0CA8C2A31E6042DBCD
BD19BDB6669EAC5C515886FA6CA422582144D7CCE87F49908728BA9A840E37A7D4CD54D2B0B9
C9AE5B6CEB2B2A3C2AD859CF34F85C5AAE8171E2CAD94F47F5E0344836331AC3861351B6B6AE
BC41CCFC5F28FA5CE258BC8E5C4AEDA6146245C56915536946E1A0FF876AEEB9C1DE2149724C
8AE6F00B91ABA33C2ADE2770C74169F7D1E0E8714449DE2BA0037B79E36D3F05CA0DFF5AB149
89516E880C6103C3BEF7EEBD525766E58F0AF33B2240D257110AB63FFEE2308FF9EA69BA2A52
F2A7241A7F52498B031F8FFB6AE0D271F30024C0480725810803C0166B98F35E6F6EE24A3F37
5E7C54BDE1018AAD846216191026A9BED74B9AD11E5C7F523D407E98AD2F24620366F20C1916
50F8B4134E3301899D29B46FA52985DAD322F94B9D3E52890ABCD188D09FE4D1FCC0B7A50FE2
63BBE5EE5315C3163A5EEE3052836BE6A1AE010ECC80481218DED448F0BD7A12E7D2B52B6C2E
CF8D7EAED62367A9094883116CC9EF04AAF526A992A2088CF9027A5F84AE6C0DD55E46DA7A47
3BCBE4830AB5D2E26A82AE4C5E53BD010181DAC9B956457D7B64805CDD22BEB684E317CD5950
09E52CCE501F5E33913590079870C02B33AEDA96C0DA8C32828B94E7865DA5939BFA435FE5E9
C8CEDF17C9B0914E268711C31FE55F7C9EC4EFA5119DBB413AEDE8015F53DD5994514C8C8714
8DD1F3456EE3AAEE9AA677863B0397D52763EB01FA7AA5BEEA5DFC9E470CBFCCFBE560A014A2
B7580C82F75BBE0C3240860951C7143FCB03B9A0E4BBB81C89E783A6A46F73CCE5E95F788D2B
13EB1FE866AB710605B463FED1A01B1078CDB36CFA524EAA49A502889EDCDD324E112DA86E1A
97C3BD4FCA3437E8D5615C4042CDCE88F6E464663AF7A14D50425917FCB5EAC6FB4A789EB88F
C1923FBFC001DAF37CF39B845CF6733D3DA5CA5A2EF768BD776EEE1EA4B5B44E5D11B083E17A
A5F20F25B1E2D0382E90DC9109939BEEB451E1D081D58DA932B2523BAF12C466940ED136F05C
D26862AA6885E852FA7E6287D0FBD3BC15657FCC991C2AE34C46C2A763DAFF664222B8D78465
2252DA743849552527808DCC5C70B12CB9F2887B8DABE303F21C10B677B1B5490B4390EDED64
C850EEA36696E017DE1C5BE010A15D08A98A05DA37D8F238836749B842EC17ED6E76FBAD5C57
B1F7C5272F7663066D76ACB1EF8E75BA709844970A42BAB44EED737AA4149EDF805CD03DD414
54AC4CA92840D965E5119F276293EBFBEF1509FE3D58C7AEEB2801B885B3239BA49D9D26DC2F
FE307BE4A3DB9649EF7521D2F58E6A7B33F1D9A3E7927C14541CE2EC94D8F61D0BB35C2C4297
09A6476CBF11C9F35445AA4FC8366E98B256E229329B66D23CEDE35FDB1971BDE1A628FC91FE
DE30FA047661C308C0373A7CAC1E110D9C45B1482692E8C4487E1F750376E3A135D682693107
D12E721B6E27887B689C295DB72601D24720C6CCB4D5F290842B8E7BD50352C9AF2AEDEFBB00
496E40162BA9A86A1DEAE138C7FA83170DAC105EF2FD4C3E733A3B3715EC5E97E0F0B44D87D1
846535939358D6798818C7F00075E77A06A2EC0B7118B3244DEB5A73180004848C84394776F9
FFF730731D5D8AF0A5E4EE45019BA6FF7DF479709544360FD9B1241D4684DEF708A7F73C5BE5
410F367FC1D74BDEA77930F4D20C1F43128575E9F15D3A4943D4C28604E044677CC7006169E2
5306E0646863CAEF93134601FB726B876D7368D4C91D1B7CBC9683E0ED86A61279D544EF2785
F7C428882F638E1120207CBC62F3696B0AF9F25038910F21CC2AD3478EC279E6FF83D3417A75
7D6B334B6BB3BFE3BDCCE68977C42402BD7C97E6CD9D78AA2899DE05955AC431C893607DF8E5
D4831F87CEF6A6126230B7B9F80AD0988257B0C70BEE3B17F83896892EB69F7A9E7F04E8EEB7
64E93FADD0A30835AD79FB7FCC6C9E1C2DD8BE123899C46AA2D5C440A62F75807453CA78E465
C6B22C87D39591A626C92413999FB7671F3DCB141FA3EE2BE44D7A4A0245D03BEEB3DDEA95E8
CC495588489A80A3B608231D2920B26EF2CECC49B1D69B96D07F2D618E096E6ABBB8B9C07A8E
B7B092A1645E4D10DFE007E8178F3FAE9DDA4237FE8C363D9EAC414DB43400EB1B5D61617B55
7FC3FB574539A0416D6A10E35A109638457C5672027CB9093CD02931932BE27C4DA04A58DCA7
F73A5712FE9635CCD959315DE7CE560F446805BC6C7E6B4C3AEE414049261E9BE2F76BBB20F0
DF2534AFD617912B83677E091DCE521CD1FB17C81EE7A31E4510F519AB6A447C85716A62F327
A1018AC691782EB7A807172475F1A3C264DF126484772203F3CE757E02660B8192F37463DF15
E7017EF3D77328CB54EFDA16BCA23306FCC2EDF2D2CBFFA77D888281BAFE06E64D78514A3C40
A1C1756AD232C5560ABB83388FE8D06ED8E44BC7B08EB8285B3EEAAC582B3BFD1AB04E0B9394
04CE3F29FF082EBB694DB719E4FEDBA7F8021F21B61DD8112012D9D00424D61FFBB85FDC05B0
7534E7A74B3C6CBD509889362719BC38B54A2B6C99BD06A9ACA5C5774E8B5F065493480FDA1C
5053FF6EBBF806BAD1D0C5C99C05D0007AC81AD9A5CB9458742017CA1E0EA4002FF7B465D4A2
1B05987060ACABF184B0D4AFB602504C2313A44A238FD76BD6F484905AB1F8A923E4E526AD8B
FB6F8C130A857B057D019BB4C3C50B63BC3978A763B6F500FD4C413C0863F69B3CFFB57A8BA2
8837696E3D2F78BB76470D5646DC3E3AED2E52A98957C410FCBBE2F64AA33831938E9392DE7D
F3E9A852696FFEBBB6BA17D3AF4BCAB5F909AB46AE58378FD3699AD27D6CEFFB6B0728EAFD88
99C132DE33E84AD9432DFA08FFB247C7A6F7E43303A12A8C3A0FD71AAEE1541AB6B5EF2212E4
64B7B1A73DBA72EDC0AA69A7D8BFFB64F97F6603BFC4EB1768C6CBD417F3E4FF8E17D0DF4273
C241B7F6830D6771F103B9179D6FD2C8929F92013954FAA8706C1082240FED348CB9C1E45DA6
B23A0EA9BC2BB7783E87F30D2D553BD748BCB517EE8320A9D370BB1A1792D2F9EA5A7C699074
5B6A824EFFE94C2D2D6E2C351FF9A5635B5302F84C01E85B789565368AA9F3728DF44FDAC4BA
C4F0AB43DA439DEF9B16D4A890313E70594EB5C307409F9AB35057B5B0D594FD6142BFC43CD4
9665A722CB35A02323DD10D99F16BEEE42649898BF267F2D7534C5486448FCD50F1502D15A10
BEC9B61BC33E2362D5A8E01C8AA80785F0F012D752716A01211D6659B5012F5468EEBE9F1EBA
0D3519AB0ABE2FA3B00233ACA4BCE5D5FB4FF1A9BB6BDA13626CA9D7433EF2BB0F069A9D6185
644F69C8495CE19391338C51207B01BE7BDB797B60118502287590305EB0CF0D549362F10754
1E13C079DFE3C05DCEF9C8063EFE23C71FE12676490DA4F8A95238AC0E05654EAE77FF629247
8002A78C7EB8529CEF3BBB7BEC0DE2AFC5F7274200DB71A62937894CA4917858B33BEA8D7CFC
88EEDEEAB7CF1B0D1ADB9986E826B6D98D590CE216ACD64EDC8733EA8C1A14BE261FB5FF9480
1E915FF1FCC9B18BDFCB5A9D4BBDE02EA52ED202F98D00FDFD175169E83B9ED1B049914A39EE
CBBBC90596EF6C38E667DEA6A5D0D09D23FCD6997EEA1751B3FD758B5396B0CD05ED9986F4DD
4D1DAD62C707975A650BD4F0F14AD68F62B4A676C0D6A9957BFDBF3950824296C8B7D1191950
8B320C3ED57901C7ACF207125FC99115F72823318E104536D81AC47DECC4D5801D190762C8C8
14FD8E063A49ED58D04F4EEA87E7B8D06FA7C3F6CF21E442121B17CFF089792EB5AA7E7A0DA9
0931D79EE078E9346AC218549084E62CBB56547FB4628B9BDBD906AB5AAE637435BD1BCBBC83
2203CCD62E174481A40ACC745D7B2457EE24C9A2C7BDA35775E8E9C7BDCC8F238A6C4CC98B81
C86C34E13DB0A0AE52AE9C4A212981FE5B29385C39784EA774CAD2ECA458DDF153F0C65CFAE3
FB542E693404260933197B71ED10CFC372DF1CFD5D481FEC65AA30EF505F246F215B8EEDCB5D
842FA3568CA2D296AF8552DB7C51D1F0FBD7C5C85E9CA9630565AD7FB8E20546C1CBDBF66EEF
501E330533C34AE83998FB883FCA2F33451B2FA72D2369CDCA5F0FE211F6F5C5EC38779D5BC4
A88A8ECBF003F86658192FA198340B8ABD5FF9D02678682D93C29D85A3195ADBD45A4B43A3BE
3BBC4AA687B1EC5948823A176D8387CA420AC5A71F40262AD778584FB0B20578303B48BF9766
10BFF5EF8E34CA32E74A44FC55924626682B26FD05C8FC76D9F1E43B5A682F1F4D14FFB11947
B0D0D7C8E76BE5200A99555BDB3E705B53210C5CD7228DE43228548E00800D600BD51ED2EAA3
204ADAFB2A225507BD924DEB849FF64018AC97B6AA99843F7F1B5A120F8EAECDA46B81006526
2DC4C2CAC37851DA1640FF391BAB386B357F25872D577BBAE1A244DB8AB24ADD355C01C4F70D
1157256221933178F7E4A7FC0E38B95077FB44EB9C07AE4C74E947FB947A849A0B1450123B81
9ADBC519DB491F3D8A1290EEA1C245721A3C8F758051CC1A5CAF06CE36617F8CF75F64FF70A4
2D4ADB2CE967817C231AD6C4A5492F616C9658E32032917F59F83B99A78A61128678B0EEAB5D
BCEE0EA0EB9867CC2B4766020EF3F7B385CC3C5EEE133EA083E04A6FFE7A240677D7F1CAB4FE
F76D7D1313842C386B52509A43DA777357BEA7408415C4AAE745EE4AF384FCECF1A9C75430B9
498947AE10B806C90B7F96FDA4FF65FDFE2D19CAB63DBE96334D7ACE73942BCE46C25DC84A9C
2BC4EFD7A344B682DE527E40BA3063A65B9A1C1B39778132983BCA551326F4F4187E29365421
499C105A9B12F4E2DEB8AE751E6E5F5E569DD159A46EC69B6EA595F27A94717677C8B8DE4E69
50342886F331ECAEA82A16F04137AF395AB5C3125882BDEDF1FD0AC2BE6625D8280CF58C4F6B
935C86087FA50647F928DCB7FCD9E49AF9AE32FCA451A3110637919DB7A06C97604AE276FA75
C3EA4DCCD1748C5FB1375C5CA4C30403986DE2428CAABB96E662F5D4B6B7C94671F0B27B07E2
63E0ABB5D20095F0C857C0C3EED54AD9E22B3D3D9C46DD246A04D02540528B6736ABF562A73F
01F30BCC09CD5D16F0657F61E9ED6EC379E07C2CF9ADA146C4BAAD0BA14F45CD406C701EFD9D
2AD4EBEB386F1E0D34075214ACA375EAA756B7BDD8DBA59E561900C70047CB244A9A9BFBDC11
362589602BA4769DA80FA9F8215B682ACA36360AC99B1A2859C05D3FBAFC80C045B30BA30637
CA843F12E4A3D5681A306DC3E9CBF2D730B5B062DA350A36AA9D2D42942D584C13D2EC4ACD3C
DBBEF016A7FF1363A9F010753204DCDA61EE501E2C668E9659F6B7FE5E0CE0FD6DDF0F78F41B
2CAC60758B3E401D47666065B5D6165D7CE50E16FA475938B2A1C11402138F3DCBDC699DA301
22884A75DAAD41B7151A36C20F49689FEC1560A4012082A100E4BBDAB083071C89DF5EE8AFEF
36B98DB6D4EF44040A10CCB7C3B5CA803F032D204EC47CFE62534F5700C31D6DDF73FF9D1B20
5AC46F1E7A5199DAE7C0B342475CDB626C5CCFDBC4437D125EB1F7F4161ADA5B74453768E44E
6B2C62B398810C37376F6DAA1E7D45385DEB7D67966D9E75D5759C83B1271ECF700423FDBF5E
C8A240D96C0A9A2DC66619EF6F81EDA91073A136700139BD2029D02A86D34954F880FCD49A19
F3EB9160D2CDF47BC86F66E48E6E15E52E659020212F78E3D8411A25F27335A6E4F812454833
722A0E5E426C294C4DC02C99474362AC6B9CD92E9C6DEE3ADFC7F1A8273F902A265BE63A2A2F
C87464CDC35D1B310703BF27512BD012BAF86401A30463515FEF83C6CE23E01350E93C7261CA
0A627131B95E5DEEB8F88C61F3949818A770B4F1CC3ACDFC23876B05CF521C2A78B020763928
63DCE7C2B3D69A6DDA20E10409A005964323120235A35E7EDDB23A867A483EC41D5989D0FCAC
D443240DAE823564F20C1F30D9A85149A62C2042F8068718549DE1D4987066F6AB21C652F244
869BCA04ED04A7A51F21045B0F2172EB2663BB8DE85AF02ADC50C76043E1C72403823B7C3CF6
D4358333C1B2B908417BB8A82F9C7E9BC2C911747BF51CD2352C5AFF3594AFE83C605102B5B7
401BB44B6B384EE949254957F9C772AE76D220AC6F306E28767EA54B1FBEF6167862A987D153
AE682D99301AE78EF3BF03F81DC1622A8ABE573484BB27DCD643FC7A840AF061E3896FF2F506
E3DB3D67A246B3D9D764F1084A2256C0453FE996625B270A8173F0D609FD51553D0BA9C9E26A
31F3A3CF5B0F58B4C250F214DF7AF8123EC66A26F8080BF86B9EE572545BE8F4C619D9378F87
A1E96E66D94AD2266C012A7A9E7DB82C7123D13D1322EC112E282D85C10118949EA6E76EBFF3
353AAA27D40787CCC074F5FC8CBDE32391D0528CB7692092C9807C77A48297726AC27F2A4A52
F5DCDBAAACC661D9755C2285F0115E638F2179E702CD35842F3A7447274FC58C7A742C109304
C64A7B04EA2A85DB7AB1BA2209D9653E6BA614BFA085199EAF0103B877DB8EA8EF10F7737120
38121F33DC35A389CD8BC0BBE7AC48F1BE4E39979A5ECC938F5E88FE357132C4734AF09D074B
F133AE8FB13A7AE04F04156D684F4A23812A4884F301D7B621AD633F9B0095C94D3258A9A44F
0BCB1E829BF56317697A4B7A90B22D78F9DFC8FBB5E3E55A5797E1E5A8B467F6A05A5E53B0F8
ED59696A31F9A2D0050C752AFB9C979F9467764138E11AB8F729D9A7AB67D0C3CE7A4BE86E4A
67E9F453F1A526499C82FDB7AE34EBE79001AE2D9DC1C2ADE18FA090B8361D448568DA58E49C
A7981CE986878B5E21214B74B1DE63835056D105E9134295FC3421C6DC510CACB61CCF3D04BC
1BA6CF22C26800F41EF111C1F3EDFD1E1AE2CCC9CC290FC9DC3BB8611EDB66EBBBCDC32FF14B
B6262AE8A94A622637EB0CDF3D8A9EB2E68751997E96F9ED801754403F691F7D63C917C82626
5FBA2650AB8D2DDAD4730F12CA0F9FBC705F41926594AD9E1914F085EF83EC5BC65584D6A4D3
C9A06ACA80791FFC1FF8583B3EB6515E70B7D3345458372D745AB5734CF40E8D306F97C2B3B2
37C6925E0CB5BD96C62D9414F4034992BF1630C7793D0EA2857AAC6428C36AF722E58DAC6A55
6E9E270B7563D3E69FBCCC8BE69D8A4DAF2C6B0BFF188B7AD36E00480D44DCA74BFA1D1C029F
53344FF23BF5B010131BBD9138F540D7BB41D3DF8E7CC5B804EC5B2CA52162A7E6C8497366D8
ABBE7E31BEEFB3189DB4438932C670FF646390144C2F45B5FBBC0EF981C76F3227619AD8C687
0E7E3C780B84A8B8D14461E86A8CB6F8AF8007B3F27A5946456DFBE545B72E344FBDDAF1CD58
780936DAF8F4D67A642776244DD92D05CF914977959639CC4EC34BA4B9B7C7C19773C4FC1891
72B38C3B6C183A6BAA9DEB8A2226D59A7F3D6016336B1B07A8024EFC719BF73168C5A929FF91
8FC60843D1751D1DF0886B0D7C29A57E3BA2D758ADAF2CEED4C933485A6390ECDB391948164F
050FF54485D3A97F82516242F0334A5D1D2A26E9981B0332D7D3C53C9B1D013EAFA8652E252F
E846134E3E0715ECE378780B06666E738C4EB1803E3C1EF42D93DF45100D0777209B4B0647BA
D5BB5F8D0AE3A6F462F56917B0BBE2F49BB39CF3994D68B4C3E37B5D8812737434C5B5DACA56
0DB3D1B0C1FD860C760B3A1183D55941CEC0F997B8D69694115DAED65C1B387C8E6B65C09961
39C1A714060F6439E9CCA61254FA7456FAE329A7B1674BA585308762D69EDEA1492F2D2DE847
32D6F1EC01DF29F4420060AE80A4EB0BDE61C5370240A0752A2DDA6964CCA900EEF87481C25C
611044F2E312C7736F38403A2214DBBB77C69E8802884A52AD12A51C757AB0E0D29A49AA8238
86CAEEE43DA98BB483FEC25AFC2646D439612CD002BA7A5533AB35E887CEA1DE97E960AC9253
35F35B9182454D6D6F0B205131193191C98F59305F2DB1A6BD77ACE79D0BB331FDAB15BC1E4B
601A9BC051A30C9BC2092357D42E3A53AE7AD9F459C54082552312816C97AC37F4B1E65EC6EA
A9FFC22810D19F38601689B73BD75116966F8BC5FD8852178681F53CB3E527943769232C777A
62C4DF10EBD76D736C7F49C01C08B56A29E42C98B1E0FB6E26E46DCCE3DDFADBA9FE0446AE6A
FECB2EA0EC6DF7202C02883C5E49B6A37AD6CA37A3BD7ECC1ACF6315C5EAB0ACED832FE5E881
2EDAE4BA28EABEAB94BAB263FA2680A5A1E7FEA401320F0D3F0F5A2E73BD0BFFBF984D8BCA2D
79C46F2E3F0084C3DDB2AE753CCD4E52D678492EF0633D73C071CE111DB4EF525ED3820F4664
822392B804332A80488BDFCC5B2BBC7561E2510E4D04473B26FD8D7C552C5FB5ACFF10EE83F5
0DB121B0E453BD7BEACE5AB6BC43F2B7CFADB1AB63FF728AB6D20A2AFEFD196BE0D34398CA76
F8C38CA8468E61678B4EE41546AB9EF514B1C491AA687930514B9B8361A047E291E6881CE10B
688A17D00953732C6814E535C9189E41676E5E19AB2FB30AE657994843BB197D8D507D658AE2
893568D83FC4E5826EBEEA1B50D167F07F7E9DA5565A0E15BB71EE8B5FE5FD6705CC3369F5A5
967E417A352210D0A2B117F26C5369A949F583BD9B5F9D17EC0F7F5B9A42F68E13685DFB01D7
DAFA5CB01AC46C81C700B3D879C7244C6DDD3F92758D2C5A432E0D9D5216B89E5C4F433B9B72
604EC9CFE7A62B5D0BF925ECDEFBF69BC4F90B44F27BF7AC67682A8B9A632781821658A98F29
2D381B4889A86FB6786F62F742691ABA2ACFE9EDB880A6577EB43C1C8164BA99F2AD525AC6CD
396F19FDDE0957CFECD700D02038B081B75D6A20C60658D61E4EC1BFFED07531390B616E6DAB
23DF6D31009428EFC4457F1C2F0A8B20609D09609634F067511CB2498F5EDF6E0C13AAFF75B7
03ECF55BBF89E2C976A77431BA695D05AB804325CC24339D8F9524E370B5B63003140560FB45
F23289E422B194E71A7521A78D1DC9C161A74C3C8CEDA5B2494B74D45F702DF198F4ED2BDACB
FBCDADF6AE398854FCCA460CC71D4D09ED15BFCB1DC5531588A884D6AD9A71F4CE5F5A04A774
B850357E1373000734783944585394D4E870B57A361DD63F032B53ED2C2E95398C0BE92BD8F8
5C17E372DDA5F1183DC01D3185D97960FD0E1971A6040FE1CF98C1DB23449A532BAA45F2DB59
5E1F85305297040876FB5ABC3660C73871E2FDE15BCAF434E4A9BA5F3818A1BA4964BE12F577
754816B8DFE62976198EFB3D29F43D57F70718498F4FACFA0AB4F50E68A3B3C8BB731DB052DB
934093D294EB1356A4D8FBCE0DAF7204023FD8F6675C4F64CEFE8A848C9027B0C5124E303BE7
D0B2DC7EDD57DF1756E8C43FE1AF159DAB14BC03B31199972D78BE71D16E8CD7A183429FA528
CBCCB1DF12545A2225D787E09294B84649ACC8B65D557A417FB3088E011EFAB31F77788332F4
B759B73FAFDEB9984FCA0DEEC87974C9509C4B0DD221F889CD5591F11BCC236BEF813994C42B
657D8CAC66311B87B78C52EEF285216CFA63D71FF72EA4592F3BC42BCC4FA17A7C03C471E365
1D17FBD3A18BFC05B7D7F8DA2EBBA0C035142741D7F61D56AD79C0547227DE9FF96147F7F2A1
69D483E8705832B2A3412B9BD9A6FF7F8398414154E20F167EF25C6042992B3D5B42DA61ED84
4EC399BB8E5B26813CC27D955DEB7B451CD0E08924AD9921E51B0280ECE073E3162BE1B9B9EB
F4BB9BAE143C981E10159AEA3DA39D07CEED88855265199EC85477A7FEF0D64C99D39AF79F97
ED1E89A8D163EDD7A857676AE2FCB2280B00A32FA43B0E37A6C27CEE0C19E881A87E3A66E9AB
54B8E47E07C4AF9C0AEAAE3D9ACAEB93A224A721F272715C90F24E6A540C211A07C918D37EA7
DF8541480D8A522373B930CCD58C0ADBFA223CF6E170765467D564F36847829F1B74588735B8
33C3C5E3E49093435EEC77BD3982B344E146815A74DB34B2911BCEFD87F10C93BD6EF0BC7B83
530447362F036574D4C506B8E78F3DAC8C65EFB656143CD5BC7371F40AA31896C6DEBBE3DF9D
869966C2856CDE2582EA92F5FF23600D7BAFA0D9FA593FE7C6F5CD736144E0249DC6932EE1E6
0007B01CB922571B8E5EDCF83471B0ADC057998E6F8CCEA355720A853D41A6ABACE3498AC497
B5E48C58A312EF2105C8D4A9EE59A12F6B06B8223930301AD53916405006FC254F7C36697040
A2C6E7090EE03944CA06E7DB2994B577DFE653B3C65DC3ADC7BDB8E2830239F3363569B06B72
CB6E5C08106656B495D7E83B1EA66D9ACF20E92A72ECF09CDCA68F8229D3329F142A1819D7A0
472E8B17B5DE1B8D5A413226AEBED2570D73C52B1E47364E24508D72CF2C4B080DA7B2C16533
DDC721FB0E7CD408414F93D8DD14BC728A7EB38EC991B3D0F78076EB5C91E778D20F38F9BD77
69498117556EFCFA09F0D7E9D6B65A6AFCB46375F2D2CF970AEB67A2B34C187AB30CE153914A
F98561573B2F4C5F06319B372D447DAA1C935C6AAAB6951A3973B77CAA0E318773964EFB00C4
9C1636A77020759B6C5B45077E4DBDB8CFB4B4CBB876E3022D834A65D30C1406CDCA14B0F6A8
6FD2619B9F4B4E4FC22F099310FCB7B6159F8763C06B1AE498CC5A71A2872262C41FE68C0A97
90A1E2BAAB221883537995DD3B5E17617120B2579C33F73A3E2FDC6F435BE9B687BD486EFED6
DE5B9D54D9CB5FF4C50F5A2834BA9D8CB6F26D99D66EB1364CCBF929427751E4DCFB2034C51A
405A355B5C38A7F0C5DF898DF7D93D0AD18A13D70FBE66A304EF6D4F3B69385C2ECCD01E9F5A
AF17B17F5FA640EBE6E573716E95AD7AE21DF812EE24C655B3E6C5D6433D8D46691DEC7A1128
C8340EF602F6C4A56044CB0E3671D5FAF6CDE696534896F7A976C32D93254AAB9FAF1124B60B
A924DCA75A2FDBE7D974487516FCCB0A8D1DFEA3827B6755DCB9254C7F606DEA258040C7D949
EDEECC3AC66288CFBCFD1B538CDD8A7A79039A216BF4153F84E29E1969DCEF35FD5099B680DC
1FE95A1495E5F7518A94BF91DE85D0EDDB49E8772FF0E67EE1943B00F954802899EF3CA2531D
AE11522A09F9D030C2D3B0C9D5CA18176270B6992AB761560B93E2423F233887F72283750DEB
D9BCCCE9D0DD59060089988B66598B968776C0DD4CA51FFBC5DE2429EC093E7AF7EE930EA2E6
7026769A4F030D4B313B493A8DA18EAEBC869E2EB434DBF72CCB8FF445AD94016F148135A883
BF18DF02518193A44BB34356E59F9BB88E11018447430B58189937C770D6479C7B425FFDC7EE
B5FD73C40F115D910DCD1414653E3CE63C5F1C1771DA3F42634D72DEF554957B69AB7DC61FE9
84AADE365177C4BE697EDB5A835C7114B113D8001EC7691A8CC0F29C602ED747CA593028BAFA
52219DC50E6FA079530FEF9FDE48D952B403B2F339592E6EA8E59B6AE611ECA51E9C779000E5
C8B47C632BC6B1A10717B4921026312ABFF2BB9EC9C7217FED5DD5C1A49476C69CAE50DDBEA0
5EC2B928F8D4D952E8A570A9C7E345FC86D94CA8B39332B22F2C43C315D6CC12D6C1088FACF6
D970606196041F5B361A45AE0032425BEF2CB5AE674EE6B2B1BD5F26A1E727FCBF1716BC8310
84A0297BCD9029E295C9BEEBA9204955274BF30E49AB70CAC085C076C19ED07441525029A625
F457901D653843A05DCE23E944396A1D15491AF9D970A7B6ACF79A0B984D1194109BB552174E
F0FA29DEC2A9C46F56EBBDE9660AE9F2E3E580CDF8E9B9EACF3C30E696BDD314E462FC5C9F79
9E35C2FFE45A0713690E4207CFDF708CB0A465D045E7596EFB164139CB6CE7D45C6B832124D8
95488C23D634C305C3A3E1EE505CA8A4B43A8EA76CCCAEB897D160F126D7B20B9249DFD6628F
0A83EFA9220D1472F6404B1AA60336DBA61B8887D6699209586E25599008B36BCF151F2BD2FD
AAF675DB5D7AC6F51F9B80DC27257BC07A69BFB8699653B19211BC16FEABC2D348ED888827DC
2FE7E031E9144D4E60E72E91D8062D12BE7390FA6D96A656D7FAC76CB242A434C9BECC29AB2E
A990F9FC04C6F00BDD11DBC010E3D63C46BD079AB9A1B5CAEEE4009CBB8EF0230443AF3BC541
FBBB546FE8B9C97FEFBE9AE51F8017ACA1F1241D3B5DCA7D37B65B2F5270199F34ABD6894FBF
96CFACFDC5C48601354BEFB786ACD8543160C11279ED139D653820FB3EEA992FF8AB735E65DA
F9D9891A5F5C4CCA3F58AF1F66D60938840467DFCC7A4D30C8F0FC5E902904BC414BF06B5121
9284ED45185C9A53572AD9D9D1A6E2F953BC12F559C129828703566D074BD07603EB03ACB634
5A1A0C2ADEEF96E5530528642A1D939E5CBA62CD2221D6EE28D15083E4ADF9492B8FC7C5EBEE
B6ED2A5E28F0FD028A3B5435F560E1DBEFAF44F3DA19F7736121DEDD5E9C4A15EBE737051C55
625AD169CB421A11FE8AB080E0A0D44A9E658C8FD637D16166D871694B56AF5928B7D26CC360
2338C74FF13B6BE02DFC18BBDB6FD96DC38FDBBD829FDA7265E8ACF006AE20C7030B8E52FAA3
5167A4C7C0C7908FE19116F25614A03490FF025A7291DA713692179AB5368FF41481D6285000
C5D72211E13CF5BA286E24ECBD508437DADAA073ED8F6D6F42F12D6896B1C8D9396B2470522A
8AB9C066E1527CBD93851A5F15C69CF26BA8E2070E13A6AFD364CCCC1056811BE4F17A3B5BCD
FF1E0BD760FB424DDE6761D7D722DB82FE341F1ADBA24E4AAE909FAFC0249669DB0E6A4499A4
3B10B49E091A02C7F8D1C73D93876B8FC60F57581CA689686F3F263BC002C8367765A287B316
F06949D08D25115A0283C27312E5148BC71953BAA94D1BDA841FF3C0B4E29930B0596B846D71
E22D7C32DD6A25AFEE76E8CB3D504D2D25512EF2CFA17D023BE4EA8EA7E5BAC59FA73B480DA6
087D4EC32B2087EACC0CA44E8C1D3ABF4C10C183245F1B733C176D7FBA0B7917C844454D943D
CABBA56EF28603C37F62ED2D6C34F5C8696D7F10C76099C5547DC0CFA5806FF8C8669EB2DE84
B708CE909545A0072FD5DA35963E9F2194C1B48642F2F39509124521C10C13DD0BFC0D91554B
69FA13F9EF7A80FA9D4EABA3BB08546C3577E87ADE93D4E3FBB48BEBE7A8E668C0B54C6AE771
773E86875CA4FCC6475D377830B8234A8A55D44411D23B5F21283951901EB6C6F47775CBD59E
7EBD7234D8E4596DDAC5B83637E7362E2F83E4A07ADFEB8CDFA7076CEAC06A2ADB72E7CB92AA
C726BCA8F537DA7E77180E3FC71EFCBAC035271E337DC8D62480D561EAAB579070BE8FD763B3
8144C60D51F25668B788625155F29CA6D6ABE3064F74DE76B61DADB20BACE6E1BE315B60AAC9
33226BCCE53224BC500E40BB77D27F88D56BD154F36B4DA94717298C8DE272EE140668EB0BD8
21F8B99582635BC31621C2C5DC14902F3AF28901664BCD2E119FDFE700423BA627898A4E54E2
071EBFA6BCF422C9A4A46BCB42788670489DA5C489B611B22893EE11429CDF48AA8B639B4FF5
687DD435E0EE14E9573730DBE705F86D44FA650F61F2D32BADA65DBF0C00EBA9DEF3C63FA1D7
876909CA5A5EFC2502E88D9F94296415AF72148785AA3ABF5A20A813DF2F70F35BDCEEDAEB51
4D441050DA0B7837FF376875631587C5D5DF9DE5A2363389AAB4E2D9BF4F27E16AFE4AC31F58
35EB469B485751972E0A94700327BCAA43411D4AC605D442C9EF72B3A8EA0849560C815A17C3
F00FCF8C6A63BF3817A763F20C6159D155F3267B563111E4CB70384B5ABB6585280AAE7EEFC6
5C7D28BDCA2D324F5E059E4DCDE0EC3BBA9B7607F59078CBB6585126F5302B0872AD55773C7C
AF63691A209D974E71475FD700C7690D0B0CA4486420A4C0A2E42063E1397F2A89D9A36AFC1D
2C0B1960B286C97E15894FA961059D54F4B6DC044F227068666798972826F4878F62B95B8760
46298119B3E2CC9A4D4CE73F50EFD024917AF07AC9EE89024899BC2E3D1045F2B55B0A105AB2
A91A6FE86C99D1733539C1F03AAD15D387DA751940FAF01A70F947EC64E7490410437DFFCCC8
D6784D8BCD7694E4B50EA4D6E5F2D6EFDB2644B99E7E542CBB6E509449107B10C19536140E5E
80A594E9094A8B4FC87B56900657F018FF22777C1F6D90CE1617A3180F7B3890EE53E41D29F0
4CEF68599D9D1616CEF0CD1E1C587637AABE97813869968812A1E1B2BBBC9EF1CAB023F2F6FA
B0EE693F38549643A7614ABD3382BAABCE20A4E4B793585FF4CF670AED8EF632F58C9FC91713
A98EE4A2743F7A35C74C85014B3C37606322FBFFF14A72F3B6D8C10A09E4EB94A12F520DC702
0024CB80195C9E2831D34D1C26C5FC4EA447666B82E84EC645044D3F23339547BEBCAB0832EF
073E359783B35254ADD0A00DE14B7700CA444A7D7153EFA565082970A5C9F62461F1E3422D78
326304D76978B921AAF148CBA8B148D1E703D34AF5BAA5DD2E17634C88258C830ED0D87B848C
62DD7738190C495709A65BAD2ACD72CDE9375560A8A25EDC5229215414AC13FA5B1EC2E387A5
DF0A2503DD93D26E18E219A012B555E24520DA7C88BAB40C7B23530F4CE2FCD1EB013B1FFD97
8FE4349BE77D9875A6E12D962494BCAB58AAA56D0FF82AA827ADB64C5CFFE8695E34D72F88A2
BF6E8B83B136B4FFF0256BA10E8E4166375BD0E18BB7276E919E9CC0721C33B41A9FFC7118DC
66F206FA91ED309FADF5CD956EE9181AEE35B8AE92178D79F98FC71CC52E70E31187214662A2
FCF500772E00A8DD83226C25C3264343AB97D9A888CC80B42FCC14C30456C0AAF3277DDEF033
E6B56114F9F12080784153F6F72F80F1D79982AB680809FB596AF00C0F5C7D6388F85B933CDD
10EB8C92D97384F59F37BCEC8C869ED63E02C0024FA2ABE046A3AE97557E8054B1C93B4C2CE3
4BFBE3C22E002B9B0E32A3FCE442519B4F43CAC24C23AFA39021CAEED2A23CB66CD30EC9CB4D
98C891B9A7F28A1EDC5247F67926C3053EB0354A7D5B315D9FAFDB4F20476CA0A6F32391B07A
E85AA3EDA2AFBE3988602557AA8AB649C893519172DA176ACCC0A6F0F0347161A7827581750C
B9979BE680B4B310D5D63601E0E05D4AB0BFF5A788B1BE8A4246A98ED82A1A0B151B1DA723CF
DDF876D0CD1D2FBAA0C213D6216AFB2D17A89F2B9862A1244536E7914655635553EDE9CCD27D
E8CEA8614D5185D02DEA03D890FF379741476A588307C40F86198D843A14DBC8438CFC7597FB
719783F1BCC67119C5DDC67F6C2037E4D747BEC1709421F0C9DA1404EA8B8D21C7A1DDE8BCED
FA65FCAEF1BA70BA1717FB2C95C464194F748EF7AA53498BEC317F392A871AA597219B7685FE
2460A5DFAFB8E84C7464DD5AEF096A83D669C943059DC738F7F785437ED4F92E100FAEAF3EA4
EABC199C0E2C65139C38AE9C6435C7D3E0ED51C0A03FC93A1A3AF6C7CEBF141B4FA9E7D841C3
DA6E2972D19473D838832D2857FE2F08F28B8D4712BE4842F967BB71A2A5A965E8781172605C
B60AD1291DC0AB91DB49DEE297D1D9D005AD9DF76C7E9C4BC350B5AA2DAE0DE97FBC4994ACA2
6CE2D1B1D9A797AB14E9C58E73C14B9C1E3D6BF3093D9D435A3FF74A5AE9D29EC0A98377BA74
3BFAF49B8D68433757F1C93CB57B4A765788BAFDF92D590F5753A48303B4854C5BBE1D368B87
3FF815F970369B76DCC14AE308A9DE8E06579CF665FE4074E2F2107C0D1AA1B46EB89FF1E413
81EDBA939E42F93DB97508ED9BF01B4E0F88EEB9C954A6B6302D1E2CAFE3709B337C012708F1
93525C20635DBA7D2969561443AA35572ABB5D7A24DAB16F13D9D09454C536AC30299ED2AB97
924E34BB5B945FD258F326A6BD3F70B280E75B38D7494F11F63EFD4F7C3DA98B25B8D9D355BE
2C657B93ECC15CCC82849C5CEA96F41B2471AC085B144345B88F4BE0EFB617F34E89BC92271B
C9660C3A18253FC06EEBD1E3AD1F176DEC303DBB5DE469B706933A17FBF0BF196A54BB716B95
235C9285436E5868E7567827BA707746E3175BB622B93E3ABFB861E974440356C6EC5EB0CE20
8B7B9EC592F01F976929AD6C61709EF6A889998FFEB1546CD2C9BECC0A4AD045A1578D2C4689
43AE045DD8D48C5ADFB09297AF58D22559BFA6EC1A4ADDD45BE0EA2CB355A51F091CF3A01CED
7F043499BD80151070B21483CE706EFC5AB2295554FAECFF383565DCB2A596B660F1C522CF6D
37E7144C524CF7C849FC1C23DA6A5DB51C92D9C841C7851A94EF7C8C688DFCBB0306722D6208
510FC31DD810B0D5334CF58B254900CD7535317D5A33D196F7C41B9A6C2BD857B1F687864DA6
577F072CA099980B2B1CB4EE526A2EAE2466C640CB490C27B0BDB44503A5D9B5E9EFF69317D2
3EEC47BD02257B60A843AA6A1D3035D3BA6049A3B9A8285A2C44DC36C236272F12ED734B0344
ED3E59E7690CF9EDAFD0D3E0520630905E5B894645DEAF7229A54E486B5986D0A96EF6D69C14
3B1B77E41F8B2E31ECF2355935040FACB606A38D146E6B6B4C9ADB605841B3F2AC705ECFEFC6
2B12D122158C723C6934BB44E2078655DAF57BF9BCF9528ED3A287B0C365524043143047F0A3
1D0561E978E1FA3897B45A61087BDEA1C1EF965DD31A2AF81162619CF82F519BE13254352A4C
EC0ABF30FD920B2E2188D0D40C3BED6B162CC13C74B90E2AEB44B3250558108F3E5CA600C137
49F63AF096A9D30FF28FBACBD066098AF0164E8CE031595A5169D7B7FDC80BF8C410AF559C1A
C6862C8625FA8CA983F12AFB11300B924632A1570345D926A1CDB3B666A382A029D5C35AA8A5
83830D996DDC74A9177B97BD8CCE3B5263A7148C799DC219B8A1958CAEE1598E204AE50D8587
2AAE0930B96513755044DD58CD9A8D8538CCE4A4CFAA4CCAD5430516DB8FE7F03C4B712C7094
30663B57D4F9AD3E691667AC120257D25E4D112D84B270949E004F18551C950C8874A9CEEB61
D46E4A7F2EC875C905F5DDC6F4596A17485FABDDB561D1441941C75D77A4B4CF4BE4C478D962
E56FA5E0B30E87361DAED0CAB26083CBAEB938F2031086EA914EED1C38D2E8651806F615D57A
9C59631D4636B2687B40B1729917267A096389B0A801CE30E5EE03368C16F541869E3AE9CC7B
60093B1866B6CB71A41F08A51B240FFD98B3D9A57E81B92DA16ACB7B0E71FC84061A2D680B07
BC3487C88C66EF10020431D72DBD3668C285B16CDC6D8535C89FDEDDFF7802FFBB30825472CB
709C786B0DEF3FBF78FB2877636E45D224B38503AA5F17E9EEC7594F39CAC1320EE2DA89E6D3
B031C8ECFB5AD654286D5C2C2D8EF3830B243AB5B713B4926A559605D6E0A4675EE9CB429A0E
72A8C67EC09AD19F2B9352AE76A0E881DAC1498CBAA642D1B6C750A86D372CC0E84BCA862719
914FBD8B4F8C675BB2B4FB86D7B7C88D10AE46B8091A590E7E0D46FB150EB1ED2995EFBDC0B3
543CD8B1D946FDE72C6868A456D6F86988AA24D1D3AAA886A8074AD6920C912EAF1B1E34B92F
3C340B57C19D929E9AB96B21FE429689EC30A1FFE7A6DBAE1326ED476D030F48ADCAB3E3E2DB
C81F7BB6641B631478A820E096E987F51E7B92C9F4A8CD3E0F3B6180A7E7E9A51B077A36D45E
EAC8B9B6EBE286FC9D8A157DD339A1F2AB6AFC42B7D216347820516E070025541F6892B8D402
A7F53DA3BC84A4B0A07BE8B094CFE2AE9AFE137851F02A2D5549DDDCF623BBE507D21521604B
E019A51F0F5B353F613515689663CC4040BDA516B660300C6DB6F0BD72F627FEB15E68F1B04B
DC40B54C4C26C4061A89FB9347138479B38A59918AE562EE32D931902AC2A0B5AEAF6BF4B2B0
AFE1B513A35A6E9FA244895DB3DA7898F11E3E9531FE9CBBB4B0E665EDC4C6B567FCEA28A5EF
1409A2489904532F50C91BCD6FE7042C47FA2032F253F67498F7D76E64125DC1AF07D122AE6B
8278E1468B3F86067325B1B6FB64D1B94BEC96107E64F6EC3A63AF734F39D64D7EB2C415C9FE
3164736E6BB3D5B2D2465F4B794CA085C7627F882D8711A41ED148FDD53721B8105126FE5804
2357BB4991FDF33326DF3B1B2480E08E53215DEB5136CE0AABC640AA2A6769AC37898C008756
AE217B59C6E8FB0ADC6CDCF90DB804E51E84FEAC91EBA74B3EE1BEEC0A3FA44F18A30340BBC6
1769F662ECF0B16B1CBCF4059F38FE933EEABDD92770F4DEFDFCD8441F7F596D1DC095F92759
5D70B89DA3E97594B33A33689F488D7CFB7A6C73BEC4623568DD17CFA3984561EB285551AFDE
35381AEB0E8256BD3BA58D0F6CD3A4A9C8073D414BDA5B792628FE5A0C894D33EB79760817C2
AFEA036ABA15059BCB814CF2EE9DA9EA143390764F95CE235DEC4928E560F529B5A02261E95A
0408C4F428C5F1C8637A6A878FE24D2A6CBB22AA078DC8AAB00146AF3389BE3FFB5D6CD90698
438F5B5AF7DA0899BF3B7B0D4FA04FE263E9D7281E74AE210D8A4AE7B290DE17EAEE36CF3589
9B1575DD6273DC509D8C15067796823CAC82D76F3359F802CF1C69DC24FF7605453938A6AC8B
BC2ADDF28F27C9BAFA2AFA01AB43997A819333F6A4966286E798417F2FBFBC14C4380EE965ED
213AA5CA64DC9E61D451D10743B052C39F033ECDEEFD268F42BDD37EE3C29F8A23D5F4B8F7DF
196D35A2FAFBD288E5552472164943034C7410F34A422667EAF452B62BDA60E9C08E9A72391B
125D7C4A69FD2AD5B80B66B0489B0A798D62B131FEBE76418774D4AA3DBC47B4BE9AA1D8F4C6
23B44CFED8663005714DB65F1F5EE383FB5890DF2220423C883EF76EDD60C5094FCAC612C0B0
1C4E4D740C668D127AF274CDCD1A56CF4FEAA7A872D7C977A144002C7D2DADF1064D78EB35E7
738D997C0553FF74DB30F1943E21E6E478177201344BD5D9B50D72BCDF01628F77F89EE5F754
9975EA7239B256A2F3EC8EAE02A8B4D208DD59ED45086343EBA7FEEE1513D0D6470D844FC3F4
625ACFDB02AD6F1CBD3A377BC3B40CAF1AF08871AB3B5CA4E8385FFB3176A90C7ECED2839102
3AD4C51570E57011A2CD8E095E4DB0B0899976EA241105CC5CE73F96A8CDD3C510BD9AB974DF
EE1CF88D84289AB1E905F72CD1417AB863C2615FFFE8D5F553764004F6415B59E40DB711103D
0BDD75B9B81878ACADC8ABE11222653AF4DC64C5D105B503CD854529D50D5CB436033995E406
4CD4DC59038122104644BB563511E15B29D391932D7974108CA90B7EEC2AE3E471A3264CF3D0
E9269EA57E5A0E387AAE85AD0C5CBAFD83844386953D8D791FB0ACF387981BA0A8910B176408
F76417C89FBC45B2712AC5DEF863F3C86BD04E3FD58638BCEF832D811618048C30C9DFC83073
C2389B6D2829A52E9279BE9866A8D62378D000B3087CE09CE92CBFD0A46092BF04CBABFED2D7
48AAA9FA204D448EB6CE63AB7F466BD89DFF50CE779D760E247F7F18312BE41B336E7EC154F3
F4FCD6BEE141BAB05DB77121A003A1607FE6B32A0080BC95B8686B5325B8E1AA41F816A77F16
E2266EACD9B5910E24AA06DD7B96903B97DF29E097DC2BDC4740658D60F2B8DACD4E390820B1
4FB96126EB9791E4664B2404CEE4EA140DEBC5FFAA5F38B76F354E4997AA420A80353145460C
C94A2A5C0BC7721554F23AC7DACF008B1248C14A8527ADD836692D3C02F08892C79E63CC20EC
A29B98C357374CFFCA2076FB0533976D7C030B8E07EC4B180E242C60B3D612C08D6644DC307F
EF9AAA28C081499A3CBF419B4AD5A0A60F68A9D613117719DA0A47D042445DC3490E9A1D7815
90EDDAD43DD4612CA40FD471E53C41AE83374B43F1C13DB65423FBFFBA092F2B7AA60F2EAA5E
B3F2BD3AA995C17C59D92025ECFCAC2B9EA9D1A32146B87298E7699EF4F917BF1922CAE95063
1C706C73193782DF942355A2D4517AA2725F29A6688A811D471E7A775498D614DD5CB81E89A5
29E3669D6EEB74DA69E3624D0F733209BEBEC51AB68F4D43FB139A7296F71AD4F7023F23DDBB
5596F354CFFDCA3A96FCE628B654FEC008399A535404E2A6042C7947BDC80C69224025DCDD25
47705A6EF9E7AA13A19FEC4799A66968A1C24558998E02BBF8352E16A2339AA8BDC9A501B466
D4CA9DF2963D6536169B126B45997F928F53ADD9E5A4CC182BB474FF7490B473C95E75F5A79B
DCA000E8D7416CF7FBA38090F1EE4F5FDE9BCCE9A40DD54899D5E2028268BE486B4415A67163
EBFFB3F673A733BA12FE80BB833DD6D3D2ABD44A226034A09424A6C01E91DCD771ABA42A1D8E
415C95412115D88739F79F194DBBC3A00DCEC840C06EC199D79E05B2F561F475FD716477F27F
81E5A440675F5183307C7221CE16E65F0E6CBB56BC66731C22C4C232AB403467869C8DA9192F
BE1BB08B479A3D74822FDEA5942E217CB214C1D92FA29CCA366A6B829015680F2A4812C51ECE
8D01D4E0ADD8654C99C244A6C28AB09EDD827CBEF7ED69ED19F7A0E129725D0B5BA887E2CE9C
D41F01FA90EB92EEFB419D6E66F2CC91356D5F98EB99BBA7A0B55FEB828C24FA37D0B9CE765D
0A4EE58F34510740D5D3F95F553F0B1E7CF548519F9406A44040BF835C80AC5D21336D81BF2D
2A2ADB3A93DCAD504ABE7ADAB8369CFDD375E8DC2C39451AB58B658C2F0626CB3D334F53861F
F898134344F40F9682D7E31EAEE8DF4BE9BA7CB01ED2C83307FB842E43B750BD5B359A8A7005
43A27FD9D9296863F46279D8D66B5B3D1F585519D71A1E247C4F1FFD128F620531EE5FD94783
C19172D67F0E72684D0B404C687B93D0F6BAB243CECAC4FB85EF5D25A09F41C43D06DAF0701E
0596631E92A5F0A31CEECC72EE88388FE53622CE82BAF6DA5B175FD13C15960684006E3531F8
CADD90720758B42FEB90EDF259E09A562D294CAC14DD59E7C0C9E8C11C923BB673F9F34F6534
B06DD775397C8446F8264A939F3CFA3CAAD36311359C26662CDDAC388779F6827829A0330345
F21D6B6BD5313B589510FD5E431ADB628820252069F99B5691DD656C548DBF15DF8169E1C363
2E5F9AB9408124B3199A285A2F1A3CEA278300BE84CC3A96BEDC7C606A6A092DF42EEC84941A
F1F1C035ED03434C6F9CAA6A2A121961545796651BF1F9F242DA4B9F729103F1109E64ACAB6C
CBD961D1CD1F97B18EE879E544442CFFFDD02864B0FE1CECC01DC3956D3A26262A1E18260425
976C12C80E4D0D5F9CE367FF7A7111D871D6976A8D3007C76BA3DA3D5F50B6B6FC28EF779DE8
FA4E6A6C314620558CAC46BF1C4B611EB143B2B719D0BD0A6B469EC7C4C292E1A1D9A5F9A3A9
DEE4E5EB9DEF92839BF1BF1E61C9A2959675561B06C5E7A60DF16E5C52C5353D13D7F8469B76
9AF4C5F1E7BBF3A11987A867BFF7E8E4E82858069BA2961835877E7E3185F9C69E792CC81561
205DB0D16C781F12B696451964B2565A6CD07A01D9D0B44CD9CFFBFC4EA4476B306FFB5D0647
0E7CD2B15121D70FC35D5B884756F6C70F4507D864566CA60E746451A79F4041BAF24231AE71
ED71608CD1321EDC1FF317A2694DCCBCCDD3AF4B0DBC9D59A559130420B76CF2A8550B862F01
A390D3B08EDE39F71FF6ECFB43AD7CEBAA1E8A39C1B38D4BB13D29A630BF86825AE0B5E8B9E3
4C8128895817E34E53D92FE6E3F16ACE7D80B3D74A3C22C17C3882859564EA8607E4C77BFB30
19D91DC34D240A8CD30D53AB2BF059F1E7EBE2A96CEEA78CE67D21F2D5A3B727F733C7EB06AA
5EF457E099C90820585CDE2F75237ADF23A9AE44C98760E323F9241D675C9D6FC470C955FC7E
D3702F2944E64222FA3D034B7BAB7AABAAE5540C6EDD1EE474367FBB7C43FDF124EFE5C7FD42
DBC565E056A78B313191FA11AC539B7C3D7FD6D40AF264D760492C0FD34DB08EDF111F853046
2EE9B86050F7E0153523B720917A03361B672CAF066400FDF1C00AE2EA55CDBEBC351672D92A
41B8903A5DC04B3B3334BDE01D822B8C117331E8679E95920421495C3C7754417A333FA54D99
F691FDAB417D52D54F2FF2947DA7C6E5BF564EBE4AF9B899DDA9CDD537905004A54F8949D4EC
B4F57884ECE070144D7DA67BF379E43B79B6FC1BCC61B5D28A38327AE327DFC079F7FB112A65
15BDD97AB0D99739FCA5C032A8EF4C9B96A212A0A5B3301CA9B795626FFF7BDA9C0024C1C736
92718AA183D1E33763FFDACFCE699B46B5BB660F468334EAEF6BA53723D19FD1702A8E856762
9F91F9466821705BA7C52F9E67B51855D3D5BBC882C298F102CB8BB1021BD8FBEB98B42FB810
7F58497C008C685C5D68C8FEE12717AE7DD6231D71003EA44E0CBE0C40AEE2B5C675DB753CB9
222638361DFB1856794F0C383B4C528A80E8189CB189BC4967FE6B1E84351914EACF78B224E5
8D08BEE7506E6C50B123C1825157511F83118B7085FEF33D311C93E1A51E763259FCB63AE425
8F49EDA1ED0973363430050D2E4552B655E38EE6151544974444DA9A04423FE9B644A027747C
7C15029E0415585C3BC8BB91CBAC3350251E4B66421A12762B37C7C4E8CA943990335A660A5E
BBCA5C7B2B463A2603B0873B7DCA794FA29A012A7D464A89BC888B969B711CDAAB92AC49B71B
69F6AEBEE7B880E8F21C47307AE559C695DCAF115FBB1B5CA36A7BA92B9F30FED66BD9299132
EBE8247A53D7C071D3E53163401083E1E44A77ED47AF7B9534E2D2508337A4E2373E6B84EA34
995820BD31CF99DE47CC343EE7AC5D795686FF6D3946F6A718A2B4E1388E6A36613BD00BE98C
0107AF5690434FB0F8D641DC58F475A382B24FE184B906B0011462D8DA5875D2928479999CC0
1BCAFB0C15EBD5AFC412CBF411D11CD2F37879A177D1EB1E19516B0C874EAAA5A53FB40CE337
53E2E9936187E4DE51486872470B15BF54C6745B4386D5685B810FA71FA68F2508FB5BA2CE9B
29758B6DA523B895D67C01D31C98DF4DEE69296438E720BE387426C7D656D2762E5ACBC2A984
6D2EFA8E494074A1814773BCCAAFFCB20C82D7F728A9CDEEB9C4C731E7744F9457F5B575EB8B
1920D259C0095B365CAA3549080A515BB4A2E1EDB5DA080E12B2D60541A7125F364237560ECA
F4A3B6D4B5525EA1144C7C1D669BDB1462553F9A01B5D1E037D612DAD9059A3D7F706D8DE49B
234E0BAC63DBF6EDD78A7DE200DC68FED3DEB91CB27586E046B7EB1C293BC04B668C135C1764
BCBEFE049CFDFD4869D624BB8845AAB8AADAD9B1825E831915C6BF2796D59B7D090320A7D540
7F7C3A5CDEE2AB748D54E11857F6419B7B0169FBD1556BFE701F52B54A2B82EA01F0C8A1A161
B49AE4CB7111AB3EFC90F7BE3599594DDA6BC70D364539FA6FFA042D7374DC24BD86BAF9BEAE
5B1110A5A4AE4DEE32FC660748526F73262CE72937D83C6C64BD2D5CE1224E54119F529E5A1E
F4FD1DD50BDC1E834C9417D730C7DDE8EED57A9411B6E88C18CF76B1230A572492D21285FD1E
9F76418677F8476D744A636644C9DDB19ADDAD1644F1367C0F20DEAEE492E4CA2DEFF947616A
1821896831344259F68CCF245ACEA770CF27E7EA1C7600301510BA409DF28BBE5B437E93DDCB
D47DE1AD0D2C6CBAF73EDB0A34AA91B230745F4A67911E4E80B048648ECD8A8E40B90BEAEB72
AF2043422F66E3A591962A749B9547E095161F77423185EE544E73D1549418D190B1C581951F
F36201EB817425A77323D804160249DBCE898DE395F5CEFF173F2489640A60E52902AB805B93
6148A4EECB67EBF39B9378BCF881A22DE96084D718A2D0447B7E55C10B8E6D9DAA654D96CE11
13F6BDD045E40DD885343D6DEF5357F1AF8585CFCD1E6D23D9FD205882549A610B790E6180AC
842E3A36DA8CB5E590F9105E43D8954071DF068F0DBAAC1FA396232C59E008D8C8869BD81172
41B107245456C9F6F7446728A1AC21D4A838DF8596E00A9814ADC888027A9054CFC8617EAF1D
2FEB66BC31D02A93ADA4CC5828CCD6EA05551A3C31570FF8C724CC6F6397328FB78CF610B63F
D1EE823B9C75F032E018593CCA771975FF0FE7C1616536F45B9A5E298539E34336FC9DA7B204
02B1D3F6285DECF50455002A79B8824E2B7BA0069FF39B3D41F0533EA9D7EAD72014656E0A62
5061E828235F112D63632A19DD808C26911804DBA1C751B378F9D328E841D3942809E4D92105
F22CF415556B9B0D5D6AF43E2C621DE6BA34F5B040268961BE56ED891310D8BCE7789BE40D3C
9F2146FBD98C6D6A87CE61F6507C8DB46F1FF450476D16A814AE6453884E1B0615EE4702CD85
66B3EA55CB13AD72250DA19E966BBFC23D9FA73DD4357E3D53F9276323A93908C967B2B0CCB3
C4815AE8123DC8E02807BC06C2FD43298D2ABF715AAA5070D34A9458B7C5FA3137EF11E4819C
C5BE17CD2A17615D64C6FDBEC6DC61F5D6E381A966F0FE99EC62135561230583F4057CFCCABA
3A65D2FB309213C28DD1D16FE98E7459340C86DA56EC83F66F59A37EADD52325B541E1B95D91
A59117E038D20DB82F036AAD19F6CCCA0323669E651150B43C916073F53C0EFEE9DC5DC88626
24B73D5BC33135CB728F15566A7E64F8DEC3EDB616F12E23F25A8DAF6C3B0978D7A51A33BCF1
FD9E4FED0B05B8EE953C37A8238CE6FF43D9B7E0F0A4A41E10641BA5F2FE8D0EBD43FB6FD6FC
CA4195D6F9B356F6B75DCBB8EA6A20FF50E576DFA6DB1CCDD76474C9B23BEAA5D0FE716305AD
6D611B2D81175426A65D1EF35EBFB61600DB185116AFD316A7AF27CA3C1FAADC051C46BE4601
18757EA159D840655378A628913E8F8B9E20064B76D72F763E8CF31D0E84F581CF65D8A917EF
AD74EF03CA0EFCC2605215342457451EFDCBFC1DA61F0A81D58BC93C7F12399702161F3259FA
D68E9856A2EB64925B5EFFCCBA01C9DC11350B41CA6774001F74876C0A054E616054BFF23D73
FE04EB8679B3B2D2FBD1AAD1ABB0E05A84630AAD1C64BFFF4CB9B31D8A27152775EBD2D34862
C84F2C8E3E11A415611F92910875B9CD861583B283CCFC9E807146B39B0A429A80C2C64FDF70
51026E7E773AE10FF54F48C67D69B705EA6098AED88FFB83977AC6A220EA21297DB202CE9149
D0079AEE290AE08C63FA1ABBE9C1EE00C6F1247BF7C4BBE0C52E0230EA7363A47696A3318A6F
D8E32F1B23DA731A2C0CC17904C82DF9E7106219D8600EBE4C4BAC34FD580965969C21FE63EF
6D627373BD9527930ADEE266DF364B9A8B03F3F4C61E85F94B3F17C212C3A1E67B5C2EEADABB
F720E9DDB9B1AFA4A13D9FC0412C15172B15E59ABB67514D2D182030AB477D1C283DE1D0677D
C6933C3CF52A118819967AE5EC16D2902EB49F20592A3397B0B6AD67D26C2EB68EF44712E44C
16C8BF3CECFA3653A403B5FFC77D6BCD80EAA5C4806C67EE06CF69623582CD7EB43E4940549A
747F26BEDDD60A6D1ADB57402529A9BA647087A56F965A93516BCF2E27AB237E2B9F61CC89D5
C6CB006F0667D142BEE89AF8009A56FF4DC269657B11F0BF57F1FD7BEAC27AF3FBE85BF3FFF1
5566AC294E1823F5604257084BB7AD3838EEE6CC0AA0C1DDCF717A921461A4ED56A5BA79AF28
36D3C22A4771B3F08514832CDDB096540DA63EB95033D07FF6A046E25C9879DF7FF76207D21C
FF63971FF87502F913A6298384543B1375125B4ADC3DDDB931DD881AA281C8B74B99942163C8
D93C1A166142C43156F6A4E815E2AD3BD291349BAB539AA8FC3CF02B02189D15B8F72B1EC7CB
953ABF27CE0171CA6368434ED5C39F5A4DFB27B2A8506206B92031BFB2DCBB25EA6A50922414
CF23A28D8C5C13EF018BBAF4AC9548E04342610D9E9F37D28585B6D59163ED5E3F6ABF0329E2
208B952F2D2A1A8C11752B0578AC88284662257A5E218380D35D35666C1DE92C37CA37C1DA67
7680BE6304F60F790F1EEE4D04F15500CEBE6CDDC9B3E7B673488BCB04922AD719F1242DD94F
9791426D66A2BA0841C563C99E576547CD25E28D0B90C5ABEC22189B433685DB741A966AB30E
15B82DCF49A8D91585C88E0C31C0276F7FB9189E5FB3491F15BE259CD502E9B45B47DE10BC87
8C0E7C5B4C88EBE09071EDFF2E2410E9141BDD055AB449E00DE80145924F1716D40154F66793
136B325081E7315B87944F72F25666E02710CB9659998AB58D908488B6252BD5EF5DC3086197
CB09BF88FE533EFA08D0A83D7423B9088A259D35AA0847B7E913A543C2AD5D0211C7A1C0E03B
71DDCAC5175B96762011FF2FD416DC8EF9BB6E5C448F84A65EF2528F8CD34CABBFDF688F14B0
DDE94FEF3A49044FF2E2CCB1C82D3969A7CAF28FEE5F651000352A451D035B6829292AC0AA64
5691B0A5A65D19F07C9D8842268A10F11ECDE12658D7A1D99756EBF5788F0355FF1FE4225DAD
3E19775AFCF7EA92BFCD370483C20F5F65851D1441AE94D25F5E78BF1753B6D30BC1D540E545
A9A5E49849FA185EAEA3201F12F1F95A4C4D98443995B6FF84D774866540C3016472F8DE1C62
AE4A58A39A3ACB42C506863927EB5828E75F0E56B4A287F63A99884A616D77E05F4BD017EA05
7FD5F691A62777E3BA4B2840861ABBCEEADE83391633E409A13423C3609E860211C682CAEDFC
6EE7812A4D97F12C136C0EFD89A9386CF1A67D08C06D5F9483DC440B77728D76069DAEDE8E14
F0895E9097B6B920266099A210A71592371A8F30B1B39DA941432F9912F99AC451A765731038
9126E02F1A45645526E718AD3875FC0F755DBDE9DCB98BE7C6034E6775C2F133EA673D8C4F00
7A6221EFF0D891CF9394048BF95F8805DF3151B0E0494CF42164AE5EF3E68135B327E0E2A7FC
8EF57EBA3115B5743EEBE8A9E0DF52554EE22D49E409B96B535BFA0EB1D27744BEE8C9772F18
B99891D0C6929D22FE1F59B792C695E082DF16578DF8688BD4F590647858AD4344EFD0BA62F4
38E023501646D4F022B1DBAB67478FF2FB652760A5E08BF4021E5B2C772EA9A15E7674711918
EEC2D51BFB323BD07959BBA5DBA61BBB22F07A3BD1722E30F6862780F6EA6963ED424BF51050
1FC3B3CAB61034ECA455059C472591C3C9D54EC4462E1C6E8FB90224604A5D1A2512E6FCCC5E
689E06F9CF78EAB29D6165BA2BDBE9B9C2214F031777E35175379C2373AF982E15084159FF8D
2FE6556FC365C57F60CAE10EF18DA34B5BBE0A81487A0D1C9A6B6B468FD87E10E47FCDFE7110
48EF1500750CFD5A477CC41CE3091E6B09D269DDED666A455BD328A96D8B3EA43814503EE91C
7C6DB023B6F5B6D6A3BB10668836D9F35F6F5D34097321A4CD5A2F06F94218BD5287D3B70565
71BDD9C04FFFBEE3EA6B02EF27E117B6EB5661E2FA4522D4490DD2041D9D69EEE5DB1A7D7185
CA32F2085184DDAEC68C11A9E9E8C1F136D938DB2E0F8FE8E5FF72E1FEB66CB5AE71431015EB
A6004192BC26DB9E4565EC1A1F76A186A8ACEF7377AD6D9279FC9194E28466CE660E7C386701
EC5764F7EDDC55ECA68AC18CC5315A70B9178E71CF27511C1C98F40EDB1A1D621776EBBD1B2E
37D86B0AC66AC5A57E0EC609F712805DAEA5842C2D80C732C112EE8E38D959F2C777A1892414
AE823AF0E4BA8A0463DD47AFD57B360F02DD428622EF24F21A79CD69B4F4E1CC041F88E73D8A
FD1312E764FEC8411846CE9253DF4F89E9A27DE648AF6035431A46A8545A88337C898DDA8D2A
2CBFD8329307980DE1A088352BE61863CED7C52A9A2FCCD5E7C4FD3A3FF8191EBFDCDD9667BC
8973A02EF6CBE978AC9B1CD4CB94B2333638E06259FDBF7951E9EDB933003E5051C9B265A79C
78300BEF42EE42F3BE5FB4AD88B3A2B672FB2BD3E1DFB8EBC7170E1AA3D2B459A3BB54AD4C55
B4A3C2FDB298746360EB7E9DF2AD5C997B790614B89B18D944A1E910C90143E7365F8877424D
C028DFA89182F89B2F1EE63A41585BE6E09944885181B901BD4E031C6E2523E724BB084D703B
C6CCDC0943CFC94CB21155815376A951645F8AD816962D1E515A8FCF9D67D01136CD85D4FF2A
DD96BC52FC594AAB6F5B10328C130AE36186AD71A20DC24560F676A4D95710173D8882BC105B
C6CBF6DA468720B505296C2FB9532972D2922D1C9647CED47DA32309C115461C18CF544CA48A
392223F75FA90E903F85C656635277B83FFB30C49C098BF364EF5C74E73C6732F673E958F2E4
8FEEA1E8F4EDBAF268768F81DFDE2C7EF5B37209878C353F6739B011815D1E267278DB7E7DF9
4CA3173091643A4BF69C5FE0078455A6B9E6DF13D2F2989A6AE7415C3BB74AC85D36AB061D43
7DA836167DE6C0DF79D4C28D1FCFCCA59B571438650FE3BE00DE5CC45CB24DEF52B49C7C14EE
3DEF0AD68BEE51DC42480752FF2E10E0480F6FD7943510FB7B2A08BF687E7A805F13CF0E2E05
01A2391115DBE171DEA3B9A106E872E6416C8373BE8DAFA57C627B24182FBDCCEE8FB9CED4EA
DD3A6012291C211743D5C11E0D8B0C78BF61F682116925BF2E525FCACF232BC532EC67A1B07D
72C559F571AB4C2A65C8E0E20A0C2055C57A873051B9280BEE54AD9E8DBA06AA1C135B6EFAD5
0E92E334708AA9BE84D7A5B8293A5201DC38E6DCA9DD6FEC7E9DDABA803F9623CB631F46A8C6
AC54DC01F82CC3C9BEA5E1E0F3D47AB5C055D2A9BAE6BBC9B7E778E948A9AB9C810BC8060CDA
CAB8F60F4961617E3EEDDC439DE685DE9E6E96A7A743E8A98F305F847597A5B0C5437895D973
A9C08C2BE752BB110D0527EE9E945EEB0522AE3444A6F00630B4EA47644C536CA7664EBE03F0
680E0AA6F78F775E73200717C096DABB2BD5BECA18A35D6B80D5F228EDAC1EF1361770C544FA
8A4A7B832021069ED3E0A9EEBE2F00B23EB30B7261FE0E6A1A402D9F2F7F1FB71D9BED230371
EF1F7E2F64F051346F7286056BC98FC9E57FCA50849B417D6226820EAF0FA97AC2E7B94E32F7
E501FEE35323EFCD9D21030D29FEF6FD6AEF534165D3FBE604AB2ADC8D9B1F1F50AD86FB800F
093BC6D13250A4656FBC8F7C48811CF452D964F1D76E6B2090092778D6DE56A8E389EFBB04C7
AB90A2425ACE2B6EC04215BFFE5659C8025108041D066F9A30DCA5DF20E5C5C4E231C1AA1AA1
6796F489BABD45B788D378309B8E278722155AF34D2875D4E6E83EDA7EC468855EAF1D633BAC
3DCA70E86B47E22625FEC8F32A3BA5B9DCE3B902E125D495667793974E68C786883C6111F33F
BA023931D599BC4D5B5E985A96EA052054D97985327B54EA03C14B9D95D8F82D0BB2C277F292
DCD089BE5CF2DA9318F2DA6A3BEC77C2DBD872AEEB6EC790EC0340231957A01147E4A1555FDB
4C1F10122AF169AD54163D48D2B85A7ACB5C30A9E79E8516E691F448BE5203D3E7565A091DE7
88AE16206F45D9D2B95B5A56ECF66819FEEC60059A999EF746E611FBF09F813581D1BE2B28F4
4E4988A4429314DBEEE8B6394B8BD9364298FE4FB32EB826F8DEB8C6DC0E823AD8D963A5DDFD
A3AC5B243E376D0F94529A573932EC736855C778EBBE76C555ED7B20DE73E1D37FD41B61AF1B
42DBB721E4FF29534F7D26B8F19434CD997ECDBEE3590405049C09840C91F17FB7BEB2DE1F58
7D654C93B8B85334B37A1BB666F446606EB24E38672F8DE12FA0D2E9383E02A3DE40F75EBB18
576CD829DCFEC5BE1EB93671D8EE16690AD44523AA4D951072E283127FF075A18F5595D5BC96
21FA184B818F269F582C6A0ED09D86F38711C453B9123DA0DA1143CA33AFC5BB55E647A6127E
19CDB2F04FC96746A33FC352FBED41AFCA8D20AEB4E71ECDEDD796254303A2419A37A421B8C2
8B6C237562B86B735AA7A2A8E15EB580B8C83951B550B4194F9521C5661E77FD675B9BFC5019
1694DBEA42CC38F7873D29CCDDE3FA7DB7617E4697E4BC36DEAF07D72CEC1C82649CEA10074F
D2FDF352B115282CE35ACFC24A3FE6132186AC82CE8BFEAB9B506088DB9CD8D728B8CE2A7A29
3CB019022C03C9E6A66BEE1FEE6D0E8064EC6018456639D41D9C5B376541EDA707ACC9203F79
9F4212330A539348AFA4D6297E01DBB4E27F2C84025C1D678B0E2607A2A7DA299C59A0949F38
4F247A2B5B19F2691688B767C0C1FF8E07E22F95AF66BB03377B9DDB30F97E6B41BDAD0890E1
7A3FDA799F40F54161F1B747B9451A807525FF5E4BDF1DF9A3487CCA3A4B51B285B4CF147FDD
88747DBC51A1D41BB7A4D9F1760181C191466A640DC70A74BD33E910B926E4C840BDFCCD0BB2
AB01D9A48CF785C1DB3AFC49565AAD18915F9DAC228B9B735628CE614F5022B7BC1D8E9B90FD
7FF4A5566703DA9E4406919DCBBE317B4E310502D0DE5BEC879570AAF594212DD4097BEBC195
59682CA7D5BA66277955AF3DD25E582E2372987B6DBFC9168DF86A123502A2FFA7A88EE987FB
4C5DD1C0F2B5D3B7357C6DE31FBDF0A1B59E614D664C1A29DDB7CFC59018D55C36646FE21BC0
2D8ED533DC0E8D85F9DA5D25F304BA1FAD2274011DC971739668D59A161E6880B2C75777B1EE
0A86347540A973C4BDA4306A6C7468BE8241051B80D51D38B606731900EBAC8B4062C56F3E77
4BECE67DDFAD297EC314FE050FAF08E580BA1A29BFD407B5C8ED5E7D3B8721C4D38E860B4557
10E471E3CD82BFBBD107903D9265D5FD1D453ED8F75D4DE04332126F71097CF854C2D6FE7362
0721602D84957C4BD6BEEE7DDB069754818512F7AD932097AF963B3EC025367141B74013D5EE
33633D7C36A0AA6D726837F43EAC036715EC18FD6FACAE3361F54CD037BF82FF09D5F4E00392
CC4CCB90707A605077CC28AEA0625B34E8EA5D2A0C1EE0F15FA171CCCDEA3A548587C2A97C3B
EF7A3DF2EF903CA475BDC0C944B84DBAC69A6088C7D1DAC5F1F7154EEF0F1F852F7BA8AD55B8
68E08047EA3DDDA0D0B0ECBA07380F932E611FC736D8A735D5C0F3A064C8720E0F698E1AE68C
7F03624403BC6F842FFD9440A4A06017815A4C31C8A0A175D0EF5BBFEF2379F649C92D9CAF94
A3A76ADF8094632E1D81EE6314C19074B2FE553D83CB22B1E85EC2F094AB06D488C27B9027C8
E7B40863E3CE9F668AD37E8CA204157D9CE6F292090089EEC1B63174625BAAD7DA73ECEB6E80
7D62657BB374EDC2FE15546C37FD359B68DE4625A96AC2B70B943A42A19FBADDA96A20829E80
C3FD0773B0F5213F4B0FC1FD4EA1D3A6236343BA7918E5D8F3150815E99F729FE0DD96BD10D2
A1A0D728D1514F218A7047541F7090792BDEF3FD46F739A76876861F0A99DDE93377F9852B43
C8AF474447459271ECA42A12A372E2C9294B74B8A8B051E2830B3F019F9BF0E9B31093604D41
1D91DA0D9EF2A786D36664979B7B9083899C081A338D5BFF036167A54C30C3B1224B256FDC69
4B2DD99F14749960F056FF294402386D9816A78CECE1F728704FF5D20867D4C613DD68EE57F2
C9E3DB811ECEEF958E063B6A78A5761EEC627466A4A53CEC74E90D4BE6899C611A8A3BBA6FCB
039D10CAE4898B933AA4C1410AFE4DBE7E44D50A0C848D3376CE2124AA48134AE6D2E5468C31
48CD5A9AEBA7885AAF32E65CA7C162C25BB8E6C381A397002C1E146DB418BA03A88D2756501E
FE284DF3EB31BCF84FCC4747A8476DE7B0A0220CC63E8E0B9319A6B18F870037DC1745B0FB34
478C4078FDE540BAA672C487337005C30CB6CBA113FA949F212E71ECC39E7179081F640A18F0
D8D4BB7491900253BB13580CADA0A63795C4C6AE171D80BE08EF005076D9B12DEDEE18532472
7911EA6D755B0114B647046A2B006D7BCED2B124304BEC42CD6F6261E805988F19FBE1E8AAE1
7FC8FCCB64FCC7F57CE022CBDCE68E27183F7CAE6161A5111F405B53B2AD823721EDD0BA94B5
D30029D54B8FC7B05CF7FBEF68A558A021764155BC4EED03F1809D0978EBD58B07381E95E95D
0E66F187035D43FC481D47FE86D685BF92A06B31DB6EB8C093DF78884017A0E3A6CB6DDEA051
DE57086C5E587BB22737F30DB3A615B0A26921A49E72C3FB80713A029E966E3CA931609364B4
91F0C2FAD5D6D3D6930CED6E62DD11B7498916250DA93946CFA859858C7028C1D2B5E95AC912
EEE3165125EA0334426A08BEA0FFDCF8A9A18984A859F053E37C4E4F0A2FC23931D8ADA6DAC6
046EE298298A002088175C13B8C07BA13CE46772EE4AB48998B4373460C2B63A8C21903F0136
E5B33DDB8D277566978814C16BBF3E8E784A2731E0FC00695B98A830D631E9A8D37AAD385A27
423B711207CA497004205C44DACF0A08744DBDCF3CD6140A22BDFECF198AA5C28D09FFECA41E
8E2315789C0DE0FEE9DD533EA6B7027BE61130A7F0946094ED71BBAB7AFAAE7CA2C6CADF6958
34D49DCCD3AF751C94D84F01DF754ED508BE5BF7D290E041F9C77A94589C93C5C477ABA06D89
98B62F60928BBA557791B1EF0B0C58B08F65F9DA267E834447A7CE45AFC95BC6BCE24E2EA250
79DEF5CCF1C0F1CE362CC9A701F5885C50213CDF0FA6DFCE80BD5E125B5DA8EB8CFDD91B158E
5A8A1EF0328DB42C4E19F7B48410E1BED592549D991F0FA27F53327175ED8E012C13D6D0D98A
BF81A8C0CCA884DC1263EC776F159A6343619AFA7D123B500E50B11667BACF5E07D371904DBC
404932DF7E355D1A7AC23E237A6A85CD0F7A6015C8E3B3B5620731E36C40754A939CA9122AFC
C6F216C9972F4EE6317BA968CF1F2512A920F5931E3CDB60D05CC275023E22C3312F46A962CC
06BBAF0685FE5139FF8D9B09F189AD19C027BA6163290029E54DB0B132AF0324CDD46B3EF44B
2CE916915F64AD963D01EB49A960BF65F92C54CC2E86BD13998C676F5633D4E79464FBCC8995
E14EEC6D5A168092E2021333DB8E798A3C634C5E9113AAF13352CCC7B5AF02697D1E48B8F913
0E2BD175FB878BD6C64C9ED338B66B96761B0FF737C9A49FD5A8CCB391ECFEA2027DE59C696F
C72D604059956091E40139269A8B151870F58CE9726F1FCCEB541872EA718C21EC35DE695843
55D6F62FC6BCE9FF71F0AF35ED2192A39E05EE9E90C13B8D5B4783AFB0B7FF097C5E17F2028F
250C0918C07EDBA5DA426D346940D2736C151E239065E32B17AE1E4CAE424F234E38A69E0E83
AABB06C51DC2C5FAC29936F431C77F88A5122E6894554BA4B0F681F52020C50DD07E28CA15BD
9A53712F12B9B5861A0A828EF221FC57798FE7EE81768DECB31E06594E163D815BDFEF21DB02
6525DF8ABDF808643806393843205F6C7A1F1D0C22995E89FE5B4689A239E851878D5BA4D9B2
6A6D0A89A272F7F04D9428EC63800BD213903DA5401DF153CDACE8AF9C4A6416DA0724C1F709
E6F7913ACBBCC5860DE435A411638DDD7BF0913A94BBE866EEB4D3F920E55FF2A8E65FE227CD
22C4902E755F653A43C6111E2D76F9C2C7CBF857872D0B318D3D971666ED8F97AA49E77F3F48
F5473DC64FB4FBF446EEA3DAC510FC2E095E4F62A274D92A0D1315250090DCE2B28AE6E796EA
17EA4E7163481A2106895AC73202EDEE685D6391F1BAEADEE68F34D185C51AE64CC44CC58817
C5E2C69174395C63B4B0973754664BE82B6293B5AC47387C67A33E07424461ABADA6F5C84F32
2795129E72374A9C9F9A97F9910A1FC5EC060C8832929CB861A96D78B654417EDC56D9B2880E
A43F7A1309978115D083D35BC659B1B0D4AE05191DC1A3B3EF1EB3709ED646716C17F2F658ED
4A143BC2384DBEF84A8FFCE1D32D5A7179D025981D7F9F885754B2C573805C62140F4F2C505B
B07DE980520B926D6E42073003632BFB1116972F56015F797F89706695743B91F8336A855BD2
F0A2F80415462D0D12E4C5078324FE59D9573DD1A1F9B246A5077DF0C5028F4DAA2027B53B69
BA5BC8895BABA7195F2E6344F6181C5C535EC909F219AA6F71834958B9FBE0CC72B9AABF3EC7
201BDFBE6E13E9AF314F9F36FA2E35D73EEBFC30744F10A45D4854907C63156134AA49A5CEA9
E430EAAD6338ECCC2CD786532E86717AA0B4B3AFAD466A4312C63CE6296035EF85CD9C034C42
675856702C9EAED6CEE24D0FC37AF3466E65F8B4FF373CB89B4525CB4D52451E2317A08F9671
34FB66EF81E8E84A44987D2EEA692657368F488D2225078740ECD8B10B9907C4C8EFED6B9C10
8FC34C76E1C0D2E0F1827AD68D65E4C66CCEC9B31D4846BF37A49F79C3A851E3CC27B40D6793
60B5335974D384CC986FCD625553AEDBBE5C13A3DDE7EF55536C8146AD20904B6BB1C160090A
55123F9BFDA59D92727705CE55C06DE330A6F1799EA2A44728F9BE2A6FF733451C30977145CF
5A35EB885CE07EB1174005ED467D8F96512E8436ED9FB256D9B4BBDC623BDDA6341C37412143
EDE724FB6A01E1488DBEE95EF524594D2AC8C49E1AA3C582825BBEDA652A5B62EA7ADA3F032F
8346262E9ACD8CDA7E9ED4517905DD4E7F5A00A1424DC83BA1D8CBC411689BB8247DD93365CA
4DDEF03EE5F1695A0F2E63628954BF7657F8CA69F95884AFCCC0E346917B40E514A2E932BD02
D966CD12DE857DE93D55C7E9A7C03A725EF01687A1EDB4067805450CFB752AC468F138C13523
083B9C5A03EA906F6AC4025318B8B1D2CD339B23CC412D0F60A7FBDE080E662F4D43A5FD2DEE
F926E7869A78BC613202DFB40B503CF085F9AE85700C5BCFEAA14AB8A0D0BEB428A89D00C10A
5D4693B52E50BE54FECD47935B3179BC02F835486D58621DD9866A4943447E1C71DDC43346B7
45F868DEDA7A86E5F5465D83EBD16582577C2EB0BE1A62206C29C894400AFF5536D8BD027380
641FD5242D20D3BB2F59C9CA2CF22BB06881D7A257B2014C12F5883FA37D696A58C3DA34F1B2
059600C95C2C9F9880B8069E2B0E88F4731BE495B3A08646FD3E3A6DBFB4FD579A6F93488BAC
8B6C6F075C7A00FB81E4302DB3EDE6A96430E05836A6D19EEC2F284A95800CB1AFF0AE7676F7
AC7754D8E447B41DE66A1AFD7B188F400B7542DC4DF89093901416167EA135E986824A7BA6F8
F777B38175B013E782F7A447BAAF0F722081B6FE0EE9CCB6E00419C8C631EB61AEE550487AE1
51761E077975A31815279225D55CA401D73C4BB3FF75D3B43809BF38B74E79E11E243808FB17
8A0FA1FC532D2261AC7FB4A779253BFC4EB8E55F453C6B2368413FB8B3463DB9A51695FABDF9
14A611DAE367E70ADDA35452CABD02AD4126439D28303EB89312033906392F0D0CD8E873E3F3
92F7555012845E48039123C06F1FEA9BB0323B60882B0DF43D37A324E3C674B7E44D3AB1F6DD
32CF9E8F715766B60A485A9C65A9C99FDD5A2EB36C805DD5B6CE48BC00778ABE0B468F718DF9
BBA2FCCEA313CFFC773E3528881F34853F8278FE753D30082FFCC0B9ADF7B063A87060A5F89B
FB887CEBCF8583E7A2506418CBD1DFD083739D4CAAC0F17C41AEA7A72F8E080A2670C7E31AE8
48CCD1A52B514514DB81A59DC6741A4877F495756A440B8174163E7037CD504030703DE50734
312773DDC406759715044ECCF647689C6AFA4545DC623ADABA5CF8551D74B01C611E8C166DA2
464E73A4A5075D2F8CD7FAB00441E52D3CE397601251897C43307F2834B9714BB65634CFA0EB
3627423DFD0F824E89EBB98F6DD3BDAF7171A4D5CFAABFBE5E8F59A233D7EE419EFCC521AC64
D07D363648A35E50D82719CC3DB15C22355E4EFDDE0F7BBB3FAE368308486A5A3DA638117EB5
58E3BA1748614AD41C3393CE89D5F82F0D80AF04C7F913578FA46ACBD53E26C4F00FF61CA247
E5EFD45A55A2E211DD108CA41CC89A118AD97E63CABFA185D2E53377A8EED6F3B6F9D42E4D3D
4AA46DC75F8A301BC7359EEEA17742CE5D035DBD466B9D0171DC3F03770227BB3D46263E9688
E3F9C5FE182D1CC02A6A6AB436C4375FFCDA28EA3C9D93B81C03C25C6963CE27A37CA281CA49
6A28A7D728DAA768DF3EC6B2E38BF611C151BA4C5650783C5DA92912D2210718D570BDCE6D36
50629789C783D8FAC3069AB6AFF14AC734047136531E8BB2CF623002A45D029F1C7E2A46C2A1
101735F93F0895E0078E1EE3C4C16D91C3D7B089410D5804CB13D7F44C3DFD0F5362EE584CF1
FACF0F74284715FE0165E0CFFD94A2E14786FED7344FCEADAC96270E22927B86E96FE4E69379
2E47B7CBC9A09B75B7D67791AA12F033A1D5D20EBF85AC336630C291128376A187CC52E186E9
6E00861E2F1720395A717572E8F8FE939B996FBD7E03B8FAC7FAF3A950A52999A5DD1E7F3D07
D85A198C57A294D634A58D4E5F236559C7125D0AEABB91B00D89A9C4746392E862E823C107FE
793604FED7FD0E4424D257813DDB3166E7F74D436F74E5AC96140AA7D760D5FF4398F7CA0912
6B7797996F0A0D34267F8D4C59933E5CEBDD536587264725189B22A8C8AC75034FE3F5810946
65663DE8496DA09B5856B753908AAB1A32A17126FA74150337C6527CE883AFE09A699E4B29FC
D4FBB3C93F4A082FF2D01961A91E64B63CBF159A16B97D9B73B73BB95921C2B7A518E5FAEBCA
EE2FA2863C5C71A1D714DCC1300CA0A83C2F447393E5508DA0760468BDE3979C8BC94A3AB723
F975B1D2A7102CA79E5D8F660CFC9B260216E0665AD371C05E61C465C2A918D21A93D861D396
674504E6CC40446A81E1A5A4544B6EBA26F2AB31124EDB937588DC4CF96E31F2AF730F0B9355
57D5B5AE4F8E7A10BC294031B4266D1CB84A3F66CE30B40F3DC5F94A42088B4172D4222CAFEA
61B158E585F9847F1F357BD37279942DB4E782FDDFD695137C2A3DE5EF0962FD119C203007E9
C078B9EB184F98E398E7D1DB65AD2BE7F47FE2871BD9A4CAEB7D5C48889BC793C766C97527B5
CCCD613C170116023F8EFF05F083038A0150E092459C331C9166571130E4F087BD15539B8278
475A95D95A96F5F5FD2D82D8D14A990A8CD9C22284AA50BCB95A9AF243501B140AF9B1FF665B
27B9D76891F906CBCD05D480258F33D2CEB34724BD5D7EBFAD4936D522EB36F4B889727E7F55
B9A3BD31560F61DCC0E8A3161C5C7C79F1E25C028517CE916B4D089F5AA8BE7A44A5B2EFD9AB
F0933276585425356157E83ED817D40246D6244C8185E98E9577DE9228EF0759D244A4F7CD17
15166437038D78930F492D760B6C143BA0330CFF4B38687A523AD027551169E7AD97F691AF58
F29D098788681CC282A7A7CFF8C9019F015CA8AC02C4CB87F2FAF06E3F299EBDFFC19FBD2F49
A3809CCF633C821FDF009D398476C8972AFFFF141B40C93A02B98A88A96C4A34FA324486434D
D452AAB43AC5BD0B11CE5C2396EB672071EB05887B9EB295076D275089B4DF99E0F83750B319
FAEF56E5E4E423E4DFD8F670E63B82AA6DC4877F95A507B0E9EDA953B62E7DF78FBC5A98405A
3E8D011EA3C504B1F757926E121BEF57EBA5A9BC77AB4E4D83F240BA1C12B5E0953DE9E07E20
FAC717608D47C4CF21D5A9223D56743F233762AC51BD08763F380DB325578CBE14FA59E20FCE
E5D750EC74A0E07BB30DA483B30BB9D9C83FFC56C846E3D688F765154B224DFD99127214DC32
574706D64BFE216828DDB7CB8C05C50147941CC9005F303F6F4D84E757D220F1FD1EA3B3C2CE
8F9F6FBB2CE1189E1ED976DCABEBC9791ADD2EB7661F243897D1403656E8D0C854BF240C21C3
57A9DFD3749F3F261AAAE87D97B892D83ACF9E8C78E29AB203365746ECD27376945D66594EC1
C843EF867EECEFD15ED6B8CFE03B0DDCDC8862C9FA0487228F723E4B3D8781B3DFB27A64ECC7
C087704885562ED041CFC7D27B9D166A088CAEF9BB760EF0AD83A46950CA34B56425C0118141
38F8D85143F251165DEC06DF98359EEBC8900A30C2A5081314739085365E23DFC8AB95C6C51C
72D26C6F835FCFB1FE71C614310AFBADD5C88D178F642A898D99FDD87A5B3DBA07CC6A35EEA7
62118A8E7E03BD3816D734F366AA98168B15732539A38C63489BB5FD2512A92A019AAB58FB78
A91F09E7ECC7FF5B9245DB2C12B8BC25B41F5D6ED3B7D6A88708BE3C8BC6C03E6D4A78315B57
D4D27C91C2B7AD0848BD2D26BD5F78A2F13A33D60B7A25B35EC5602E8114D7B6569D7B44154C
E2990CE99B99DF148E4A0AFD46BA3A67CF3149B024D757EBE4695EE5672A213C53427E621658
C353D7450378CEA87F8E5B957BEF1ADF2858310C6F5080F1E3070DBD40757B1D1C6EA767EE5F
CDE2A5FE6A4C69F39C736218CBE2F5CFAB57A78955C468D846F8EE0C87539D96BF89B334593E
51BF261EEFF916512AB52F65601D58722637D4FF67A04277EE7EF2D0C99ECEA41E63556995A7
B49090AC2434080577F3EC42556C69CD5DF54D5E7F4AFDC392C2B113E5F07C8B0B218C392AF8
53FEB3964BB98EA50F0733AB3264B5A27B5D03DFF77C292699A717538D676FB92FDCAEE1664F
CC37167F24E11669B0B43F04EE8F8F893AA73B5EF8459C8CDBFFCDB5C7D5884F4772D8A4B46B
853262FD0D3CCBB3E4DA40D01D028FCA6E3B19DA5C1E918C053897ABA5BB79ACA1C6F567E899
5D466BF21D616181DBFAFBFE0B97A7C2B366CA51438BF0FF77A5BC3128143DDFE7D2EC4A3C1F
B0DF4F4F5BF1C82744D375840BC82A0664BE00807DF65BE5978E27E9218FE4CA569C13D84930
5276CD9A01E912F54B09DD4AD5EDB0FF9F84E4BD7F2A85EC0886095174BB12539C356CEAB0FE
FF7DC963F44BCC0E1612F7DE9BD8C0977CB35D87B9A75F33FAF60EF82A7493C0924750EF9A5B
6B98F9BDCE8C40D0E5A610629C3937AD007BB3B276144BB3E77E6484535114713132C5567DD6
2EDC24102E51E9A02645836C5F94B0FF9DD966A3681913A8129F6B151648534BF536EE29935D
69F28E0D2DFF172862BB8889E246707B235D3E77A308FC31A15F849FC4B01456A8EB26612A99
744F82C14486246F8FE4E210ECBDC12E24C85526FC3D21A3F3055E37C097865A74C735E2EFB2
5F2C88E65469BF66A84C80035C0ACC3F81D2CC7DE185E55488C0144ED68DF3EEFA171A34817F
F87293CA2DE4F83E5C801AFBDC439ACE43C460E9A0766AC65F70BE0F192876D78874558635E1
4824BCEB453D2E8739D9BD57A4D6850D6DD5CF38DECEC109813982A12BE32207FE01B4268B80
C5C474B604C0121E70C63443B5513CE1A11CD0CF093749CDCA150F78CF1A85F705D8E80DAF3D
FA0BC32AC389D5F5C7D63AAC07C12408C79B3D6A0508F7C93612B799A4C79709815FE9C107A4
DB6D8CD911CB7674F34E760C0A8917011949AAF0C740F13929CE1B2D364383777BE3B7B8347D
D9374556821B9237083D607410502B1F128D874C1DFB6FC1CFA6D5BC01CC767E3411E1A87DA4
E921E064EA58FCAD035E5470F392C3B6C7B706F75A5726E516E2BC076BCFB306778536E27C93
A9DCD06FDE1F8803C50FF7CF74EE89E9D304E69C72C3E30DDE7104B223D81204F3F6AF6466BD
3DECFB07FCA06506C9D1C821C0D1B6BA8E35001A383A90EB46A5C38E81F3C54031DE6F05304F
B5D136B9F864D92C144623EAC6073014D806E1EEB54830A5E0CEE3D31CCDA933E9B8A3741A80
3C370EF9E138163C8A8EED58159786E51D0A9F5EB25F55DC4A41F358189D525B2F304C12E2B9
A65589A7094A66F9625E230870CE655B4BF53F63A48C952461010F94E3E69601831498641503
A8BF278A3C51C10F8763855907FF9BAA384CC1A1F79D280335B96A8C4FF9B9324F747BA02A9E
E72068523E0FA5EC09BA9D67FB63208DAE29BE0D035C6F2B82D0676F11D1FC1B5A31F6E3BD3C
C3F4E02B7CFB32AF673231162A4C55C7EF7E06B3809164330BC4A2BAAAB3EC0845E54FD93DC6
00AEAEE58FF30EBFA06FF00A7ABB55946391D3F4079621E014B60BE69D3B6412DC8B8C22D364
3533637665F1173781956B156BB6BC1E073C6675A65D91F7E66874403BAA53F28D5C3AA21AEC
34066340AE15300D11E1A6DDE8F19283120F3942B93BEB6C34BEE9E6DFECAE45C348632A700A
4596E1AB52DE94FE6A3B79F0AC82C5A5010266862CF39FBB6CF68727C2F4482D30F2540C3743
714DC35D60480539189983F1180B2C54AE5B3A239D042BBC5F4E47D2D5FD5514E5BDD367BD4B
BD520E15786CCE67EF159541525F626CD5AC5F4D1947C1922459CA0CFEBE319F21B6AC7CABEE
F65BF2D08D7AABA437572F1D2E6DC5C7044C82A76EE2B66A02B1C19CD9CB9EB84059383FF5A7
4301AE2136A873875F7B34D1B616146A8C65F849E02AB621E52143E2AF0F734DCBCDB8B304E2
79B31E65C40242F2E64697B48EFD77C6AE62FD742EB1CA422822BBFBEC4248D6B6E45BF2FC8C
309A693E5BBF05671FFDBEEB0200A38BD24760CF837180A858E92DB8B51F2C84765275B16018
8BF3DCB5E384DF828CCD9A5601DAECC66AC1B29238157FF0F34BEDD718EC8A2C25B62F42EF7F
4444CC768D23B41087C9C91B594325300142264BD5C43869B4E31EB726C615A59F6F564D9519
0466102A7D664A9D1C770D6C0FA2DDC5B9AA2C87F1D0B04E8A398C5BDAAB9690EDB250696444
87B786A616A4543E4D90FCCC3A87C12826F73ADC342EBE5E5C48195F6F6BA5106821C8C48EDA
D0A4CDF4B9CCBBDFB6CA68C0566C4637C4398FC7AA4EB72C63BFB41B76E82E39A813FC4891B4
9E8BFA71C256CF4B4F2EA54F93324E5E575609D425682B1479F1DB4D909F5B9C0D28C9624030
E3FD4F113567F964DCAAB80B89198C6F7F6195E53E3CC9CE488B63D792299C17C9EA6044D7F7
5151398B14A652A194C8819FD1D4C37DF64471DB13F24C33E38FD41A965DEA7C56F56C7C9154
C23F903816D2191206A27F04C218219F5185A3833296C254D4E3C32C1EEC1EBD1C9FB581D1CE
1E08DD7B706EB7B701ED9EB31AEB5C451D2C4251E3B449D3C122AC16B8234C3EEB1D13B6A7DB
545667B8BA3D1646146B7DC454992AE25EC3C499BF0DF1FE5DAE03E81FF8EB6AE4310E1D2E0E
D330AB8C79E320B141EAA16A16C4AB94C11B28797024719986A29D3C2B1295F238C3B9793F96
F5CA2A20C9148D7924515F11967EE1A598659143D422F93965FC76ACF1C404BD8752025F1360
2FFABDE7531CDDBAD9A5AF5E921A11E94E94A450E0211B2D2C0F3A37C2DD4341505449457404
9121286E13FEAA56082ED48DC22D4580791AFE92698502BD57A59839E0C316476B32838CCD1B
D68562AEE7A547A5C29288C6285EF4A496B7A8267EC8F65D4D7A3701CDB72498E9E0060B4F17
E36B71A4C8CFBAF492148A9F620871B93A64006423B9696F178E2D2C51F8F0D3A760A94D1883
A4383B29C041FBC090CD6753117526496A2CC9FD2F72B4FD02E83F5DA82C545C536EEF08EF88
F3607F5D328535BB1183291F2205DED2886F5392E54AF3EB24B2366D960B1B546D7F0A7B7D69
55840EAFC8C2481DC60F4045E6FA7628EB8F3B97D429F5AFA5492CB09CCAEFF013E68C98A654
2078FADF439FFEF7C3CE25A153F73B9AE3D14B5692F22E7764050A0F5A7852EA00375093D497
FEF49D30E26D6D47F739AE2E75EDC2C277611732C81444F9434ED89743A3B4116B436DD83C47
6D487ADADEE3D8B8CAC324C27259622234C91FC0B3743D5367A35CD0D6AB7D36E5CF5C7A2E83
95AEBD047F155BC25955B085B1469CD2FE0D47AD8E7849C529A98345BBD60AA1DDF0FD851471
1129D9DF13F0FEB37432A41677708EF372E59BCFF21598C7CA1062B8F5C281F07C3ED2422245
2FED2E818E3E570DA2C77BF0F5DF2F18CD3C67505B818C8DF1317BC47A4FA41BBCE347B20D17
0AEEC2927A2CBFBF99C8C664D5A97585934A84624F27968B67EEBE55B531ADA513EC5B1BEED4
577C6761C858715FF3121BF567CB31FF77F9FCD95803D20D3373D1EAF9FB9F73A16DE6460B79
E963CBEB5095BAB4C41C5CE1073D549B111136BE227AAC54140B81BDEE0921AB5AD51AD4F499
C3680729199399C0B577CF8930B7EB9B6752FCEAE82A7BF48441305696A4DD7D4A8560FA50E4
DDF4AD1C9B5EF83CC8B936098693E6B905240D96E2F59E5CF96E5D07DE74C7F96470956C34C6
4B8838F3FFFCEAE8604A0B2164DBA1801B3613EAF6DF4E2175F26029E796BBA87CE480F53BD9
542AB4A9C67F423591A2BF1D0AFEAE85BB54AD015AA92EBB721906962BF4DECB101C43F3BEBD
BE00891EEA010466FADF57F52E4B13A810317C661CFFA57C0AFBBC0E820461290280BBCB86A5
4FE1CA89E4A0372AF01FC4608DA847A3FB2915A9A18BE0AD5770670A3DD43343D38A51EDFB57
90104197A1247BF40C8A0A99492714A03875EDD0C690AA259C63087D1335ADCBABC6F756686B
78111E109FF5E27F7E31AA7D4DD2FDDCCE8DA6390CA28F696BF991291B1B368F0A30C3377EB7
450AA2BCC63815358D3BA2B5FCE36EF6CF06E0E88B1251DB92F52E0BC8F1EB0E62E9CA32C358
4CAA5448E04E28CBE16E0EEF6DC44EE4F75BA5A7852296882B0DE94541C804A6AC1373503E6B
7B68B34FD5C1F7E4ABC96AC6811B7D590C03A1AFBC328E7B6DAD7F3DEE671AB1CF213153557A
22F5E47B7B01B1909F2519899F4FBF2836141301FDD89C93EC35AE517B5D16C890FE0B670359
5D7A9DC1A362F0A914E4BE2B0969DB2E7425170C7254643F98EEC951D81C7653CB1F7F4DEAEA
B17D9D615AEAF0A80F832F29F6FCEAF957230693F46DD63602ABD0B0D2CFF4B1526937E3A3C8
5492FA65EE11A8A16E941CD74E9D50C9EA478D17B7950A30B3467F2F05061DEDBB71C853D9C3
3D080A6B1A856D4291B5D13CE015D84C255D1F4329FE92C81452F45C9DBF665EBC67D3C9D2BC
6E4FE42763554F371998787E05477AAC652A35275F9EAA23F0F95FB371E758AC73D2D607C1AC
8C46C6CE605A6657FE910244A8DC8A3DFCBAFC275BA908848454D5D21A3A6427D6A7E39016EB
59BCD716CAAE8A6402BCD7B04BAF56FEFF071BD8CEE802AD8A0F067ED01CA945383AC8978016
F02E0277178712E95013B0C0F494988B4D2918875AD62A5686B44B3CDF32924A6DEA5B453533
183DD598EC37FA8B63385D8898674AE56C2C528A3E630D46FC945284E32F37B19B8D92ACC7BB
835F9DCB6F29E6B794030E556A804215FD5F296408F68077234C131E0598689826AB552627AA
7FDF157E54EB9120A913EF185CCCDF94D3D28856A8FD6CEAC351956F56809B0335B6D88B5F77
9906CAE6BE7B3C89184B4B6AA6B68298E03604AD2B3D192D951DD777216D9C3D595DF825F51A
0018236F67BC1036BE572E0883D72FD47E403A59CD15F1735A9141BF2494CD7B2EA83E58F707
28920A9CC26FC35A27165024899A04CEFDB0F08970B89787F9DCDACCA804F6DFD75CCCE5C634
16AA3772F82EAA8CF815330E462BE4A73FE40940082041B6AADCCD78B7A77AD7E3769FF50064
140809A8994F970E834A76424E5F4CF465B80D154A800D7F238D0356D23CE1CC19DD485B7ECC
538E5415DD578F8DE81542653A1EEA4AC0095E1FBD35727E46AE67F0A32B466DB867207B2BA3
939C6C7E92875F0F80CDEDE647BB0A9E147CE70136468B02BCF3CE7D9C092DFA483B80AB4FC3
7A13284F03F6F009D98ABC3F78D393B1F3A457ACD3AC4CED3BBCE0E7FE8559DACB9DDCB099C3
E6BED9A352AE923ABA60431A6E0209499F482E21E5E5D5EE94C0A46A368757DB6C539A6493DD
1472D16AA89E3626C542F440E8599A4AFAEB977B44EAEA40A48D3C7785D00C79714D6F84EE7F
0BC763345D84DEE7153FC69BF63C1D6E7F72C895212BEEEC8EB37F6B062A40DF4A37BC534AE7
EBB12B33E7D9023B3B8C069BB5BB70340D41564498F05399B866B0ADA1D53BBEC6455AFDDC9B
71F813469904235C1C772B9419FCE1B8A63C736E42961E30FC3C5CBDB5828948A60F07E67B8C
973B1AF10C31D14D6DC98CCA2D040955D3CB9D08709EBB2D3CD744B100D85F75BF5F32B3AC1E
2662EB53A9F10E9AC59ACB476E3EEF1FD11A0A8755CD52BD847473B650C674E7BCD40135ABBC
5332ABEAA1D861A0367F734BB47D7C0DB00554FE84E24FDE2A2BC498D274ADC1D97AFD781C96
0281789832DF5AE5E181FDD837E513B7D304B7F8F0E5C897B23FC7B2DAFF9EDDD55B7EFF6B31
1E3A04C0AC8ACDBADD771423786AF083E445C22FCAD37FC498AD7D74BD5B7E41B3B73CC1A721
0909E766181BCC5588FA1C3CD6BFCDA449C547B8A5CF52D9D7509B65B5AF2BDC7364C2FE10F1
770EB10C1498D08209BB2CB6FB6AFD8B628429D3CD448697ED68B33A6C3EC01AFBCCB53CE735
4EADB63A26BB4BA01BBBEFBC0D513365F634A8962EF0DB618EEEDF5614DFE58519DF74CC6BBE
0FDEAD75DE3BCC51123F093992C9C3DAD94D9427FD13DC161EFB48147F24BEB9CC2A387BD223
9EDBF1AF9BB06EB7840E143EB8F0AA70B724C26EE6B362F9F9A16A469BBF4B752E1054B9A04A
67C78D79D30C7B3ADCAB60AD0A9A890DB03D940674EB78BB4526B57A4A6AD6BD275796DC82A1
974C7301CD33F1E22B090A72A81146C83846D3D41313E206F932B74094C57A5F867A18234FC2
0BF12DF63F01A5D5DE3818E473E07CCD701EBE0AFE588040EB9D8BCCCF08AC056E57BEC68296
DC8ED09B44167DA9EFE211FFA48845C0A7FFB7540DD3DA75EA81F757DB43E3C9B1A14793DEA9
D5AA93EF2A75298CBDC8524D89C39B10EE24BE83C20C69C5D2BBF5D6F6B29D4B4D467E01B4EB
B3C62B26076FE4B0C4C6649640BA3E418F7F227B883BEC2124997668445EB4357739B591F121
44FC38DC6B8AB07F7F8572688726BF750E91ED5593D1579D12B468A7EE5263E2BEB466F764A1
A6AE505FBB445F187F392CF0559C369A06BEE2B0886F93FB0C4D9F848B7F11C1DAC3682EA037
B920CAC2977B60E596FBCADF5B8CCD90C089D586CDC83B00C40AECF32FF126BD4FD88142EDF4
2DD24EFA2B956A2B4925552160D8B23515DEE4AE4433E72875D03868BF8763D7C4E89F7EC073
7ACA3E85EDB9CF0E22196925754302D5FC3CD747779FD1C9C54C58CF7FCADDFD9389F8F97475
2D6F66B53E6AC38CAA5389191E76A5055F6F780D2AA7F5FD70B8FAF564E6AF3826204904D9B7
1BEC1157FB0E1D18E3DA682812BAB337A8C145D694A2C93A9E786EE8FAF8C57D2AC8F99C7FE1
08354652A6D0A69BC344D660CEFD706717AB8AA50181E08BC5852F73099D4F5BCC0C46A8E1DD
D013EC62A2A7B0839D4DE65C5583E4E3EEC1DD426E388FAD8921988F9C5ADBDE5E3D30528035
C74727679A260A6C0390AC68A8F0A68ABBA195B63FBE6D3DDBF8FC2753A71309BB7F18264CF3
DC47E7FEAF20D683A26BBD62ED2B9ED3A5B68A4AA3400DD10669B21A1BBF69B2899003B3BC7B
E15467DCE60E2BA57F515C4274980EC7AA40F2D25506A0020199F14E400CEDB9583518E0CFF7
F2B3AC0B77CA50A74C20D28DFFD98600C722EF7A665C4B5E508BA65A489BFEBFC105C3C07155
5432CFBD665A68AD5EDAB13E49B6EB2E27B9898964B05CC2906497AAD789CA8EE0B8B47736D2
983E7E326CEBEF2A6EA327D3ABD5CD2D7E9A62A20129AE3E4BA0C7CF0A9242B02E9557B67EA9
47ED77512D66D88B82ECE627287220DB3282E611386D8E94FD5FB284F1CF51D6FE7BA5342478
08AB750E41B77997BBF54C13B479EF52FED71EE1CEE4A8891279B4050E8F812F4B2007207C67
7CBDCD1CC1D037E840387DEED97F21041FC78A52CF70226F90ECC28F48EEA549977786A002E1
4CEB3B725EA938D63E75AAF7073250FC74B329107BFE34ABCC9624AEB7824D5B0A6B5B5E9A19
374463C77D9CBBAFB90C4BD8111D661EB3ADACCCEBF995A40A96A61F0EBDFED45787FE1E6A04
5495F06E42167F571EBBDC53A427F1D6C5A59760FD144A146F784FBD87EE9322B896A3EC2E7D
41579C2CEA507D55483B2F228A2F67732CF33C3A1B31DA9CCD8F7AF8845CF78D9F94DDB84A41
51EEA1AD173B713715173BF16B8C6CE71EC6EF33ECB9544454272D6272BF41DAC1B3BA5BC134
827D04E1DB0ABC536AFC7CFA6701590638A80067BB55EA679B8719E3308494536D9D4B09447E
740F4746E7C6E6B2009B3A26DD9494D1C90B4BA2708E560CD62F81752D022DF2BC8A54E40249
FF72C6CF8891D104F883777AD1648645C4FBAC3345B20AB9C44C3AFEDEE6A7B6C59A8DF8CAA9
A39CBBE6CAE032E5AF889AD160CEBD7C8CC00701D9F3324551254538765B02B0BCC0511DD967
86176B20C5EA3F5A5FC8B1C54DD93856C5913FFBD2A89C9CC7584CBB9319D4382B9BE2C5B0D2
01028427EC74E9E01E4B04A6BB8FE439219726CAE72A9D41A40B32D5ADA623E47A44587A0652
65AA87D54483FB0E96D4A5D2BD077C4C72FF73E8D660584851074A4E2A641EE44FCD4EFB58EB
6AD6E0070EC163CDB2F0AF5AF0BE4BDA69BC787C3B3F1A21F16C13B361621F6F10C19E909A43
AEB1BCDB677CEF6BC7453597A1F20D7354C43138EC02CAFBC3DDD82585C1482EC72E5E05252F
A1A823AF811E2758153A1127F66B4C5D37D58C53F5152914EC9581310345A96343E5C76BE3CB
4A04133D101282D4319EF3B68B02967DF9FD711F6197A6AE278239CA2AF8404CD026CA85CDCE
D7A0D5C18FF169DACC89E1D1BC09F0BC30E40C3BB9A265F336CD65A86F6C3305A1692281F838
70F92EED2EEF32CB15BFC2D2BD9D07A62FAA6F44675CDDE0105DC91743C6DF8668A0401C5456
071B3E31ACB960B2974E98F828AB7AF97C9386038F7686EAD00E0F9D6CC63C5CCC4040763DD6
AAD3CB7D5C340C36225E5324A2A7DF82C1709D96CDC2246D046F83347B43FFCE7A498D5F04B4
0C6287C8477626FA35F561CB50505EE69144AE3670819AB8C94E1ABF95D33B8369C7A6BF4964
A7FA1A9DB6F2249FBBA5F0F221C0C1C880980FA1B4B0E074F2A850E3C2DF6D181D1457ED36A9
C1587863270BBB1615AEEF3795C69DE57744AA6D6191DFC50326D7AEE410512DD03C0E7C2668
020480355696B2F5FBBB78436A5D6C462AA196A7DC3322D5778407DA44F7C594A3F58653AD83
613FBF71061B33E82FAA2D992BCA1D3F2E26BBE4DB03EA9255743A825DEA367B7AA675F536BA
C2CBE031526356007DC9B9ED4F96779B3BCA7173C073FF5D14A135AA54FB35E54CFE790775F7
4E83A08486E779A12FC0340C6C5BCD80FD14A5B524ADFB70B73B0569B5E8214F5887706DD92E
D4008E6D052A8130194C1AE801DD112D2F43EFC911BD9C73650F37053175EE622A859BBC4CAD
F4EEA3416AF0606FFEC9521CA88F820267A6518F8404362247132E6199595B64903C05A96EA7
3D6229146EF8F28F9A5B1D7856F7AF2BDB1358322EF3AA8BCF39D99838C88000BE9830852109
84CD72A071BED3072FB2D9034FF94139D5EE87B5E24E0C0706947D0B24AE4A78940F1C4DFD74
B1077724560A5AF12D68CF50EC2582F16EBCCF10B60DF89867BEADE63AF05E39D8E3727012A9
983EC6220752CBBFA652215AA6838E8E223C57890D18C5D18BF4B7A6AA5FB232C5F135A3A6E3
B813F8858247FBA6D6938F6DCF1AD545F290EC7A50652A1F3DC01F976AC8BEF60353F32D584B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont
 TeXDict begin 40258437 52099151 1000 600 600 (make_fig.dvi)
@start /Fa 252[45 3[{}1 90.9091 /CMSY10 rf /Fc 198[33
33 33 33 33 33 33 33 33 33 48[{ TeXBase1Encoding ReEncodeFont }10
66.4176 /NimbusRomNo9L-Regu rf /Fe 134[37 121[{
 TeXBase1Encoding ReEncodeFont }1 83.022 /NimbusRomNo9L-ReguItal
rf /Fh 103[28 99[42 42 42 42 49[{ TeXBase1Encoding ReEncodeFont }5
83.022 /NimbusRomNo9L-Regu rf /Fi 134[53 121[{
 TeXBase1Encoding ReEncodeFont }1 119.552 /NimbusRomNo9L-ReguItal
rf /Fl 252[60 3[{}1 119.552 /CMSY10 rf /Fm 153[18 102[{
 TeXBase1Encoding ReEncodeFont }1 66.4176 /NimbusRomNo9L-ReguItal
rf /Fo 134[40 13[40 41[56 65[{ TeXBase1Encoding ReEncodeFont }3
90.9091 /NimbusRomNo9L-ReguItal rf /Fq 103[30 33[45 45
25 35 30 45 1[45 45 71 25 2[25 1[45 1[40 45 2[40 13[51
5[81 6[51 4[66 7[45 45 45 45 45 45 45 45 45 49[{
 TeXBase1Encoding ReEncodeFont }29 90.9091 /NimbusRomNo9L-Regu
rf /Fr 103[40 52[53 60 53 50[30 46[{ TeXBase1Encoding ReEncodeFont }5
119.552 /NimbusRomNo9L-Regu rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0.01 0.04 0.45
TeXcolorrgb -8 -316 a
SDict begin H.S end
 -8 -316 a -8 -316 a
SDict begin H.R end
 -8 -316 a -8
-316 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -8 -316 a Black 0 TeXcolorgray Black 0 TeXcolorgray
0 13 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 0 13 a 0 13 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 13 a 0 13 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 0 13 a 0 13 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 13
a 0 13 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/FitH] /DOCVIEW pdfmark
end
 0 13 a 0 13 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 0 13 a 0 13 a
SDict begin H.S end
 0 13 a 0 13 a
SDict begin 14.5 H.A end
 0
13 a 0 13 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 0 13 a 0 2612 a
tx@Dict begin  { 0.0 312.98018 } PutCoor PutBegin  end
 0 2612 a 0 4029 a
tx@Dict begin  tx@NodeDict begin {85.35823 101.00732 } false /N@pMatrix
10 {InitPnode } /NodeScale {} def NewNode end  end
 0 4029
a 0 4029 a
tx@Dict begin  tx@NodeDict begin {10.243 44.10184 } false /N@pTree
10 {InitPnode } /NodeScale {} def NewNode end  end
 0 4029 a 0 4029 a
tx@Dict begin  tx@NodeDict begin {85.35823 156.49008 } false /N@pTitle
10 {InitPnode } /NodeScale {} def NewNode end  end
 0 4029 a 0 4029 a
tx@Dict begin  tx@NodeDict begin {14.22636 156.49008 } false /N@pLabel
10 {InitPnode } /NodeScale {} def NewNode end  end
 0 4029
a 0 4029 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@pLabel known { /N@pLabel
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 0 4029 a -83 4028 a Fr(a.)0 4029 y
tx@Dict begin  PutEnd  end
 0 4029
a 0 4029 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@pMatrix known { /N@pMatrix
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 0 4029 a -11 4029 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 } false /N@pAf 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -11 4029 a -11 4029 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@pAf known { /N@pAf
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
-11 4029 a -317 4328 a
tx@Dict begin  tx@NodeDict begin {72.8 0.8 73.6 36.8 36.0 } false /N@nAf
16 {InitRnode } /NodeScale {} def NewNode end  end
 -317 4328 a 7 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.22  setgray  0. true 0.8 neg 0.8 neg
72.8 72.8 .5 Frame  gsave 0.8 SLW 0.22  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 294 4328 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { /N@nAf
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 294 4328 a 294 4328
a
tx@Dict begin  PutEnd  end
 294 4328 a -11 4029 a
tx@Dict begin  PutEnd  end
 -11 4029 a -11 4029 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 -11 4029
a -11 4029 a
tx@Dict begin  { 18.0 0.0 } PutCoor PutBegin  end
 -11 4029 a -11 4029 a
tx@Dict begin  { -9.0 3.0 } PutCoor PutBegin  end
 -11 4029 a -23 w Fq(1)-11
4029 y
tx@Dict begin  PutEnd  end
 -11 4029 a -11 4029 a
tx@Dict begin  PutEnd  end
 -11 4029 a -11 4029 a
tx@Dict begin  { 36.0 0.0 } PutCoor PutBegin  end
 -11
4029 a -11 4029 a
tx@Dict begin  { -9.0 3.0 } PutCoor PutBegin  end
 -11 4029 a -23 w Fq(2)-11 4029 y
tx@Dict begin  PutEnd  end
 -11
4029 a -11 4029 a
tx@Dict begin  PutEnd  end
 -11 4029 a -11 4029 a
tx@Dict begin  { 54.0 0.0 } PutCoor PutBegin  end
 -11 4029 a -11
4029 a
tx@Dict begin  { -9.0 3.0 } PutCoor PutBegin  end
 -11 4029 a -34 4028 a Fq(3)-11 4029 y
tx@Dict begin  PutEnd  end
 -11 4029
a -11 4029 a
tx@Dict begin  PutEnd  end
 -11 4029 a -11 4029 a
tx@Dict begin  { 72.0 0.0 } PutCoor PutBegin  end
 -11 4029 a -11 4029
a
tx@Dict begin  { -9.0 3.0 } PutCoor PutBegin  end
 -11 4029 a -23 w Fq(4)-11 4029 y
tx@Dict begin  PutEnd  end
 -11 4029 a -11 4029
a
tx@Dict begin  PutEnd  end
 -11 4029 a -11 4029 a
tx@Dict begin  PutEnd  end
 -11 4029 a -11 4029 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 3.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end } PutCoor PutBegin 
end
 -11 4029
a -109 4046 a Fo(A)-43 4060 y Fm(f)-11 4029 y
tx@Dict begin  PutEnd  end
 -11 4029
a -11 4029 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 -11 4029 a -11 4029 a
tx@Dict begin  { 18.0 -18.0 } PutCoor PutBegin  end
 -11 4029 a -11 4029
a
tx@Dict begin  { -9.0 9.0 } PutCoor PutBegin  end
 -11 4029 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray   0.1 true -6.30011 -6.30011
6.30011 6.30011 .5 Frame  gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinecap [  3.3  2.0 ] 2 DashLine  grestore end
 
@endspecial -11
4029 a
tx@Dict begin  PutEnd  end
 -11 4029 a -11 4029 a
tx@Dict begin  PutEnd  end
 -11 4029 a -11 4029 a
tx@Dict begin  PutEnd  end
 -11
4029 a -11 4029 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 -11 4029 a -11 4029 a
tx@Dict begin  { 36.0 -36.0 } PutCoor PutBegin  end
 -11 4029 a -11
4029 a
tx@Dict begin  { -9.0 9.0 } PutCoor PutBegin  end
 -11 4029 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray   0.1 true -6.30011 -6.30011
6.30011 6.30011 .5 Frame  gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinecap [  3.3  2.0 ] 2 DashLine  grestore end
 
@endspecial
-11 4029 a
tx@Dict begin  PutEnd  end
 -11 4029 a -11 4029 a
tx@Dict begin  PutEnd  end
 -11 4029 a -11 4029
a
tx@Dict begin  PutEnd  end
 -11 4029 a -11 4029 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 -11 4029 a -11 4029 a
tx@Dict begin  { 54.0 -54.0 } PutCoor PutBegin  end
 -11 4029
a -11 4029 a
tx@Dict begin  { -9.0 9.0 } PutCoor PutBegin  end
 -11 4029 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray   0.1 true -6.30011 -6.30011
6.30011 6.30011 .5 Frame  gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinecap [  3.3  2.0 ] 2 DashLine  grestore end
 
@endspecial
-11 4029 a
tx@Dict begin  PutEnd  end
 -11 4029 a -11 4029 a
tx@Dict begin  PutEnd  end
 -11 4029 a -11 4029
a
tx@Dict begin  PutEnd  end
 -11 4029 a -11 4029 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 -11 4029 a -11 4029 a
tx@Dict begin  { 72.0 -72.0 } PutCoor PutBegin  end
 -11 4029
a -11 4029 a
tx@Dict begin  { -9.0 9.0 } PutCoor PutBegin  end
 -11 4029 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray   0.1 true -6.30011 -6.30011
6.30011 6.30011 .5 Frame  gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinecap [  3.3  2.0 ] 2 DashLine  grestore end
 
@endspecial
-11 4029 a
tx@Dict begin  PutEnd  end
 -11 4029 a -11 4029 a
tx@Dict begin  PutEnd  end
 -11 4029 a -11 4029
a
tx@Dict begin  PutEnd  end
 -11 4029 a -11 4029 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 -11 4029 a -11 4029 a
tx@Dict begin  { 18.0 -18.0 } PutCoor PutBegin  end
 -11 4029
a -11 4029 a
tx@Dict begin  { -9.0 9.0 } PutCoor PutBegin  end
 -11 4029 a -41 4057 a Fl(\003)-11 4029 y
tx@Dict begin  PutEnd  end
-11 4029 a -11 4029 a
tx@Dict begin  PutEnd  end
 -11 4029 a -11 4029 a
tx@Dict begin  PutEnd  end
 -11 4029
a -11 4029 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 0.
/N@nAf load 0 GetEdge 0.0 0. AddOffset /N@nAf load GetCenter 3 -1 roll
add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin tx@NodeDict
/N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset /N@nAf
load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse end
exch pop } PutCoor PutBegin  end
 -11 4029 a -11 4029 a
tx@Dict begin  { 0.0 -9.0 } PutCoor PutBegin  end
 -11 4029 a -11 4029
a
tx@Dict begin  { 3.0 0.0 } PutCoor PutBegin  end
 -11 4029 a 5 4055 a Fr(\230)-56 b Fi(y)-11 4029 y
tx@Dict begin  PutEnd  end
 -11
4029 a -11 4029 a
tx@Dict begin  PutEnd  end
 -11 4029 a -11 4029 a
tx@Dict begin  PutEnd  end
 -11 4029 a 0
4029 a
tx@Dict begin  PutEnd  end
 0 4029 a 0 4029 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@pTree known { /N@pTree
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 0 4029 a 0 4029 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 } false /N@p4 10 {InitPnode
} /NodeScale {} def NewNode end  end
 0 4029 a 0
4029 a
tx@Dict begin  tx@NodeDict begin {39.83368 0.0 } false /N@p3 10 {InitPnode
} /NodeScale {} def NewNode end  end
 0 4029 a 0 4029 a
tx@Dict begin  tx@NodeDict begin {79.66736 0.0 } false /N@p2 10 {InitPnode
} /NodeScale {} def NewNode end  end
 0 4029 a 0 4029 a
tx@Dict begin  tx@NodeDict begin {119.50104 0.0 } false /N@p1 10 {InitPnode
} /NodeScale {} def NewNode end  end
 0 4029 a 0
4029 a
tx@Dict begin  tx@NodeDict begin {151.36809 0.0 } false /N@pref 10
{InitPnode } /NodeScale {} def NewNode end  end
 0 4029 a 0 4029 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@p4 known { /N@p4
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 0 4029 a -21 4057 a
tx@Dict begin  tx@NodeDict begin { 5.0  2 div 6.7799  0.0  add 2 div
2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@n4 11 {InitCnode
} /NodeScale {} def NewNode end  end
 -21 4057
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.0  2 div 6.7799  0.0
 add 2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add 0 360
arc closepath gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fh(4)0 4029
y
tx@Dict begin  PutEnd  end
 0 4029 a 0 4029 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@p3 known { /N@p3
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 0 4029 a -21 4057 a
tx@Dict begin  tx@NodeDict begin { 5.0  2 div 6.7799  0.09991  add
2 div 2 copy 0.09991  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@n3
11 {InitCnode } /NodeScale {} def NewNode end  end
 -21 4057 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.0  2 div 6.7799  0.09991
 add 2 div 2 copy 0.09991  sub 4 2 roll Pyth 3.0 add  CLW 2 div add
0 360 arc closepath gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial Fh(3)0 4029 y
tx@Dict begin  PutEnd  end
 0 4029 a 0 4029
a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@p2 known { /N@p2
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 0 4029 a -21 4057 a
tx@Dict begin  tx@NodeDict begin { 5.0  2 div 6.7799  0.0  add 2 div
2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@n2 11 {InitCnode
} /NodeScale {} def NewNode end  end
 -21 4057 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.0  2 div 6.7799  0.0
 add 2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add 0 360
arc closepath gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
@endspecial Fh(2)0 4029 y
tx@Dict begin  PutEnd  end
 0 4029 a 0 4029 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@p1 known { /N@p1
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 0 4029 a
-21 4057 a
tx@Dict begin  tx@NodeDict begin { 5.0  2 div 6.7799  0.0  add 2 div
2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@n1 11 {InitCnode
} /NodeScale {} def NewNode end  end
 -21 4057 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.0  2 div 6.7799  0.0
 add 2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add 0 360
arc closepath gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
Fh(1)0 4029 y
tx@Dict begin  PutEnd  end
 0 4029 a 0 4029 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@pref known { /N@pref
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 0 4029 a -18 4047 a
tx@Dict begin  tx@NodeDict begin {6.30493 2.03992 4.43994 2.21997 2.1325
} false /N@nref 16 {InitRnode } /NodeScale {} def NewNode end  end
 -18
4047 a 11 w Fh(\230)-39 b Fe(y)0 4029 y
tx@Dict begin  PutEnd  end
 0 4029 a 0 4029
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  /NCLW CLW
def tx@NodeDict begin 0.0 0.0 neg 2.0 2.0 0 0 /N@n1 /N@nref InitNC
{ NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2
ED /y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1.
1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos
mul y1 add ArrowInside pop pop } repeat } ifelse pop pop lineto pop
pop end  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 0 4029 a 0 4029 a
tx@Dict begin  PutEnd  end
 0 4029 a 0 4029 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@pTitle known { /N@pTitle
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 0 4029 a -322 w
Fq(Sequential)26 b(Model)0 4029 y
tx@Dict begin  PutEnd  end
 0 4029 a 0 4029 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 0
4029 a 0 4029 a
tx@Dict begin  { 54.0 -72.0 } PutCoor PutBegin  end
 0 4029 a 0 4029 a
tx@Dict begin  { -9.0 9.0 } PutCoor PutBegin  end
 0 4029 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray   0.15 true -6.30011 -6.30011
6.30011 6.30011 .5 Frame  gsave 0.5  setgray  0.15 .setopacityalpha
 fill  grestore gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 4029 a
tx@Dict begin  PutEnd  end
 0 4029 a 0 4029 a
tx@Dict begin  PutEnd  end
 0
4029 a 0 4029 a
tx@Dict begin  PutEnd  end
 0 4029 a 0 4029 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  /NCLW CLW
def tx@NodeDict begin 0.0 0.0 neg 2.0 2.0 0 0 /N@n4 /N@n3 InitNC {
NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED
/y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def
/ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5
 abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt {
exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add
ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0
1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add
ArrowInside pop pop } repeat } ifelse pop pop lineto pop pop end  }
if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore  grestore end
 0 4029 a 0 4029 a
tx@Dict begin  gsave STV CP T /ps@refangle {NAngle 90 add } def /ps@rot
{ } def grestore  end
 0
4029 a 0 4029 a
tx@Dict begin  tx@NodeDict begin /t 0.4 def LPut end PutBegin  end
 0 4029 a 0 4029 a
tx@Dict begin  { 2.0 tx@Dict /NCLW known { NCLW add } if 9.36172 7.539
1.76642 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 0 4029 a -39 4053 a
Fo(k)1 4067 y Fc(3)0 4029 y
tx@Dict begin  PutEnd  end
 0 4029 a 0 4029 a
tx@Dict begin PutEnd  end
 0 4029
a 0 4029 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 0 4029 a 0 4029 a
tx@Dict begin  { 54.0 -72.0 } PutCoor PutBegin  end
 0 4029 a 0 4029 a
tx@Dict begin  { -9.0 9.0 } PutCoor PutBegin  end
 0 4029
a -39 4053 a Fo(k)1 4067 y Fc(3)0 4029 y
tx@Dict begin  PutEnd  end
 0 4029 a 0 4029
a
tx@Dict begin  PutEnd  end
 0 4029 a 0 4029 a
tx@Dict begin  PutEnd  end
 0 4029 a 0 4029 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 0 4029 a 0 4029
a
tx@Dict begin  { 36.0 -54.0 } PutCoor PutBegin  end
 0 4029 a 0 4029 a
tx@Dict begin  { -9.0 9.0 } PutCoor PutBegin  end
 0 4029 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray   0.15 true -6.30011 -6.30011
6.30011 6.30011 .5 Frame  gsave 0.5  setgray  0.15 .setopacityalpha
 fill  grestore gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
@endspecial 0 4029 a
tx@Dict begin  PutEnd  end
 0 4029 a 0 4029 a
tx@Dict begin  PutEnd  end
 0 4029 a 0 4029
a
tx@Dict begin  PutEnd  end
 0 4029 a 0 4029 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  /NCLW CLW
def tx@NodeDict begin 0.0 0.0 neg 2.0 2.0 0 0 /N@n3 /N@n2 InitNC {
NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED
/y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def
/ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5
 abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt {
exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add
ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0
1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add
ArrowInside pop pop } repeat } ifelse pop pop lineto pop pop end  }
if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore  grestore end
 0 4029 a 0 4029 a
tx@Dict begin  gsave STV CP T /ps@refangle {NAngle 90 add } def /ps@rot
{ } def grestore  end
 0 4029 a 0 4029
a
tx@Dict begin  tx@NodeDict begin /t 0.4 def LPut end PutBegin  end
 0 4029 a 0 4029 a
tx@Dict begin  { 2.0 tx@Dict /NCLW known { NCLW add } if 9.36172 7.539
1.64249 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 0 4029 a -39 4054 a Fo(k)1 4068 y
Fc(2)0 4029 y
tx@Dict begin  PutEnd  end
 0 4029 a 0 4029 a
tx@Dict begin PutEnd  end
 0 4029 a 0 4029 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 0 4029
a 0 4029 a
tx@Dict begin  { 36.0 -54.0 } PutCoor PutBegin  end
 0 4029 a 0 4029 a
tx@Dict begin  { -9.0 9.0 } PutCoor PutBegin  end
 0 4029 a -39 4054 a Fo(k)1
4068 y Fc(2)0 4029 y
tx@Dict begin  PutEnd  end
 0 4029 a 0 4029 a
tx@Dict begin  PutEnd  end
 0 4029 a 0 4029
a
tx@Dict begin  PutEnd  end
 0 4029 a 0 4029 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 0 4029 a 0 4029 a
tx@Dict begin  { 18.0 -36.0 } PutCoor PutBegin  end
 0 4029 a 0 4029
a
tx@Dict begin  { -9.0 9.0 } PutCoor PutBegin  end
 0 4029 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray   0.15 true -6.30011 -6.30011
6.30011 6.30011 .5 Frame  gsave 0.5  setgray  0.15 .setopacityalpha
 fill  grestore gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 4029
a
tx@Dict begin  PutEnd  end
 0 4029 a 0 4029 a
tx@Dict begin  PutEnd  end
 0 4029 a 0 4029 a
tx@Dict begin  PutEnd  end
 0 4029 a 0 4029
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  /NCLW CLW
def tx@NodeDict begin 0.0 0.0 neg 2.0 2.0 0 0 /N@n2 /N@n1 InitNC {
NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED
/y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def
/ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5
 abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt {
exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add
ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0
1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add
ArrowInside pop pop } repeat } ifelse pop pop lineto pop pop end  }
if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore  grestore end
 0 4029 a 0 4029 a
tx@Dict begin  gsave STV CP T /ps@refangle {NAngle 90 add } def /ps@rot
{ } def grestore  end
 0 4029 a 0 4029 a
tx@Dict begin  tx@NodeDict begin /t 0.4 def LPut end PutBegin  end
 0 4029 a 0 4029
a
tx@Dict begin  { 2.0 tx@Dict /NCLW known { NCLW add } if 9.36172 7.539
1.64249 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 0 4029 a -39 4054 a Fo(k)1 4068 y Fc(1)0 4029 y
tx@Dict begin  PutEnd  end
 0 4029
a 0 4029 a
tx@Dict begin PutEnd  end
 0 4029 a 0 4029 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 0 4029 a 0 4029 a
tx@Dict begin  { 18.0 -36.0 } PutCoor PutBegin  end
 0 4029
a 0 4029 a
tx@Dict begin  { -9.0 9.0 } PutCoor PutBegin  end
 0 4029 a -39 4054 a Fo(k)1 4068 y Fc(1)0 4029
y
tx@Dict begin  PutEnd  end
 0 4029 a 0 4029 a
tx@Dict begin  PutEnd  end
 0 4029 a 0 4029 a
tx@Dict begin  PutEnd  end
 0 4029 a 0 2612
a
tx@Dict begin  PutEnd  end
 0 2612 a 0 2612 a
tx@Dict begin  { 0.0 0.0 } PutCoor PutBegin  end
 0 2612 a 0 2553 a
tx@Dict begin  tx@NodeDict begin {85.35823 92.4714 } false /N@pMatrix
10 {InitPnode } /NodeScale {} def NewNode end  end
 0 2553 a 0 2553
a
tx@Dict begin  tx@NodeDict begin {85.35823 41.25638 } false /N@pTree
10 {InitPnode } /NodeScale {} def NewNode end  end
 0 2553 a 0 2553 a
tx@Dict begin  tx@NodeDict begin {85.35823 149.37689 } false /N@pTitle
10 {InitPnode } /NodeScale {} def NewNode end  end
 0 2553 a 0 2553 a
tx@Dict begin  tx@NodeDict begin {14.22636 149.37689 } false /N@pLabel
10 {InitPnode } /NodeScale {} def NewNode end  end
 0 2553 a 0 2553
a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@pLabel known { /N@pLabel
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 0 2553 a -85 2552 a Fr(b)-5 b(.)0 2553 y
tx@Dict begin  PutEnd  end
 0 2553 a 0
2553 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@pMatrix known { /N@pMatrix
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 0 2553 a -11 2553 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 } false /N@pAf 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -11 2553 a -11 2553 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@pAf known { /N@pAf
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 -11
2553 a -317 2852 a
tx@Dict begin  tx@NodeDict begin {72.8 0.8 73.6 36.8 36.0 } false /N@nAf
16 {InitRnode } /NodeScale {} def NewNode end  end
 -317 2852 a 7 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.22  setgray  0. true 0.8 neg 0.8 neg
72.8 72.8 .5 Frame  gsave 0.8 SLW 0.22  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
@endspecial 294 2852 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { /N@nAf
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 294 2852 a 294 2852 a
tx@Dict begin  PutEnd  end
 294 2852
a -11 2553 a
tx@Dict begin  PutEnd  end
 -11 2553 a -11 2553 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 -11 2553 a -11 2553
a
tx@Dict begin  { 18.0 0.0 } PutCoor PutBegin  end
 -11 2553 a -11 2553 a
tx@Dict begin  { -9.0 3.0 } PutCoor PutBegin  end
 -11 2553 a -23 w Fq(1)-11 2553
y
tx@Dict begin  PutEnd  end
 -11 2553 a -11 2553 a
tx@Dict begin  PutEnd  end
 -11 2553 a -11 2553 a
tx@Dict begin  { 36.0 0.0 } PutCoor PutBegin  end
 -11 2553
a -11 2553 a
tx@Dict begin  { -9.0 3.0 } PutCoor PutBegin  end
 -11 2553 a -23 w Fq(2)-11 2553 y
tx@Dict begin  PutEnd  end
 -11 2553
a -11 2553 a
tx@Dict begin  PutEnd  end
 -11 2553 a -11 2553 a
tx@Dict begin  { 54.0 0.0 } PutCoor PutBegin  end
 -11 2553 a -11 2553
a
tx@Dict begin  { -9.0 3.0 } PutCoor PutBegin  end
 -11 2553 a -34 2552 a Fq(3)-11 2553 y
tx@Dict begin  PutEnd  end
 -11 2553 a -11
2553 a
tx@Dict begin  PutEnd  end
 -11 2553 a -11 2553 a
tx@Dict begin  { 72.0 0.0 } PutCoor PutBegin  end
 -11 2553 a -11 2553 a
tx@Dict begin  { -9.0 3.0 } PutCoor PutBegin  end
 -11
2553 a -23 w Fq(4)-11 2553 y
tx@Dict begin  PutEnd  end
 -11 2553 a -11 2553 a
tx@Dict begin  PutEnd  end
 -11
2553 a -11 2553 a
tx@Dict begin  PutEnd  end
 -11 2553 a -11 2553 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 -11 2553 a -11
2553 a
tx@Dict begin  { 18.0 -18.0 } PutCoor PutBegin  end
 -11 2553 a -11 2553 a
tx@Dict begin  { -9.0 9.0 } PutCoor PutBegin  end
 -11 2553 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray   0.1 true -6.30011 -6.30011
6.30011 6.30011 .5 Frame  gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinecap [  3.3  2.0 ] 2 DashLine  grestore end
 
@endspecial -11 2553 a
tx@Dict begin  PutEnd  end
 -11 2553 a -11 2553
a
tx@Dict begin  PutEnd  end
 -11 2553 a -11 2553 a
tx@Dict begin  PutEnd  end
 -11 2553 a -11 2553 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 -11 2553
a -11 2553 a
tx@Dict begin  { 36.0 -36.0 } PutCoor PutBegin  end
 -11 2553 a -11 2553 a
tx@Dict begin  { -9.0 9.0 } PutCoor PutBegin  end
 -11 2553 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray   0.1 true -6.30011 -6.30011
6.30011 6.30011 .5 Frame  gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinecap [  3.3  2.0 ] 2 DashLine  grestore end
 
@endspecial -11 2553 a
tx@Dict begin  PutEnd  end
 -11 2553 a -11 2553
a
tx@Dict begin  PutEnd  end
 -11 2553 a -11 2553 a
tx@Dict begin  PutEnd  end
 -11 2553 a -11 2553 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 -11 2553
a -11 2553 a
tx@Dict begin  { 54.0 -54.0 } PutCoor PutBegin  end
 -11 2553 a -11 2553 a
tx@Dict begin  { -9.0 9.0 } PutCoor PutBegin  end
 -11 2553 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray   0.1 true -6.30011 -6.30011
6.30011 6.30011 .5 Frame  gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinecap [  3.3  2.0 ] 2 DashLine  grestore end
 
@endspecial -11 2553 a
tx@Dict begin  PutEnd  end
 -11 2553 a -11 2553
a
tx@Dict begin  PutEnd  end
 -11 2553 a -11 2553 a
tx@Dict begin  PutEnd  end
 -11 2553 a -11 2553 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 -11 2553
a -11 2553 a
tx@Dict begin  { 72.0 -72.0 } PutCoor PutBegin  end
 -11 2553 a -11 2553 a
tx@Dict begin  { -9.0 9.0 } PutCoor PutBegin  end
 -11 2553 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray   0.1 true -6.30011 -6.30011
6.30011 6.30011 .5 Frame  gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinecap [  3.3  2.0 ] 2 DashLine  grestore end
 
@endspecial -11 2553 a
tx@Dict begin  PutEnd  end
 -11 2553 a -11 2553
a
tx@Dict begin  PutEnd  end
 -11 2553 a -11 2553 a
tx@Dict begin  PutEnd  end
 -11 2553 a -11 2553 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 3.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end } PutCoor PutBegin 
end
 -11 2553
a -109 2569 a Fo(A)-43 2583 y Fm(f)-11 2553 y
tx@Dict begin  PutEnd  end
 -11 2553
a -11 2553 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 -11 2553 a -11 2553 a
tx@Dict begin  { 18.0 -18.0 } PutCoor PutBegin  end
 -11 2553 a -11 2553
a
tx@Dict begin  { -9.0 9.0 } PutCoor PutBegin  end
 -11 2553 a -41 2580 a Fl(\003)-11 2553 y
tx@Dict begin  PutEnd  end
 -11 2553 a
-11 2553 a
tx@Dict begin  PutEnd  end
 -11 2553 a -11 2553 a
tx@Dict begin  PutEnd  end
 -11 2553 a -11 2553
a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 0.
/N@nAf load 0 GetEdge 0.0 0. AddOffset /N@nAf load GetCenter 3 -1 roll
add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin tx@NodeDict
/N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset /N@nAf
load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse end
exch pop } PutCoor PutBegin  end
 -11 2553 a -11 2553 a
tx@Dict begin  { 0.0 -9.0 } PutCoor PutBegin  end
 -11 2553 a -11 2553 a
tx@Dict begin  { 3.0 0.0 } PutCoor PutBegin  end
 -11 2553
a 5 2578 a Fr(\230)-56 b Fi(y)-11 2553 y
tx@Dict begin  PutEnd  end
 -11 2553 a -11
2553 a
tx@Dict begin  PutEnd  end
 -11 2553 a -11 2553 a
tx@Dict begin  PutEnd  end
 -11 2553 a 0 2553 a
tx@Dict begin  PutEnd  end
 0 2553
a 0 2553 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@pTree known { /N@pTree
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 0 2553 a 0 2553 a
tx@Dict begin  tx@NodeDict begin {48.36958 -31.86705 } false /N@p4
10 {InitPnode } /NodeScale {} def NewNode end  end
 0 2553 a 0 2553 a
tx@Dict begin  tx@NodeDict begin {0.0 -39.83368 } false /N@p3 10 {InitPnode
} /NodeScale {} def NewNode end  end
 0 2553
a 0 2553 a
tx@Dict begin  tx@NodeDict begin {-48.36958 -31.86705 } false /N@p2
10 {InitPnode } /NodeScale {} def NewNode end  end
 0 2553 a 0 2553 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 } false /N@p1 10 {InitPnode
} /NodeScale {} def NewNode end  end
 0 2553 a 0 2553 a
tx@Dict begin  tx@NodeDict begin {62.8806 0.0 } false /N@pref 10 {InitPnode
} /NodeScale {} def NewNode end  end
 0 2553
a 0 2553 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@p4 known { /N@p4
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 0 2553 a -23 2583 a
tx@Dict begin  tx@NodeDict begin { 5.47499  2 div 7.424  0.0  add 2
div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@n4 11 {InitCnode
} /NodeScale {} def NewNode end  end
 -23 2583 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.47499  2 div 7.424  0.0
 add 2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add 0 360
arc closepath gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fq(4)0 2553 y
tx@Dict begin  PutEnd  end
 0 2553 a 0 2553
a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@p3 known { /N@p3
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 0 2553 a -23 2583 a
tx@Dict begin  tx@NodeDict begin { 5.47499  2 div 7.424  0.1094  add
2 div 2 copy 0.1094  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@n3
11 {InitCnode } /NodeScale {} def NewNode end  end
 -23 2583 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.47499  2 div 7.424  0.1094
 add 2 div 2 copy 0.1094  sub 4 2 roll Pyth 3.0 add  CLW 2 div add
0 360 arc closepath gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
@endspecial Fq(3)0 2553 y
tx@Dict begin  PutEnd  end
 0 2553 a 0 2553 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@p2 known { /N@p2
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 0 2553 a
-23 2583 a
tx@Dict begin  tx@NodeDict begin { 5.47499  2 div 7.424  0.0  add 2
div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@n2 11 {InitCnode
} /NodeScale {} def NewNode end  end
 -23 2583 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.47499  2 div 7.424  0.0
 add 2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add 0 360
arc closepath gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
Fq(2)0 2553 y
tx@Dict begin  PutEnd  end
 0 2553 a 0 2553 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@p1 known { /N@p1
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 0 2553 a -23 2583 a
tx@Dict begin  tx@NodeDict begin { 5.47499  2 div 7.424  0.0  add 2
div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@n1 11 {InitCnode
} /NodeScale {} def NewNode end  end
 -23
2583 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.47499  2 div 7.424  0.0
 add 2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add 0 360
arc closepath gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fq(1)0
2553 y
tx@Dict begin  PutEnd  end
 0 2553 a 0 2553 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@pref known { /N@pref
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 0 2553 a -20 2572 a
tx@Dict begin  tx@NodeDict begin {6.90388 2.2337 4.86172 2.43086 2.33508
} false /N@nref 16 {InitRnode } /NodeScale {} def NewNode end  end
 -20 2572
a 12 w Fq(\230)-42 b Fo(y)0 2553 y
tx@Dict begin  PutEnd  end
 0 2553 a 0 2553 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  /NCLW CLW
def tx@NodeDict begin 0.0 0.0 neg 2.0 2.0 0 0 /N@n1 /N@nref InitNC
{ NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2
ED /y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1.
1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos
mul y1 add ArrowInside pop pop } repeat } ifelse pop pop lineto pop
pop end  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore  grestore end
0 2553 a 0 2553 a
tx@Dict begin  PutEnd  end
 0 2553 a 0 2553 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@pTitle known { /N@pTitle
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 0 2553 a -287 2552
a Fq(Additi)n(v)o(e)24 b(Model)0 2553 y
tx@Dict begin  PutEnd  end
 0 2553 a 0 2553
a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 0 2553 a 0 2553 a
tx@Dict begin  { 18.0 -72.0 } PutCoor PutBegin  end
 0 2553 a 0 2553 a
tx@Dict begin  { -9.0 9.0 } PutCoor PutBegin  end
 0 2553 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray   0.15 true -6.30011 -6.30011
6.30011 6.30011 .5 Frame  gsave 0.5  setgray  0.15 .setopacityalpha
 fill  grestore gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 2553 a
tx@Dict begin  PutEnd  end
 0 2553 a 0 2553 a
tx@Dict begin  PutEnd  end
 0
2553 a 0 2553 a
tx@Dict begin  PutEnd  end
 0 2553 a 0 2553 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  /NCLW CLW
def tx@NodeDict begin 0.0 0.0 neg 2.0 2.0 0 0 /N@n4 /N@n1 InitNC {
NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED
/y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def
/ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5
 abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt {
exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add
ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0
1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add
ArrowInside pop pop } repeat } ifelse pop pop lineto pop pop end  }
if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore  grestore end
 0 2553 a 0 2553 a
tx@Dict begin  gsave STV CP T /ps@refangle {NAngle 90 add } def /ps@rot
{ } def grestore  end
 0
2553 a 0 2553 a
tx@Dict begin  tx@NodeDict begin /t 0.4 def LPut end PutBegin  end
 0 2553 a 0 2553 a
tx@Dict begin  { 2.0 tx@Dict /NCLW known { NCLW add } if 9.36172 7.539
1.76642 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 0 2553 a -39 2577 a
Fo(k)1 2591 y Fc(3)0 2553 y
tx@Dict begin  PutEnd  end
 0 2553 a 0 2553 a
tx@Dict begin PutEnd  end
 0 2553
a 0 2553 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 0 2553 a 0 2553 a
tx@Dict begin  { 18.0 -72.0 } PutCoor PutBegin  end
 0 2553 a 0 2553 a
tx@Dict begin  { -9.0 9.0 } PutCoor PutBegin  end
 0 2553
a -39 2577 a Fo(k)1 2591 y Fc(3)0 2553 y
tx@Dict begin  PutEnd  end
 0 2553 a 0 2553
a
tx@Dict begin  PutEnd  end
 0 2553 a 0 2553 a
tx@Dict begin  PutEnd  end
 0 2553 a 0 2553 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 0 2553 a 0 2553
a
tx@Dict begin  { 18.0 -54.0 } PutCoor PutBegin  end
 0 2553 a 0 2553 a
tx@Dict begin  { -9.0 9.0 } PutCoor PutBegin  end
 0 2553 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray   0.15 true -6.30011 -6.30011
6.30011 6.30011 .5 Frame  gsave 0.5  setgray  0.15 .setopacityalpha
 fill  grestore gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
@endspecial 0 2553 a
tx@Dict begin  PutEnd  end
 0 2553 a 0 2553 a
tx@Dict begin  PutEnd  end
 0 2553 a 0 2553
a
tx@Dict begin  PutEnd  end
 0 2553 a 0 2553 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  /NCLW CLW
def tx@NodeDict begin 0.0 0.0 neg 2.0 2.0 0 0 /N@n3 /N@n1 InitNC {
NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED
/y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def
/ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5
 abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt {
exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add
ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0
1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add
ArrowInside pop pop } repeat } ifelse pop pop lineto pop pop end  }
if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore  grestore end
 0 2553 a 0 2553 a
tx@Dict begin  gsave STV CP T /ps@refangle {NAngle 90 add } def /ps@rot
{ } def grestore  end
 0 2553 a 0 2553
a
tx@Dict begin  tx@NodeDict begin /t 0.4 def LPut end PutBegin  end
 0 2553 a 0 2553 a
tx@Dict begin  { 2.0 tx@Dict /NCLW known { NCLW add } if 9.36172 7.539
1.64249 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 0 2553 a -39 2577 a Fo(k)1 2591 y
Fc(2)0 2553 y
tx@Dict begin  PutEnd  end
 0 2553 a 0 2553 a
tx@Dict begin PutEnd  end
 0 2553 a 0 2553 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 0 2553
a 0 2553 a
tx@Dict begin  { 18.0 -54.0 } PutCoor PutBegin  end
 0 2553 a 0 2553 a
tx@Dict begin  { -9.0 9.0 } PutCoor PutBegin  end
 0 2553 a -39 2577 a Fo(k)1
2591 y Fc(2)0 2553 y
tx@Dict begin  PutEnd  end
 0 2553 a 0 2553 a
tx@Dict begin  PutEnd  end
 0 2553 a 0 2553
a
tx@Dict begin  PutEnd  end
 0 2553 a 0 2553 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 0 2553 a 0 2553 a
tx@Dict begin  { 18.0 -36.0 } PutCoor PutBegin  end
 0 2553 a 0 2553
a
tx@Dict begin  { -9.0 9.0 } PutCoor PutBegin  end
 0 2553 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray   0.15 true -6.30011 -6.30011
6.30011 6.30011 .5 Frame  gsave 0.5  setgray  0.15 .setopacityalpha
 fill  grestore gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 2553
a
tx@Dict begin  PutEnd  end
 0 2553 a 0 2553 a
tx@Dict begin  PutEnd  end
 0 2553 a 0 2553 a
tx@Dict begin  PutEnd  end
 0 2553 a 0 2553
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  /NCLW CLW
def tx@NodeDict begin 0.0 0.0 neg 2.0 2.0 0 0 /N@n2 /N@n1 InitNC {
NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED
/y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def
/ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5
 abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt {
exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add
ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0
1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add
ArrowInside pop pop } repeat } ifelse pop pop lineto pop pop end  }
if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore  grestore end
 0 2553 a 0 2553 a
tx@Dict begin  gsave STV CP T /ps@refangle {NAngle 90 add } def /ps@rot
{ } def grestore  end
 0 2553 a 0 2553 a
tx@Dict begin  tx@NodeDict begin /t 0.4 def LPut end PutBegin  end
 0 2553 a 0 2553
a
tx@Dict begin  { 2.0 tx@Dict /NCLW known { NCLW add } if 9.36172 7.539
1.64249 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 0 2553 a -39 2577 a Fo(k)1 2591 y Fc(1)0 2553 y
tx@Dict begin  PutEnd  end
 0 2553
a 0 2553 a
tx@Dict begin PutEnd  end
 0 2553 a 0 2553 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 0 2553 a 0 2553 a
tx@Dict begin  { 18.0 -36.0 } PutCoor PutBegin  end
 0 2553
a 0 2553 a
tx@Dict begin  { -9.0 9.0 } PutCoor PutBegin  end
 0 2553 a -39 2577 a Fo(k)1 2591 y Fc(1)0 2553
y
tx@Dict begin  PutEnd  end
 0 2553 a 0 2553 a
tx@Dict begin  PutEnd  end
 0 2553 a 0 2553 a
tx@Dict begin  PutEnd  end
 0 2553 a 0 2612
a
tx@Dict begin  PutEnd  end
 0 2612 a 0 2612 a
tx@Dict begin  { 398.33841 0.0 } PutCoor PutBegin  end
 0 2612 a -1654 2375 a
tx@Dict begin  tx@NodeDict begin {106.69778 189.21056 } false /N@pMatrix
10 {InitPnode } /NodeScale {} def NewNode end  end
 -1654 2375
a -1654 2375 a
tx@Dict begin  { 190.63329 7.11317 } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  tx@NodeDict begin {0.0 71.13185 } false /N@pTreeA 10
{InitPnode } /NodeScale {} def NewNode end  end
 -1654 2375 a
-1654 2375 a
tx@Dict begin  tx@NodeDict begin {0.0 14.22636 } false /N@pTreeB 10
{InitPnode } /NodeScale {} def NewNode end  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  tx@NodeDict begin {0.0 -21.33955 } false /N@pTreeC 10
{InitPnode } /NodeScale {} def NewNode end  end
 -1654 2375 a -1654
2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  tx@NodeDict begin {106.69778 270.30106 } false /N@pTitle
10 {InitPnode } /NodeScale {} def NewNode end  end
 -1654 2375 a -1654 2375
a
tx@Dict begin  tx@NodeDict begin {42.67911 270.30106 } false /N@pLabel
10 {InitPnode } /NodeScale {} def NewNode end  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@pLabel known { /N@pLabel
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 -1654 2375 a -1737 2374 a
Fr(c.)-1654 2375 y
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@pMatrix known { /N@pMatrix
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 -1654 2375
a -1654 2375 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 } false /N@pAf 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@pAf known { /N@pAf
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 -1654 2375 a
-2183 2899 a
tx@Dict begin  tx@NodeDict begin {126.8 0.8 127.6 63.8 63.0 } false
/N@nAf 16 {InitRnode } /NodeScale {} def NewNode end  end
 -2183 2899 a 7 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.22  setgray  0. true 0.8 neg 0.8 neg
126.8 126.8 .5 Frame  gsave 0.8 SLW 0.22  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
@endspecial -1124 2899 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { /N@nAf
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 -1124 2899 a -1124 2899 a
tx@Dict begin  PutEnd  end
 -1124
2899 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 -1654 2375
a -1654 2375 a
tx@Dict begin  { 14.0 0.0 } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { -7.0 3.0 } PutCoor PutBegin  end
 -1654 2375 a
-17 w Fc(1)-1654 2375 y
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654
2375 a -1654 2375 a
tx@Dict begin  { 28.0 0.0 } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { -7.0 3.0 } PutCoor PutBegin  end
 -1654 2375
a -17 w Fc(2)-1654 2375 y
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654
2375 a -1654 2375 a
tx@Dict begin  { 42.0 0.0 } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { -7.0 3.0 } PutCoor PutBegin  end
 -1654 2375
a -1671 2374 a Fc(3)-1654 2375 y
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375
a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { 56.0 0.0 } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { -7.0 3.0 } PutCoor PutBegin  end
-1654 2375 a -17 w Fc(4)-1654 2375 y
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654
2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { 70.0 0.0 } PutCoor PutBegin  end
 -1654 2375 a -1654 2375
a
tx@Dict begin  { -7.0 3.0 } PutCoor PutBegin  end
 -1654 2375 a -1671 2374 a Fc(5)-1654 2375 y
tx@Dict begin  PutEnd  end
 -1654 2375
a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { 84.0 0.0 } PutCoor PutBegin  end
 -1654 2375 a
-1654 2375 a
tx@Dict begin  { -7.0 3.0 } PutCoor PutBegin  end
 -1654 2375 a -1671 2374 a Fc(6)-1654 2375
y
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { 98.0 0.0 } PutCoor PutBegin  end
-1654 2375 a -1654 2375 a
tx@Dict begin  { -7.0 3.0 } PutCoor PutBegin  end
 -1654 2375 a -1671 2374 a Fc(7)-1654
2375 y
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375
a
tx@Dict begin  { 112.0 0.0 } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { -7.0 3.0 } PutCoor PutBegin  end
 -1654 2375 a -1671 2374 a
Fc(8)-1654 2375 y
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375
a -1654 2375 a
tx@Dict begin  { 126.0 0.0 } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { -7.0 3.0 } PutCoor PutBegin  end
 -1654 2375 a
-1671 2374 a Fc(9)-1654 2375 y
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375
a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
-1654 2375 a -1654 2375 a
tx@Dict begin  { 14.0 -14.0 } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { -7.0 7.0 } PutCoor PutBegin  end
 -1654
2375 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray   0.1 true -4.90009 -4.90009
4.90009 4.90009 .5 Frame  gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinecap [  3.3  2.0 ] 2 DashLine  grestore end
 
@endspecial -1654 2375
a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
-1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { 28.0 -28.0 } PutCoor PutBegin  end
 -1654
2375 a -1654 2375 a
tx@Dict begin  { -7.0 7.0 } PutCoor PutBegin  end
 -1654 2375 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray   0.1 true -4.90009 -4.90009
4.90009 4.90009 .5 Frame  gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinecap [  3.3  2.0 ] 2 DashLine  grestore end
@endspecial -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654
2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 -1654 2375
a -1654 2375 a
tx@Dict begin  { 42.0 -42.0 } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { -7.0 7.0 } PutCoor PutBegin  end
 -1654 2375 a
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray   0.1 true -4.90009 -4.90009
4.90009 4.90009 .5 Frame  gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinecap [  3.3  2.0 ] 2 DashLine  grestore end
 
@endspecial -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654
2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375
a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { 56.0 -56.0 } PutCoor PutBegin  end
 -1654 2375 a
-1654 2375 a
tx@Dict begin  { -7.0 7.0 } PutCoor PutBegin  end
 -1654 2375 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray   0.1 true -4.90009 -4.90009
4.90009 4.90009 .5 Frame  gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinecap [  3.3  2.0 ] 2 DashLine  grestore end
 
@endspecial
-1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654
2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 -1654 2375 a -1654 2375
a
tx@Dict begin  { 70.0 -70.0 } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { -7.0 7.0 } PutCoor PutBegin  end
 -1654 2375 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray   0.1 true -4.90009 -4.90009
4.90009 4.90009 .5 Frame  gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinecap [  3.3  2.0 ] 2 DashLine  grestore end
 
@endspecial -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654
2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375
a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { 84.0 -84.0 } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { -7.0 7.0 } PutCoor PutBegin  end
-1654 2375 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray   0.1 true -4.90009 -4.90009
4.90009 4.90009 .5 Frame  gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinecap [  3.3  2.0 ] 2 DashLine  grestore end
 
@endspecial -1654
2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375
a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { 98.0 -98.0 } PutCoor PutBegin  end
-1654 2375 a -1654 2375 a
tx@Dict begin  { -7.0 7.0 } PutCoor PutBegin  end
 -1654 2375 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray   0.1 true -4.90009 -4.90009
4.90009 4.90009 .5 Frame  gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinecap [  3.3  2.0 ] 2 DashLine  grestore end
 
@endspecial -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654
2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375
a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { 112.0 -112.0 } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { -7.0 7.0 } PutCoor PutBegin  end
-1654 2375 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray   0.1 true -4.90009 -4.90009
4.90009 4.90009 .5 Frame  gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinecap [  3.3  2.0 ] 2 DashLine  grestore end
 
@endspecial -1654
2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375
a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { 126.0 -126.0 } PutCoor PutBegin  end
-1654 2375 a -1654 2375 a
tx@Dict begin  { -7.0 7.0 } PutCoor PutBegin  end
 -1654 2375 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray   0.1 true -4.90009 -4.90009
4.90009 4.90009 .5 Frame  gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinecap [  3.3  2.0 ] 2 DashLine  grestore end
 
@endspecial -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654
2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375
a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 3.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end } PutCoor PutBegin 
end
 -1654 2375 a -1751 2392 a Fo(A)-1685 2406 y Fm(f)-1654
2375 y
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 -1654 2375 a -1654 2375
a
tx@Dict begin  { 14.0 -14.0 } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { -7.0 7.0 } PutCoor PutBegin  end
 -1654 2375 a -1677 2397 a
Fa(\003)-1654 2375 y
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654
2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 0.
/N@nAf load 0 GetEdge 0.0 0. AddOffset /N@nAf load GetCenter 3 -1 roll
add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin tx@NodeDict
/N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset /N@nAf
load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse end
exch pop } PutCoor PutBegin  end
 -1654 2375
a -1654 2375 a
tx@Dict begin  { 0.0 -7.0 } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { 3.0 0.0 } PutCoor PutBegin  end
 -1654 2375 a
-1642 2395 a Fq(\230)-42 b Fo(y)-1654 2375 y
tx@Dict begin  PutEnd  end
 -1654 2375
a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a
-1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { 98.0 -98.0 } PutCoor PutBegin  end
 -1654 2375 a -1654
2375 a
tx@Dict begin  { -7.0 7.0 } PutCoor PutBegin  end
 -1654 2375 a -1835 2550 a
tx@Dict begin  tx@NodeDict begin {42.8 0.8 43.6 21.8 21.0 } false /N@nFrag
16 {InitRnode } /NodeScale {} def NewNode end  end
 -1835 2550 a 7 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.22  setgray  0. true 0.8 neg 0.8 neg
42.8 42.8 .5 Frame  gsave 0.8 SLW 0.22  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -1473 2550 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nFrag known { /N@nFrag
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 -1473 2550 a -1473
2550 a
tx@Dict begin  PutEnd  end
 -1473 2550 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375
a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nFrag known { 0.0
180. /N@nFrag load 0 GetEdge 0.0 180. AddOffset /N@nFrag load GetCenter
3 -1 roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict
begin tx@NodeDict /N@nFrag known { 0.0 90. /N@nFrag load 0 GetEdge
0.0 90. AddOffset /N@nFrag load GetCenter 3 -1 roll add 3 1 roll add
exch } { CP } ifelse end exch pop } PutCoor PutBegin  end
-1654 2375 a -1654 2375 a
tx@Dict begin  { 14.0 -14.0 } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { -7.0 7.0 } PutCoor PutBegin  end
 -1654
2375 a -1677 2397 a Fa(\003)-1654 2375 y
tx@Dict begin  PutEnd  end
 -1654 2375 a
-1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654
2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nFrag known { 0.0
0. /N@nFrag load 0 GetEdge 0.0 0. AddOffset /N@nFrag load GetCenter
3 -1 roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict
begin tx@NodeDict /N@nFrag known { 0.0 90. /N@nFrag load 0 GetEdge
0.0 90. AddOffset /N@nFrag load GetCenter 3 -1 roll add 3 1 roll add
exch } { CP } ifelse end exch pop } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { 0.0 -7.0 } PutCoor PutBegin  end
 -1654 2375 a -1654 2375
a
tx@Dict begin  { 3.0 0.0 } PutCoor PutBegin  end
 -1654 2375 a -1537 2385 a Fo(y)-1497 2399 y Fc(0)-1654
2375 y
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375
a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { 126.0 -126.0 } PutCoor PutBegin  end
-1654 2375 a -1654 2375 a
tx@Dict begin  { -7.0 7.0 } PutCoor PutBegin  end
 -1654 2375 a -1719 2434 a
tx@Dict begin  tx@NodeDict begin {14.8 0.8 15.6 7.8 7.0 } false /N@nCutoff
16 {InitRnode } /NodeScale {} def NewNode end  end
 -1719
2434 a 7 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.22  setgray  0. true 0.8 neg 0.8 neg
14.8 14.8 .5 Frame  gsave 0.8 SLW 0.22  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -1589
2434 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nCutoff known { /N@nCutoff
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 -1589 2434 a -1589 2434 a
tx@Dict begin  PutEnd  end
 -1589 2434 a -1654 2375
a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
-1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nCutoff known { 0.0
180. /N@nCutoff load 0 GetEdge 0.0 180. AddOffset /N@nCutoff load GetCenter
3 -1 roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict
begin tx@NodeDict /N@nCutoff known { 0.0 90. /N@nCutoff load 0 GetEdge
0.0 90. AddOffset /N@nCutoff load GetCenter 3 -1 roll add 3 1 roll
add exch } { CP } ifelse end exch pop } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { 14.0 -14.0 } PutCoor PutBegin  end
 -1654
2375 a -1654 2375 a
tx@Dict begin  { -7.0 7.0 } PutCoor PutBegin  end
 -1654 2375 a -1677 2397 a Fa(\003)-1654
2375 y
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375
a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nCutoff known { 0.0
0. /N@nCutoff load 0 GetEdge 0.0 0. AddOffset /N@nCutoff load GetCenter
3 -1 roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict
begin tx@NodeDict /N@nCutoff known { 0.0 90. /N@nCutoff load 0 GetEdge
0.0 90. AddOffset /N@nCutoff load GetCenter 3 -1 roll add 3 1 roll
add exch } { CP } ifelse end exch pop } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { 0.0 -7.0 } PutCoor PutBegin  end
-1654 2375 a -1654 2375 a
tx@Dict begin  { 3.0 0.0 } PutCoor PutBegin  end
 -1654 2375 a 10 x Fo(y)-1614
2399 y Fc(1)-1654 2375 y
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654
2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end } PutCoor PutBegin 
end
 -1654 2375
a -1654 2375 a
tx@Dict begin  { 70.0 0.0 } PutCoor PutBegin  end
 -1654 2375 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 0.0 0.0 pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop 0.0 0.0 pop tx@NodeDict begin tx@NodeDict /N@nAf known
{ 0.0 -90. /N@nAf load 0 GetEdge 0.0 -90. AddOffset /N@nAf load GetCenter
3 -1 roll add 3 1 roll add exch } { CP } ifelse end exch pop   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.6 SLW 0.25  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
@endspecial -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654
2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end } PutCoor PutBegin 
end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { 112.0 0.0 } PutCoor PutBegin  end
 -1654 2375
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 0.0 0.0 pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop 0.0 0.0 pop tx@NodeDict begin tx@NodeDict /N@nAf known
{ 0.0 -90. /N@nAf load 0 GetEdge 0.0 -90. AddOffset /N@nAf load GetCenter
3 -1 roll add 3 1 roll add exch } { CP } ifelse end exch pop   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.6 SLW 0.25  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial -1654 2375 a
tx@Dict begin  PutEnd  end
-1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 90.
/N@nAf load 0 GetEdge 0.0 90. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end } PutCoor PutBegin 
end
 -1654
2375 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@nAf known { 0.0 0. /N@nAf load 0 GetEdge 0.0 0. AddOffset /N@nAf
load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse end
pop 0.0 -70.0 exch pop tx@NodeDict begin tx@NodeDict /N@nAf known {
0.0 180. /N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter
3 -1 roll add 3 1 roll add exch } { CP } ifelse end pop 0.0 -70.0 exch
pop   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add
dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial -1654 2375
a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 90.
/N@nAf load 0 GetEdge 0.0 90. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end } PutCoor PutBegin 
end
 -1654 2375 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@nAf known { 0.0 0. /N@nAf load 0 GetEdge 0.0 0. AddOffset /N@nAf
load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse end
pop 0.0 -112.0 exch pop tx@NodeDict begin tx@NodeDict /N@nAf known
{ 0.0 180. /N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter
3 -1 roll add 3 1 roll add exch } { CP } ifelse end pop 0.0 -112.0
exch pop   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654
2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@pTreeA known { /N@pTreeA
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 -1654 2375 a -1654 2375
a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 } false /N@pref 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  tx@NodeDict begin {-42.67912 0.0 } false /N@p1 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@p1 known { /N@p1
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
-1654 2375 a -1677 2406 a
tx@Dict begin  tx@NodeDict begin { 5.47499  2 div 7.424  0.0  add 2
div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@n1 11 {InitCnode
} /NodeScale {} def NewNode end  end
 -1677 2406 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.47499  2 div 7.424  0.0
 add 2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add 0 360
arc closepath gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fq(1)-1654 2375 y
tx@Dict begin  PutEnd  end
 -1654 2375
a -1654 2375 a
tx@Dict begin  tx@NodeDict begin {-85.35825 0.0 } false /N@p2 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@p2 known { /N@p2
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 -1654 2375 a
-1677 2406 a
tx@Dict begin  tx@NodeDict begin { 5.47499  2 div 7.424  0.0  add 2
div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@n2 11 {InitCnode
} /NodeScale {} def NewNode end  end
 -1677 2406 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.47499  2 div 7.424  0.0
 add 2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add 0 360
arc closepath gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
Fq(2)-1654 2375 y
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@p2 known { /N@p2
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 -1654 2375
a -1654 2375 a
tx@Dict begin  tx@NodeDict begin {42.67912 225. PtoC } false /N@py0
10 {InitPnode } /NodeScale {} def NewNode end  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a
-1654 2375 a
tx@Dict begin  tx@NodeDict begin {-128.03737 0.0 } false /N@p3 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@p3 known { /N@p3
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 -1654 2375 a -1677
2406 a
tx@Dict begin  tx@NodeDict begin { 5.47499  2 div 7.424  0.1094  add
2 div 2 copy 0.1094  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@n3
11 {InitCnode } /NodeScale {} def NewNode end  end
 -1677 2406 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.47499  2 div 7.424  0.1094
 add 2 div 2 copy 0.1094  sub 4 2 roll Pyth 3.0 add  CLW 2 div add
0 360 arc closepath gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
Fq(3)-1654 2375 y
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@p3 known { /N@p3
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 -1654 2375
a -1654 2375 a
tx@Dict begin  tx@NodeDict begin {42.67912 135. PtoC } false /N@p4
10 {InitPnode } /NodeScale {} def NewNode end  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@p4 known { /N@p4
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 -1654 2375 a
-1677 2406 a
tx@Dict begin  tx@NodeDict begin {7.424 0.0 5.47499 2.73749 3.71199
} false /N@n4 16 {InitRnode } /NodeScale {} def NewNode end  end
 -1677 2406 a Fq(4)-1654 2375 y
tx@Dict begin  PutEnd  end
 -1654 2375
a -1654 2375 a
tx@Dict begin  tx@NodeDict begin {42.67912 180. PtoC } false /N@p5
10 {InitPnode } /NodeScale {} def NewNode end  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@p5 known { /N@p5
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 -1654 2375 a
-1677 2406 a
tx@Dict begin  tx@NodeDict begin {7.424 0.1094 5.47499 2.73749 3.65729
} false /N@n5 16 {InitRnode } /NodeScale {} def NewNode end  end
 -1677 2406 a Fq(5)-1654 2375 y
tx@Dict begin  PutEnd  end
 -1654 2375
a -1654 2375 a
tx@Dict begin  tx@NodeDict begin {42.67912 225. PtoC } false /N@py1
10 {InitPnode } /NodeScale {} def NewNode end  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a
-1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@pref known { /N@pref
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 -1654 2375 a -1674 2395 a
tx@Dict begin  tx@NodeDict begin {6.90388 2.2337 4.86172 2.43086 2.33508
} false /N@nref 16 {InitRnode } /NodeScale {} def NewNode end  end
 -1674 2395 a 12
w Fq(\230)g Fo(y)-1654 2375 y
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375
a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@py0 known { /N@py0
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 -1654 2375 a -1693 2385 a
tx@Dict begin  tx@NodeDict begin {4.75766 2.2337 9.36172 4.68086 1.26198
} false /N@ny0 16 {InitRnode } /NodeScale {} def NewNode end  end
 -1693 2385 a Fo(y)-1653 2399
y Fc(0)-1654 2375 y
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@py1 known { /N@py1
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 -1654 2375
a -1693 2385 a
tx@Dict begin  tx@NodeDict begin {4.75766 2.2337 9.36172 4.68086 1.26198
} false /N@ny1 16 {InitRnode } /NodeScale {} def NewNode end  end
 -1693 2385 a Fo(y)-1653 2399 y Fc(1)-1654
2375 y
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  /NCLW CLW
def tx@NodeDict begin 0.0 0.0 neg 2.0 2.0 0 0 /N@n1 /N@nref InitNC
{ NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2
ED /y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1.
1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos
mul y1 add ArrowInside pop pop } repeat } ifelse pop pop lineto pop
pop end  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -1654 2375 a -1654 2375
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  /NCLW CLW
def tx@NodeDict begin 0.0 0.0 neg 2.0 2.0 0 0 /N@ny0 /N@n2 InitNC {
NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED
/y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def
/ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5
 abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt {
exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add
ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0
1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add
ArrowInside pop pop } repeat } ifelse pop pop lineto pop pop end  }
if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore  grestore end
 -1654 2375 a -1654 2375 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  /NCLW CLW
def tx@NodeDict begin 0.0 0.0 neg 2.0 2.0 0 0 /N@ny1 /N@n3 InitNC {
NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED
/y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def
/ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5
 abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt {
exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add
ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0
1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add
ArrowInside pop pop } repeat } ifelse pop pop lineto pop pop end  }
if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore  grestore end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
-1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@pTreeB known { /N@pTreeB
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 } false /N@pref 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -1654
2375 a -1654 2375 a
tx@Dict begin  tx@NodeDict begin {-42.67912 0.0 } false /N@p6 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@p6 known { /N@p6
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 -1654 2375
a -1677 2406 a
tx@Dict begin  tx@NodeDict begin { 5.47499  2 div 7.424  0.1094  add
2 div 2 copy 0.1094  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@n6
11 {InitCnode } /NodeScale {} def NewNode end  end
 -1677 2406 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.47499  2 div 7.424  0.1094
 add 2 div 2 copy 0.1094  sub 4 2 roll Pyth 3.0 add  CLW 2 div add
0 360 arc closepath gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
@endspecial Fq(6)-1654 2375 y
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375
a
tx@Dict begin  tx@NodeDict begin {-85.35825 0.0 } false /N@p7 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@p7 known { /N@p7
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 -1654 2375 a -1677 2405 a
tx@Dict begin  tx@NodeDict begin { 5.47499  2 div 7.12831  0.1094 
add 2 div 2 copy 0.1094  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@n7
11 {InitCnode } /NodeScale {} def NewNode end  end
-1677 2405 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.47499  2 div 7.12831
 0.1094  add 2 div 2 copy 0.1094  sub 4 2 roll Pyth 3.0 add  CLW 2
div add 0 360 arc closepath gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial Fq(7)-1654
2375 y
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@p7 known { /N@p7
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 -1654 2375 a -1654 2375
a
tx@Dict begin  tx@NodeDict begin {42.67912 225. PtoC } false /N@py1a
10 {InitPnode } /NodeScale {} def NewNode end  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  tx@NodeDict begin {-128.03737 0.0 } false /N@p8 10 {InitPnode
} /NodeScale {} def NewNode end  end
-1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@p8 known { /N@p8
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 -1654 2375 a -1677 2406 a
tx@Dict begin  tx@NodeDict begin {7.424 0.1094 5.47499 2.73749 3.65729
} false /N@n8 16 {InitRnode } /NodeScale {} def NewNode end  end
 -1677
2406 a Fq(8)-1654 2375 y
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@pref known { /N@pref
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 -1654
2375 a -1693 2385 a
tx@Dict begin  tx@NodeDict begin {4.75766 2.2337 9.36172 4.68086 1.26198
} false /N@nref 16 {InitRnode } /NodeScale {} def NewNode end  end
 -1693 2385 a Fo(y)-1653 2399 y Fc(0)-1654
2375 y
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@py1a known { /N@py1a
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 -1654 2375 a -1693 2385
a
tx@Dict begin  tx@NodeDict begin {4.75766 2.2337 9.36172 4.68086 1.26198
} false /N@ny1a 16 {InitRnode } /NodeScale {} def NewNode end  end
 -1693 2385 a Fo(y)-1653 2399 y Fc(1)-1654 2375 y
tx@Dict begin  PutEnd  end
 -1654
2375 a -1654 2375 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  /NCLW CLW
def tx@NodeDict begin 0.0 0.0 neg 2.0 2.0 0 0 /N@n6 /N@nref InitNC
{ NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2
ED /y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1.
1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos
mul y1 add ArrowInside pop pop } repeat } ifelse pop pop lineto pop
pop end  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -1654 2375 a -1654 2375 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  /NCLW CLW
def tx@NodeDict begin 0.0 0.0 neg 2.0 2.0 0 0 /N@ny1a /N@n7 InitNC
{ NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2
ED /y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1.
1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos
mul y1 add ArrowInside pop pop } repeat } ifelse pop pop lineto pop
pop end  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -1654 2375
a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@pTreeC known { /N@pTreeC
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 -1654 2375 a
-1654 2375 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 } false /N@pref 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  tx@NodeDict begin {-42.67912 0.0 } false /N@p9 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -1654 2375 a -1654
2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@p9 known { /N@p9
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 -1654 2375 a -1677 2405 a
tx@Dict begin  tx@NodeDict begin { 5.47499  2 div 7.424  0.24086  add
2 div 2 copy 0.24086  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@n9
11 {InitCnode } /NodeScale {} def NewNode end  end
 -1677 2405 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.47499  2 div 7.424  0.24086
 add 2 div 2 copy 0.24086  sub 4 2 roll Pyth 3.0 add  CLW 2 div add
0 360 arc closepath gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial Fq(9)-1654 2375 y
tx@Dict begin  PutEnd  end
 -1654 2375
a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@pref known { /N@pref
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 -1654 2375 a -1693 2385 a
tx@Dict begin  tx@NodeDict begin {4.75766 2.2337 9.36172 4.68086 1.26198
} false /N@nref 16 {InitRnode } /NodeScale {} def NewNode end  end
 -1693 2385 a
Fo(y)-1653 2399 y Fc(1)-1654 2375 y
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654
2375 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  /NCLW CLW
def tx@NodeDict begin 0.0 0.0 neg 2.0 2.0 0 0 /N@n9 /N@nref InitNC
{ NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2
ED /y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1.
1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos
mul y1 add ArrowInside pop pop } repeat } ifelse pop pop lineto pop
pop end  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375
a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { 14.0 -28.0 } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { -7.0 7.0 } PutCoor PutBegin  end
-1654 2375 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 0.0   false NArray
 /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0
1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial -1654
2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375
a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  /NCLW CLW
def tx@NodeDict begin 0.0 0.0 neg 2.0 2.0 0 0 /N@n2 /N@n1 InitNC {
NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED
/y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def
/ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5
 abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt {
exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add
ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0
1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add
ArrowInside pop pop } repeat } ifelse pop pop lineto pop pop end  }
if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore  grestore end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
-1654 2375 a -1654 2375 a
tx@Dict begin  { 28.0 -42.0 } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { -7.0 7.0 } PutCoor PutBegin  end
 -1654
2375 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 0.0   false NArray
 /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0
1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial -1654 2375
a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
-1654 2375 a -1654 2375 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  /NCLW CLW
def tx@NodeDict begin 0.0 0.0 neg 2.0 2.0 0 0 /N@n3 /N@n2 InitNC {
NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED
/y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def
/ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5
 abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt {
exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add
ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0
1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add
ArrowInside pop pop } repeat } ifelse pop pop lineto pop pop end  }
if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore  grestore end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 -1654
2375 a -1654 2375 a
tx@Dict begin  { 42.0 -56.0 } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { -7.0 7.0 } PutCoor PutBegin  end
 -1654 2375
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 0.0   false NArray
 /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0
1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial -1654 2375 a
tx@Dict begin  PutEnd  end
-1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654
2375 a -1654 2375 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  /NCLW CLW
def tx@NodeDict begin 0.0 0.0 neg 2.0 2.0 0 0 /N@n4 /N@n3 InitNC {
NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED
/y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def
/ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5
 abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt {
exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add
ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0
1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add
ArrowInside pop pop } repeat } ifelse pop pop lineto pop pop end  }
if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore  grestore end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 -1654 2375
a -1654 2375 a
tx@Dict begin  { 42.0 -70.0 } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { -7.0 7.0 } PutCoor PutBegin  end
 -1654 2375 a
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 0.0   false NArray
 /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0
1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654
2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375
a -1654 2375 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  /NCLW CLW
def tx@NodeDict begin 0.0 0.0 neg 2.0 2.0 0 0 /N@n5 /N@n3 InitNC {
NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED
/y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def
/ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5
 abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt {
exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add
ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0
1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add
ArrowInside pop pop } repeat } ifelse pop pop lineto pop pop end  }
if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore  grestore end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 -1654 2375 a
-1654 2375 a
tx@Dict begin  { 28.0 -84.0 } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { -7.0 7.0 } PutCoor PutBegin  end
 -1654 2375 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 3.0
.5 CLW mul sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0 
setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654
2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375
a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { 42.0 -126.0 } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { -7.0 7.0 } PutCoor PutBegin  end
-1654 2375 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 3.0
.5 CLW mul sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0 
setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial -1654
2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375
a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { 84.0 -98.0 } PutCoor PutBegin  end
-1654 2375 a -1654 2375 a
tx@Dict begin  { -7.0 7.0 } PutCoor PutBegin  end
 -1654 2375 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 0.0   false NArray
 /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0
1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654
2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  /NCLW CLW
def tx@NodeDict begin 0.0 0.0 neg 2.0 2.0 0 0 /N@n7 /N@n6 InitNC {
NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED
/y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def
/ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5
 abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt {
exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add
ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0
1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add
ArrowInside pop pop } repeat } ifelse pop pop lineto pop pop end  }
if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore  grestore end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { 98.0 -112.0 } PutCoor PutBegin  end
-1654 2375 a -1654 2375 a
tx@Dict begin  { -7.0 7.0 } PutCoor PutBegin  end
 -1654 2375 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 0.0   false NArray
 /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0
1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654
2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.15 1.8 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  /NCLW CLW
def tx@NodeDict begin 0.0 0.0 neg 2.0 2.0 0 0 /N@n8 /N@n7 InitNC {
NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED
/y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def
/ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5
 abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt {
exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add
ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0
1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add
ArrowInside pop pop } repeat } ifelse pop pop lineto pop pop end  }
if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore  grestore end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@nAf known { 0.0 180.
/N@nAf load 0 GetEdge 0.0 180. AddOffset /N@nAf load GetCenter 3 -1
roll add 3 1 roll add exch } { CP } ifelse end pop tx@NodeDict begin
tx@NodeDict /N@nAf known { 0.0 90. /N@nAf load 0 GetEdge 0.0 90. AddOffset
/N@nAf load GetCenter 3 -1 roll add 3 1 roll add exch } { CP } ifelse
end exch pop } PutCoor PutBegin  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  { 98.0 -126.0 } PutCoor PutBegin  end
-1654 2375 a -1654 2375 a
tx@Dict begin  { -7.0 7.0 } PutCoor PutBegin  end
 -1654 2375 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 3.0
.5 CLW mul sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0 
setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654
2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375 a
tx@Dict begin  PutEnd  end
 -1654 2375 a -1654 2375
a
tx@Dict begin  { tx@NodeDict begin tx@NodeDict /N@pTitle known { /N@pTitle
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 -1654 2375 a -414 w Fq(F)o(ore)o(ground)26 b(Fragments)-1654
2375 y
tx@Dict begin  PutEnd  end
 -1654 2375 a 0 2612 a
tx@Dict begin  PutEnd  end
 0 2612 a 0 TeXcolorgray
0 TeXcolorgray eop end
%%Trailer
userdict /end-hook known{end-hook}if
%%Trailer
cleartomark
countdictstack
exch sub { end } repeat
restore
%%EOF
